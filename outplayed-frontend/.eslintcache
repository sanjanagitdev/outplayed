[{"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\index.js":"1","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\i18n.js":"2","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\App.js":"3","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\serviceWorker.js":"4","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\config\\history.js":"5","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\context\\context.js":"6","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\config\\axios.js":"7","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\ladderroom.jsx":"8","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\insideladder.jsx":"9","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\home\\home.jsx":"10","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\hubs.jsx":"11","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\news\\newsdetail.jsx":"12","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\insidegamesecond.jsx":"13","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\news\\news.jsx":"14","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmaking1vs1.jsx":"15","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\insidegamefirst.jsx":"16","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmaking.jsx":"17","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\gamefinished.jsx":"18","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmakingroom.jsx":"19","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\tournament.jsx":"20","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\tournamentroom.jsx":"21","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmaking5vs5.jsx":"22","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\scouting\\index.jsx":"23","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\finishedtournaments.jsx":"24","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\team\\team.jsx":"25","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\checkJoined.jsx":"26","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\premium\\premiumListing.jsx":"27","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\insidetournament.jsx":"28","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\advance\\advanceListing.jsx":"29","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\loader\\loader.jsx":"30","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sectionincident\\sectionincident.jsx":"31","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\profile.jsx":"32","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\premium\\premium.jsx":"33","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\playerDetail.jsx":"34","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\advance\\advance.jsx":"35","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\store\\store.jsx":"36","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\servers\\list.jsx":"37","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\addmaps\\list.jsx":"38","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\addproduct.jsx":"39","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\addcategory.jsx":"40","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\admindashboard\\dashboard.jsx":"41","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\category.jsx":"42","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\challenge\\challenge.jsx":"43","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\purchase-items.jsx":"44","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\admincategory\\category.jsx":"45","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\userlist\\user.jsx":"46","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\tournament\\addtournament.jsx":"47","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\admincategory\\addnews.jsx":"48","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\adminlogin\\login.jsx":"49","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\createnormalhub\\normalhublist.jsx":"50","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\createnormalhub\\normalhub.jsx":"51","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\privateroute\\index.js":"52","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\function\\index.js":"53","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\socket\\index.js":"54","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\index.jsx":"55","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\servers\\index.jsx":"56","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\addmaps\\index.jsx":"57","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\index.jsx":"58","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\challenges\\index.jsx":"59","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\tournament\\index.jsx":"60","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\myprofile\\index.jsx":"61","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\statistics\\index.jsx":"62","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\reporting\\index.jsx":"63","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\support\\index.jsx":"64","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\withdrawrequest\\index.jsx":"65","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\tournamentrules\\index.jsx":"66","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\config\\keys.js":"67","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\popupwrapper.jsx":"68","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\info-tab.jsx":"69","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\rules-tab.jsx":"70","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\playgame.jsx":"71","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\teams.jsx":"72","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\classification.jsx":"73","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\matchmakingteam.jsx":"74","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\layout\\layout.jsx":"75","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\store\\storeDetail.jsx":"76","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\rightsidebar.jsx":"77","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\leftsidebar.jsx":"78","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\adminwrapper\\wrapper.jsx":"79","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\createladderform.jsx":"80","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\support\\popup.jsx":"81","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\ladder-box.jsx":"82","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\ladderheader.jsx":"83","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\signatureBook.jsx":"84","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\streaming.jsx":"85","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\profileInfo.jsx":"86","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\tournaments.jsx":"87","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\generalDescription.jsx":"88","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\advanceStatisctics.jsx":"89","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\reward.jsx":"90","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\brackets.jsx":"91","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\lastMatches.jsx":"92","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\registration.jsx":"93","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\rules.jsx":"94","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\testBracket.jsx":"95","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\profileTop.jsx":"96","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\summary.jsx":"97","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\team\\grouplist.jsx":"98","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\team\\teamlist.jsx":"99","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\voiceservice.jsx":"100","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\outplayedcommunity.jsx":"101","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\increaseexperience.jsx":"102","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\mainmenu.jsx":"103","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\adminheader\\header.jsx":"104","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\group.jsx":"105","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\adminmenu\\menu.jsx":"106","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\friends.jsx":"107","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\team.jsx":"108","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\footer\\footer.jsx":"109","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\header\\header.jsx":"110","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\scouting\\scouting.jsx":"111","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\tournamentheader.jsx":"112","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\lookinggame5vs5.jsx":"113","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\matchmakinggroup.jsx":"114","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\scouting\\filter-section.jsx":"115","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\featuredstreaming.jsx":"116","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sectionincident\\incidentList.jsx":"117","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\wallet.jsx":"118","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\login-register.jsx":"119","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\forget.jsx":"120","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\notification\\notification.jsx":"121","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\reset.jsx":"122","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\monthlyrank.jsx":"123","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\createtournament.jsx":"124","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmakingprofile.jsx":"125","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\sharegame.jsx":"126","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\chat.jsx":"127","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\gameselection.jsx":"128","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\lookinggame1vs1.jsx":"129","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\news\\newsheader.jsx":"130","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\gatherlist.jsx":"131","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\playhub.jsx":"132","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\createhub.jsx":"133","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\postComponent.jsx":"134","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\context\\profilecontext.js":"135"},{"size":650,"mtime":1618206982010,"results":"136","hashOfConfig":"137"},{"size":684,"mtime":1618206980355,"results":"138","hashOfConfig":"137"},{"size":22963,"mtime":1625744495754,"results":"139","hashOfConfig":"137"},{"size":5086,"mtime":1618206980187,"results":"140","hashOfConfig":"137"},{"size":85,"mtime":1618207171806,"results":"141","hashOfConfig":"137"},{"size":201,"mtime":1618207084621,"results":"142","hashOfConfig":"137"},{"size":2536,"mtime":1618207172737,"results":"143","hashOfConfig":"137"},{"size":14273,"mtime":1618207124705,"results":"144","hashOfConfig":"137"},{"size":10182,"mtime":1618207122732,"results":"145","hashOfConfig":"137"},{"size":7083,"mtime":1618207147336,"results":"146","hashOfConfig":"137"},{"size":7525,"mtime":1618211002604,"results":"147","hashOfConfig":"137"},{"size":8014,"mtime":1618207104630,"results":"148","hashOfConfig":"137"},{"size":1702,"mtime":1618207151630,"results":"149","hashOfConfig":"137"},{"size":6788,"mtime":1618207104443,"results":"150","hashOfConfig":"137"},{"size":7290,"mtime":1618207089704,"results":"151","hashOfConfig":"137"},{"size":16040,"mtime":1618207152542,"results":"152","hashOfConfig":"137"},{"size":5822,"mtime":1618207087859,"results":"153","hashOfConfig":"137"},{"size":5849,"mtime":1618207149809,"results":"154","hashOfConfig":"137"},{"size":11538,"mtime":1618207089669,"results":"155","hashOfConfig":"137"},{"size":9009,"mtime":1622438728676,"results":"156","hashOfConfig":"137"},{"size":12904,"mtime":1618207109533,"results":"157","hashOfConfig":"137"},{"size":9746,"mtime":1618207090590,"results":"158","hashOfConfig":"137"},{"size":9433,"mtime":1622438728674,"results":"159","hashOfConfig":"137"},{"size":5193,"mtime":1618207110225,"results":"160","hashOfConfig":"137"},{"size":4731,"mtime":1618207097029,"results":"161","hashOfConfig":"137"},{"size":1455,"mtime":1618207113742,"results":"162","hashOfConfig":"137"},{"size":4135,"mtime":1618207140988,"results":"163","hashOfConfig":"137"},{"size":10220,"mtime":1618207108329,"results":"164","hashOfConfig":"137"},{"size":3003,"mtime":1618207139559,"results":"165","hashOfConfig":"137"},{"size":235,"mtime":1618207132963,"results":"166","hashOfConfig":"137"},{"size":3508,"mtime":1618207134430,"results":"167","hashOfConfig":"137"},{"size":12370,"mtime":1625744147976,"results":"168","hashOfConfig":"137"},{"size":4055,"mtime":1618207141775,"results":"169","hashOfConfig":"137"},{"size":9961,"mtime":1625231428595,"results":"170","hashOfConfig":"137"},{"size":4214,"mtime":1618207139465,"results":"171","hashOfConfig":"137"},{"size":12533,"mtime":1622438728675,"results":"172","hashOfConfig":"137"},{"size":3787,"mtime":1618207163936,"results":"173","hashOfConfig":"137"},{"size":3816,"mtime":1618207168426,"results":"174","hashOfConfig":"137"},{"size":11419,"mtime":1622438728661,"results":"175","hashOfConfig":"137"},{"size":3955,"mtime":1618211565402,"results":"176","hashOfConfig":"137"},{"size":9540,"mtime":1618207167044,"results":"177","hashOfConfig":"137"},{"size":3660,"mtime":1618211565403,"results":"178","hashOfConfig":"137"},{"size":5502,"mtime":1618207161130,"results":"179","hashOfConfig":"137"},{"size":2616,"mtime":1618482984747,"results":"180","hashOfConfig":"137"},{"size":4625,"mtime":1618207164265,"results":"181","hashOfConfig":"137"},{"size":6825,"mtime":1622438728664,"results":"182","hashOfConfig":"137"},{"size":9809,"mtime":1622438728662,"results":"183","hashOfConfig":"137"},{"size":8159,"mtime":1618207165317,"results":"184","hashOfConfig":"137"},{"size":3266,"mtime":1618207162546,"results":"185","hashOfConfig":"137"},{"size":4462,"mtime":1618207169798,"results":"186","hashOfConfig":"137"},{"size":6192,"mtime":1618207169471,"results":"187","hashOfConfig":"137"},{"size":1502,"mtime":1618207128805,"results":"188","hashOfConfig":"137"},{"size":42183,"mtime":1625751205931,"results":"189","hashOfConfig":"137"},{"size":4089,"mtime":1623754895472,"results":"190","hashOfConfig":"137"},{"size":4194,"mtime":1618482984734,"results":"191","hashOfConfig":"137"},{"size":8379,"mtime":1618207162881,"results":"192","hashOfConfig":"137"},{"size":5846,"mtime":1618210982901,"results":"193","hashOfConfig":"137"},{"size":5422,"mtime":1622438728666,"results":"194","hashOfConfig":"137"},{"size":7341,"mtime":1618207135851,"results":"195","hashOfConfig":"137"},{"size":4412,"mtime":1622438728662,"results":"196","hashOfConfig":"137"},{"size":6528,"mtime":1625750773742,"results":"197","hashOfConfig":"137"},{"size":23167,"mtime":1618207098548,"results":"198","hashOfConfig":"137"},{"size":3898,"mtime":1618207166700,"results":"199","hashOfConfig":"137"},{"size":6999,"mtime":1618207159742,"results":"200","hashOfConfig":"137"},{"size":3641,"mtime":1618207157154,"results":"201","hashOfConfig":"137"},{"size":6913,"mtime":1618207171311,"results":"202","hashOfConfig":"137"},{"size":1831,"mtime":1623766630264,"results":"203","hashOfConfig":"137"},{"size":422,"mtime":1618207115580,"results":"204","hashOfConfig":"137"},{"size":2973,"mtime":1618207126441,"results":"205","hashOfConfig":"137"},{"size":622,"mtime":1618207125642,"results":"206","hashOfConfig":"137"},{"size":5991,"mtime":1618207148860,"results":"207","hashOfConfig":"137"},{"size":12815,"mtime":1622438728665,"results":"208","hashOfConfig":"137"},{"size":1106,"mtime":1618207123672,"results":"209","hashOfConfig":"137"},{"size":2395,"mtime":1618207115335,"results":"210","hashOfConfig":"137"},{"size":688,"mtime":1618207138082,"results":"211","hashOfConfig":"137"},{"size":380,"mtime":1618211872922,"results":"212","hashOfConfig":"137"},{"size":981,"mtime":1618207091132,"results":"213","hashOfConfig":"137"},{"size":941,"mtime":1618207092076,"results":"214","hashOfConfig":"137"},{"size":1729,"mtime":1618207165650,"results":"215","hashOfConfig":"137"},{"size":6480,"mtime":1618207124580,"results":"216","hashOfConfig":"137"},{"size":2311,"mtime":1618207160156,"results":"217","hashOfConfig":"137"},{"size":2962,"mtime":1618207128071,"results":"218","hashOfConfig":"137"},{"size":1366,"mtime":1622438728667,"results":"219","hashOfConfig":"137"},{"size":1897,"mtime":1625638054033,"results":"220","hashOfConfig":"137"},{"size":388,"mtime":1623736698000,"results":"221","hashOfConfig":"137"},{"size":5160,"mtime":1625751265971,"results":"222","hashOfConfig":"137"},{"size":1909,"mtime":1625574836992,"results":"223","hashOfConfig":"137"},{"size":2723,"mtime":1625743747272,"results":"224","hashOfConfig":"137"},{"size":4799,"mtime":1625728953401,"results":"225","hashOfConfig":"137"},{"size":375,"mtime":1618207112068,"results":"226","hashOfConfig":"137"},{"size":13800,"mtime":1618207112992,"results":"227","hashOfConfig":"137"},{"size":1056,"mtime":1625577614817,"results":"228","hashOfConfig":"137"},{"size":4895,"mtime":1618207111434,"results":"229","hashOfConfig":"137"},{"size":929,"mtime":1618207110510,"results":"230","hashOfConfig":"137"},{"size":4069,"mtime":1618207108612,"results":"231","hashOfConfig":"137"},{"size":5732,"mtime":1625741753473,"results":"232","hashOfConfig":"137"},{"size":3691,"mtime":1618207112348,"results":"233","hashOfConfig":"137"},{"size":3434,"mtime":1618207097164,"results":"234","hashOfConfig":"137"},{"size":2471,"mtime":1618207096238,"results":"235","hashOfConfig":"137"},{"size":871,"mtime":1618207091987,"results":"236","hashOfConfig":"137"},{"size":1220,"mtime":1618207092900,"results":"237","hashOfConfig":"137"},{"size":708,"mtime":1618207093927,"results":"238","hashOfConfig":"137"},{"size":2063,"mtime":1618207094856,"results":"239","hashOfConfig":"137"},{"size":1197,"mtime":1618207158793,"results":"240","hashOfConfig":"137"},{"size":6717,"mtime":1618207093813,"results":"241","hashOfConfig":"137"},{"size":4702,"mtime":1622438728660,"results":"242","hashOfConfig":"137"},{"size":12376,"mtime":1618211116143,"results":"243","hashOfConfig":"137"},{"size":18825,"mtime":1625479666972,"results":"244","hashOfConfig":"137"},{"size":1851,"mtime":1618207143748,"results":"245","hashOfConfig":"137"},{"size":19642,"mtime":1625313829112,"results":"246","hashOfConfig":"137"},{"size":5351,"mtime":1618207121279,"results":"247","hashOfConfig":"137"},{"size":1401,"mtime":1622438728676,"results":"248","hashOfConfig":"137"},{"size":4528,"mtime":1618207087828,"results":"249","hashOfConfig":"137"},{"size":5000,"mtime":1618207117498,"results":"250","hashOfConfig":"137"},{"size":8718,"mtime":1622438728673,"results":"251","hashOfConfig":"137"},{"size":2978,"mtime":1618207086935,"results":"252","hashOfConfig":"137"},{"size":2818,"mtime":1618207134340,"results":"253","hashOfConfig":"137"},{"size":12579,"mtime":1618207114403,"results":"254","hashOfConfig":"137"},{"size":11786,"mtime":1618207116500,"results":"255","hashOfConfig":"137"},{"size":2891,"mtime":1618207116260,"results":"256","hashOfConfig":"137"},{"size":5627,"mtime":1618207143161,"results":"257","hashOfConfig":"137"},{"size":3269,"mtime":1618561099308,"results":"258","hashOfConfig":"137"},{"size":8453,"mtime":1618207149776,"results":"259","hashOfConfig":"137"},{"size":6038,"mtime":1618207109276,"results":"260","hashOfConfig":"137"},{"size":2366,"mtime":1618207086009,"results":"261","hashOfConfig":"137"},{"size":1102,"mtime":1618207150689,"results":"262","hashOfConfig":"137"},{"size":3518,"mtime":1618207154388,"results":"263","hashOfConfig":"137"},{"size":2763,"mtime":1618207088740,"results":"264","hashOfConfig":"137"},{"size":1401,"mtime":1618207088782,"results":"265","hashOfConfig":"137"},{"size":1950,"mtime":1618207106282,"results":"266","hashOfConfig":"137"},{"size":4884,"mtime":1618207151679,"results":"267","hashOfConfig":"137"},{"size":2288,"mtime":1618207148867,"results":"268","hashOfConfig":"137"},{"size":3121,"mtime":1618207153475,"results":"269","hashOfConfig":"137"},{"size":9511,"mtime":1625654990725,"results":"270","hashOfConfig":"137"},{"size":229,"mtime":1623752066253,"results":"271","hashOfConfig":"137"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},"7j80kx",{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"274"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"274"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"274"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"274"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"274"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"274"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"274"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"274"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"274"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"274"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"274"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"274"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"274"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"274"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"274"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"354","usedDeprecatedRules":"274"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"274"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"360","usedDeprecatedRules":"274"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"274"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"274"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"274"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"274"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"274"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"274"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"274"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"274"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"274"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"274"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"274"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"274"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"274"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"274"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"274"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"274"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"274"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"274"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"274"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"274"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"274"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"274"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"274"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"274"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"274"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"274"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"274"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"274"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"274"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"274"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527","usedDeprecatedRules":"274"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"274"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"274"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"274"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"274"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"274"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"274"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"274"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"274"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\index.js",[],["600","601"],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\i18n.js",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\App.js",["602"],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\serviceWorker.js",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\config\\history.js",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\context\\context.js",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\config\\axios.js",["603","604","605","606","607","608","609"],"import axios from \"axios\";\r\nimport {\r\n    API_URL,\r\n    ADMIN_API_URL,\r\n    NEWS_API_URL,\r\n    HUBS_API_URL,\r\n    MATCHMAKING_API_URL,\r\n    TOURNAMENT_API_URL,\r\n    LADDER_API_URL,\r\n} from \"../config/keys\";\r\nexport const userInstance = () => {\r\n    return axios.create({\r\n        baseURL: API_URL,\r\n        withCredentials: true,\r\n        headers: {\r\n            Authorization: localStorage.getItem(\"webtoken\")\r\n                ? \"Bearer\" + \" \" + localStorage.getItem(\"webtoken\")\r\n                : \"\",\r\n        },\r\n    });\r\n};\r\n\r\nexport const adminInstance = () => {\r\n    return axios.create({\r\n        baseURL: ADMIN_API_URL,\r\n        withCredentials: true,\r\n        headers: {\r\n            Authorization: localStorage.getItem(\"webadmintoken\")\r\n                ? \"Bearer\" + \" \" + localStorage.getItem(\"webadmintoken\")\r\n                : \"\",\r\n        },\r\n    });\r\n};\r\n\r\nexport const NEWS_INSTANCE = () => {\r\n    return axios.create({\r\n        baseURL: NEWS_API_URL,\r\n        withCredentials: true,\r\n        headers: {\r\n            Authorization: localStorage.getItem(\"webtoken\")\r\n                ? \"Bearer\" + \" \" + localStorage.getItem(\"webtoken\")\r\n                : \"\",\r\n        },\r\n    });\r\n};\r\n\r\nexport const hubsInstance = () => {\r\n    return axios.create({\r\n        baseURL: HUBS_API_URL,\r\n        withCredentials: true,\r\n        headers: {\r\n            Authorization: localStorage.getItem(\"webtoken\")\r\n                ? \"Bearer\" + \" \" + localStorage.getItem(\"webtoken\")\r\n                : \"\",\r\n        },\r\n    });\r\n};\r\nexport const matchmakingInstance = () => {\r\n    return axios.create({\r\n        baseURL: MATCHMAKING_API_URL,\r\n        withCredentials: true,\r\n        headers: {\r\n            Authorization: localStorage.getItem(\"webtoken\")\r\n                ? \"Bearer\" + \" \" + localStorage.getItem(\"webtoken\")\r\n                : \"\",\r\n        },\r\n    });\r\n};\r\nexport const tournamentInstance = () => {\r\n    return axios.create({\r\n        baseURL: TOURNAMENT_API_URL,\r\n        withCredentials: true,\r\n        headers: {\r\n            Authorization: localStorage.getItem(\"webtoken\")\r\n                ? \"Bearer\" + \" \" + localStorage.getItem(\"webtoken\")\r\n                : \"\",\r\n        },\r\n    });\r\n};\r\n\r\nexport const ladderInstance = () => {\r\n    return axios.create({\r\n        baseURL: LADDER_API_URL,\r\n        withCredentials: true,\r\n        headers: {\r\n            Authorization: localStorage.getItem(\"webtoken\")\r\n                ? \"Bearer\" + \" \" + localStorage.getItem(\"webtoken\")\r\n                : \"\",\r\n        },\r\n    });\r\n};\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\ladderroom.jsx",["610","611","612","613"],"import React, { useEffect, useState } from \"react\";\nimport copy from \"copy-to-clipboard\";\nimport \"../hubs/hubs.css\";\nimport Layout from \"../layout/layout\";\nimport LeftSidebar from \"../sidebar/leftsidebar\";\nimport RightSidebar from \"../sidebar/rightsidebar\";\nimport Teams from \"../hubs/teams\";\n// import Chat from \"./chat\";\n// import ShareGame from \"./sharegame\";\nimport PlayGame from \"../hubs/playgame\";\nimport GameFinished from '../hubs/gamefinished';\nimport { tournamentInstance, ladderInstance } from '../../config/axios';\nimport { queryString, Notification, FormatTimer } from \"../../function\";\n// import history from \"../../config/history\";\nimport { socket, GetHubsChat, PlayerPickTimer, HubGameCancelled, PickMapEvent, SetHubsIP, ResetRoom, GetMapVotingStart } from \"../../socket\";\nimport { validateComment, CalculateStats } from \"../../function\";\nlet interval;\nconst LadderRoom = () => {\n    const [message, setMessage] = useState('');\n    const [userid, setUserId] = useState('');\n    const [chats, setChats] = useState({ teamone: [], teamtwo: [] });\n    const [team1, setTeam1] = useState([]);\n    const [team2, setTeam2] = useState([]);\n    const [BothCaptain, setBothCaptain] = useState([]);\n    const [Captain, setCaptain] = useState(false);\n    const [Exist, setExist] = useState(false);\n    const [ChanceTimer, setChanceTimer] = useState({ timer: 0, chance: false });\n    const [maps, setMaps] = useState([]);\n    const [name, setName] = useState('');\n    const [running, setRunning] = useState(true);\n    const [checkfull, setCheckfull] = useState('');\n    const [cancelled, setCancelled] = useState(false);\n    const [mapvoting, setMapvoting] = useState('false');\n    const [joinip, setJoinIp] = useState('');\n    const [dataLoad, setDataLoad] = useState(false);\n    const [userStats, setUserStats] = useState([]);\n    const [ScoreBoth, setBothState] = useState({ team1: '', team2: '' });\n    const [comment, setComment] = useState('');\n    const [errors, setErrors] = useState({});\n    const [commentList, setCommentList] = useState([]);\n    const [teamname, setTeamName] = useState(\"\");\n    const [leftTime, setLeftTime] = useState(\"\");\n    // This state is used to set ready for the player - \n    const [Ready, setReadyTeam] = useState(false);\n\n    useEffect(() => {\n        TournamentRoomData();\n        //This event is used to get real time chat message\n        GetHubsChat(({ messages, team }) => {\n            try {\n                setChats((preState) => {\n                    return { ...preState, [team]: [...preState[team], messages] }\n                });\n                document.querySelector(\".chat-list:last-child\").scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });\n            } catch (e) {\n                return 0;\n            }\n        });\n\n        // this function for PlayerPickTimer \n        PlayerPickTimer((data) => {\n            console.log(\"data\", data);\n            const userlocalid = localStorage.getItem('userid');\n            if (data.playerid === userlocalid) {\n                setChanceTimer({ timer: data.timer, chance: true });\n            } else {\n                setChanceTimer({ timer: data.timer, chance: false });\n            }\n        });\n\n        //This socket event will when game cancelled\n        // HubGameCancelled(() => {\n        //     Notification('danger', 'Game cannceled due to inactivety at the time of map ban');\n        //     history.push(\"/matchmaking\");\n        // });\n        // This function is used to get captains picked map in real time\n        PickMapEvent((mapname) => {\n            setMaps(preState => setMapsFunction(preState, mapname))\n        });\n        //In this event we set server ip where all things are configured\n        SetHubsIP((ip) => {\n            setJoinIp(ip.ip)\n            setChanceTimer({ timer: 60, chance: false });\n        });\n        //In this event we setup all the things\n        ResetRoom(() => {\n            TournamentRoomData();\n        })\n        //GetMapVotingStart\n        GetMapVotingStart(() => {\n            setMapvoting('true');\n            setReadyTeam(true);\n        })\n        const setMapsFunction = (preState, mapname) => {\n            preState.forEach(element => {\n                if (element.title === mapname) {\n                    element.open = false;\n                }\n            });\n            return preState;\n        }\n    }, []);\n    const TournamentRoomData = async () => {\n        try {\n            const { id } = queryString();\n            if (id) {\n                const { data: { code, ladderRoomData: { teamone, teamtwo, team1, team2, maps, running, cancelled, mapvoting, joinip, comments, gamemode, ladderChallengeAt }, userid } } = await ladderInstance().get(`/ladderRoomData/${id}`);\n                if (code === 200) {\n                    setUserId(userid);\n                    setRunning(running);\n                    const teamname = teamone ? \"teamone\" : \"teamtwo\";\n                    setChats({ teamone: teamone ? teamone : [], teamtwo: teamtwo ? teamtwo : [] });\n                    setTeamName(teamname);\n                    setMaps(maps);\n                    setCheckfull('true');\n                    setCancelled(cancelled);\n                    setMapvoting(mapvoting);\n                    setJoinIp(joinip);\n                    setCommentList(comments);\n                    checkExistInHub(team1, team2, userid);\n                    clearInterval(interval);\n                    CalculateTimeBetween(ladderChallengeAt)\n                    console.log(\"ladderChallengeAt =>>\", ladderChallengeAt);\n                    // console.log('tournamentid', tournamentid);\n\n                    setReadyTeam(mapvoting === 'true' ? true : false);\n                    if (team1.length > 0 && team2.length > 0) {\n                        checkCaptain(team1, team2, userid);\n                        if (!running) {\n                            const calculateMvpAll = CalculateStats(team1, team2, gamemode);\n                            setUserStats(calculateMvpAll);\n                            let firstteam = calculateMvpAll.filter(el => el.type === 'team1' && el.iscaptain);\n                            let secondteam = calculateMvpAll.filter(el => el.type === 'team2' && el.iscaptain);\n                            if (firstteam.length && secondteam.length) {\n                                setBothState({ team1: firstteam[0].score, team2: secondteam[0].score });\n                            }\n                        }\n                    }\n                    setDataLoad(true);\n                    ScrollChat([1, 2]);\n                }\n                socket.emit('join', id);\n            }\n        } catch (e) {\n            return 0;\n        }\n    }\n    const sendChatMessage = () => {\n        const { id: roomid } = queryString();\n        const token = localStorage.getItem('webtoken');\n        const payload = { token, message, roomid };\n        if (token && roomid && message) {\n            socket.emit('MatchMakingRoomChat', payload);\n            setMessage('');\n        }\n    }\n    const HandleSend = (e) => {\n        if (e.charCode === 13) {\n            sendChatMessage();\n        }\n    }\n    const checkCaptain = (team1, team2, userid) => {\n        const BothTeams = [...team1, ...team2];\n        const CheckFromBoth = BothTeams.filter(el => el.iscaptain && el.userid._id === userid);\n        const CheckBothCaptains = BothTeams.filter(el => el.iscaptain);\n        team1 = team1.filter(el => !el.iscaptain);\n        team2 = team2.filter(el => !el.iscaptain);\n        if (CheckFromBoth.length > 0) {\n            setCaptain(true);\n        }\n        setTeam1(team1);\n        setTeam2(team2);\n        setBothCaptain(CheckBothCaptains);\n    }\n\n    const ScrollChat = (chat) => {\n        try {\n            if (chat.length > 0) {\n                document.querySelector(\".chat-list:last-child\").scrollIntoView({\n                    behavior: \"smooth\", block: 'nearest', inline: 'start'\n                });\n            }\n        } catch (e) {\n            return 0;\n        }\n    }\n    const checkExistInHub = (team1, team2, userid) => {\n        const FullArray = [...team1, ...team2];\n        const FilterIfExist = FullArray.filter(el => el.userid._id === userid);\n        if (FilterIfExist.length > 0) {\n            setExist(true);\n        }\n    }\n\n    const PickMap = async (mapname) => {\n        const { id: roomid } = queryString();\n        if (roomid) {\n            const payload = { mapname, roomid }\n            await tournamentInstance().put('/tournamentMapVote', payload);\n        }\n    }\n    const PostComment = async (e) => {\n        try {\n            e.preventDefault();\n            const { isValid, errors } = validateComment({ comment });\n            setErrors(errors);\n            if (!isValid) {\n                return;\n            }\n            const { id: roomid } = queryString();\n            const response = await ladderInstance().post('/postComment', { comment, roomid });\n            const { data: { code, saveComment, msg } } = response;\n            if (code === 200) {\n                Notification('success', msg);\n                let oldState = [...commentList];\n                oldState.unshift(saveComment);\n                setCommentList(oldState);\n                setComment('');\n            } else {\n                Notification('danger', msg);\n            }\n        } catch (e) {\n            return 0;\n        }\n    }\n\n    // This function is used to \n    const startGameCheck = async () => {\n        try {\n            const { id: roomid } = queryString();\n            if (roomid) {\n                const response = await ladderInstance().post(`/startGame/${roomid}`);\n                const { data: { code, msg } } = response;\n                if (code === 200) {\n                    Notification('success', msg);\n                } else {\n                    Notification('danger', msg);\n                }\n            }\n        } catch (error) {\n            return error;\n        }\n    }\n\n\n    const CalculateTimeBetween = (date_future) => {\n        if (new Date(date_future).getTime() > new Date().getTime()) {\n            interval = setInterval(() => {\n                date_future = new Date(date_future);\n                let date_now = new Date();\n                let seconds = Math.floor((date_future - (date_now)) / 1000);\n                let minutes = Math.floor(seconds / 60);\n                let hours = Math.floor(minutes / 60);\n                let days = Math.floor(hours / 24);\n\n                hours = hours - (days * 24);\n                minutes = minutes - (days * 24 * 60) - (hours * 60);\n                seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);\n\n                if (days >= 0) {\n                    setLeftTime(`Time until start match: Days: ${days} Hours: ${hours} Minutes: ${minutes} Seconds: ${seconds}`);\n                } else {\n                    clearInterval(interval);\n                    setLeftTime('');\n                }\n\n            }, 1000);\n        }\n    }\n\n    return (\n        <Layout header={true} footer={true}>\n            <div className=\"game-finished-page\">\n                <div className=\"main-wrapper\">\n                    <LeftSidebar mainmenu={true} increase={true} community={true} voiceserver={true} />\n                    {dataLoad && <div className=\"middle-wrapper\">\n                        <div className=\"game-finished-top-section\">\n                            <Teams name={'Ladder room'} checkfull={checkfull} team1={team1} team2={team2} running={running} HandleJoin={() => { }} BothTeamsData={BothCaptain} ChanceTimer={ChanceTimer} Exist={Exist} ScoreBoth={ScoreBoth} HandleExist={() => { }} />\n                        </div>\n                        {running ? <React.Fragment>\n                            {checkfull === 'true' && <TimerAndJoinIpSection ChanceTimer={ChanceTimer} Captain={Captain} cancelled={cancelled} mapvoting={mapvoting} joinip={joinip} Exist={Exist} Ready={Ready} SetReady={startGameCheck} leftTime={leftTime} />}\n                            <div className=\"game-finished-content\">\n                                {mapvoting === 'true' && <PlayGame maps={maps} chats={chats[teamname]} sendChatMessage={sendChatMessage} message={message} setMessage={setMessage} userid={userid} HandleSend={HandleSend} Exist={Exist} PickMap={PickMap} chance={ChanceTimer.chance} Captain={Captain} />}\n                            </div>\n                        </React.Fragment> : <GameFinished userStats={userStats} comment={comment} setComment={setComment} PostComment={PostComment} commentList={commentList} errors={errors} />}\n                    </div>}\n                    <RightSidebar />\n                </div>\n            </div>\n        </Layout>\n    );\n};\nexport default LadderRoom;\n\nconst TimerAndJoinIpSection = ({ ChanceTimer, Captain, cancelled, mapvoting, joinip, Exist, Ready, SetReady, leftTime }) => {\n    const { timer, chance } = ChanceTimer;\n    return <div className=\"ip-server timer-check\">\n        {!leftTime ? <React.Fragment>\n            {!Ready && mapvoting === 'false' ? <div className='join-ready-btn'><button className=\"join-btn\" onClick={() => SetReady()} >Ready</button></div> : <React.Fragment>\n                {!cancelled ? <React.Fragment>\n                    {joinip ? <React.Fragment>\n                        {Exist && <h4>IP SERVER: <span>{joinip}</span> <i onClick={() => {\n                            copy(`connect ${joinip}`)\n                        }} class=\"fa fa-clone\" aria-hidden=\"true\"></i></h4>}\n                    </React.Fragment> : <React.Fragment>\n                            {Captain ? <React.Fragment>\n                                {chance && Captain ? <h4>PICK A {mapvoting === 'false' ? 'PLAYER' : 'MAP'} <span>{FormatTimer(timer)}</span></h4> : <h4>YOUR OPPONENT <span>PICKING</span></h4>}\n                            </React.Fragment> : <React.Fragment>\n                                    <h4>PICKING...</h4>\n                                </React.Fragment>}\n                        </React.Fragment>}\n                </React.Fragment> : <h4 className='cancelled-game'>CANCELLED</h4>}\n            </React.Fragment>}\n        </React.Fragment> : <div className='join-ready-btn'> <h4>{leftTime}</h4></div>}\n\n    </div>\n}\n\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\insideladder.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\home\\home.jsx",["614"],"import React, { useContext } from \"react\";\r\nimport \"./home.css\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport {useTranslation} from 'react-i18next';\r\nimport Layout from \"../layout/layout\"\r\nimport Slider from \"react-slick\";\r\nimport slide1 from \"../../assets/home/slider-1.jpg\";\r\nimport slide2 from \"../../assets/home/slider-2.jpg\";\r\nimport slide3 from \"../../assets/home/slider-3.jpg\";\r\n\r\nimport feature1 from \"../../assets/home/feature-icon-1.png\";\r\nimport feature2 from \"../../assets/home/feature-icon-2.png\";\r\nimport feature3 from \"../../assets/home/feature-icon-3.png\";\r\nimport feature4 from \"../../assets/home/feature-icon-4.png\";\r\nimport LeftSidebar from \"../sidebar/leftsidebar\";\r\nimport RightSidebar from \"../sidebar/rightsidebar\";\r\nimport UserContext from '../../context/context';\r\nimport history from \"../../config/history\";\r\n\r\n\r\nconst Home = ({ }) => {\r\n    const {t} = useTranslation();\r\n    const user = useContext(UserContext);\r\n    const { distributedStats: { SlideNews } } = user;\r\n    const settings = {\r\n        dots: true,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        responsive: [\r\n            {\r\n                breakpoint: 1024,\r\n                settings: {\r\n                    slidesToShow: 1,\r\n                    slidesToScroll: 1,\r\n                    infinite: true,\r\n                    dots: true\r\n                }\r\n            },\r\n            {\r\n                breakpoint: 480,\r\n                settings: {\r\n                    slidesToShow: 1,\r\n                    slidesToScroll: 1\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    const feature = {\r\n        dots: true,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        responsive: [\r\n            {\r\n                breakpoint: 1024,\r\n                settings: {\r\n                    slidesToShow: 1,\r\n                    slidesToScroll: 1,\r\n                    infinite: true,\r\n                    dots: true\r\n                }\r\n            },\r\n            {\r\n                breakpoint: 480,\r\n                settings: {\r\n                    slidesToShow: 1,\r\n                    slidesToScroll: 1\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <Layout header={true} footer={true}>\r\n            <div className=\"home\">\r\n                <div className=\"home-bg\">\r\n                    <div className=\"main-wrapper\">\r\n                        <LeftSidebar mainmenu={true} increase={true} community={true} voiceserver={true} />\r\n                        <div className=\"middle-wrapper\">\r\n                            <div className=\"home-slider-section\">\r\n                                <h1> {t('home.mainhead')}</h1>\r\n                                <h3>{t('home.registercompete')} <span>{t('home.prices')}</span></h3>\r\n                                <div className=\"home-slider\">\r\n                                    <Slider {...settings}>\r\n                                        {SlideNews && SlideNews.map((el, i) => {\r\n                                            return <NewsSlider element={el} index={i} />\r\n                                        })}\r\n                                    </Slider>\r\n                                </div>\r\n                            </div>\r\n                            {user.loggedIn ? <div className=\"feature-stream\">\r\n                                <h3>{t('home.featuredstream')}</h3>\r\n                                <Link to=\"/\">Ver más</Link>\r\n                                <div className=\"feature-slider\">\r\n                                    <Slider {...feature}>\r\n                                        <div className=\"home-slider-img\">\r\n                                            <img src={slide1} alt=\"\" />\r\n                                        </div>\r\n                                        <div className=\"home-slider-img\">\r\n                                            <img src={slide2} alt=\"\" />\r\n                                        </div>\r\n                                        <div className=\"home-slider-img\">\r\n                                            <img src={slide3} alt=\"\" />\r\n                                        </div>\r\n                                    </Slider>\r\n                                </div>\r\n                            </div> : <div className=\"features-section\">\r\n                                    <div className=\"features\">\r\n                                        <div className=\"feature-box\">\r\n                                            <img src={feature1} alt=\"\" />\r\n                                            <h4>{t('home.anti-cheat')}</h4>\r\n                                            <p>{t('home.innovative')} <span>{t('home.anti-fraud')}</span> {t('home.detect')}</p>\r\n                                        </div>\r\n                                        <div className=\"feature-box\">\r\n                                            <img src={feature2} alt=\"\" />\r\n                                            <h4>{t('home.complete-win')}</h4>\r\n                                            <p>{t('home.complete-in')} <span>{t('home.hubs-match')}</span> {t('home.and')} <span>{t('home.ladders')}</span> {t('home.incredible')}</p>\r\n                                        </div>\r\n                                        <div className=\"feature-box\">\r\n                                            <img src={feature3} alt=\"\" />\r\n                                            <h4>{t('home.matchmaking')}</h4>\r\n                                            <p>{t('home.pair')} <span>{t('home.players')}</span> {t('home.or')} <span>{t('home.friends')}</span> {t('home.and')} <span>{t('home.similar-level')}</span> </p>\r\n                                        </div>\r\n                                        <div className=\"feature-box\">\r\n                                            <img src={feature4} alt=\"\" />\r\n                                            <h4>{t('home.increase-level')}</h4>\r\n                                            <p>{t('home.progress')} <span>{t('home.climb-positions')}</span> {t('home.enter-to')} <span>{t('scouting-area')}</span> {t('home.jump-professional')}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <RightSidebar isLogin={user.loggedIn} />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\nconst NewsSlider = ({ element, index }) => {\r\n    const { content, imgurl, title, _id } = element;\r\n    return <div className=\"home-slider-img\" key={index}>\r\n        <img src={imgurl ? imgurl : slide3} alt=\"tt\" />\r\n        <div className=\"slider-caption\" onClick={() => history.push(`/newsdetail/?id=${_id}`)}>\r\n            <h3>{title.substring(0, 40) + \"..\"}</h3>\r\n            <p>{content.substring(0, 53) + \"..\"}</p>\r\n        </div>\r\n    </div>\r\n}","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\hubs.jsx",["615","616","617"],"import React, { useState, useEffect } from 'react';\r\nimport './hubs.css';\r\n//import { Link, NavLink } from \"react-router-dom\";\r\nimport Layout from '../layout/layout';\r\nimport LeftSidebar from '../sidebar/leftsidebar';\r\n//import eye from \"../../assets/news/eye-icon.png\";\r\nimport RightSidebar from '../sidebar/rightsidebar';\r\nimport PlayHub from './playhub';\r\nimport CreateHub from './createhub';\r\nimport GatherList from './gatherlist';\r\nimport { hubsInstance } from '../../config/axios';\r\nimport {\r\n  validateHubsCreate,\r\n  validateHubsSearch,\r\n  Notification,\r\n} from '../../function';\r\nimport { GetCreatedHubs } from '../../socket/index';\r\nimport MonthlyRanking from './monthlyrank';\r\n\r\nlet initialState = {\r\n  name: '',\r\n  array: [\r\n    'Prestige 1',\r\n    'Prestige 2',\r\n    'Prestige 3',\r\n    'Prestige 4',\r\n    'Prestige 5',\r\n    'Prestige 6',\r\n    'Prestige 7',\r\n    'Prestige 8',\r\n    'Prestige 9',\r\n    'Prestige 10',\r\n    'Show all',\r\n  ],\r\n  premium: false,\r\n  premiumadvanced: false,\r\n  prestige: '',\r\n  maps: [\r\n    'de_dust2',\r\n    'de_mirage',\r\n    'de_cache',\r\n    'de_overpass',\r\n    'de_train',\r\n    'de_inferno',\r\n    'de_vertigo',\r\n    'de_nuke',\r\n  ],\r\n  type: ['Premium', 'Premium/Advanced', 'Normal hubs', 'Show all'],\r\n};\r\nconst Hubs = () => {\r\n  const limit = 8;\r\n  const [hubscreate, setHubsCreate] = useState(initialState);\r\n  const [gatherslist, setGatherList] = useState([]);\r\n  const [gatherListCopy, setGatherListCopy] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [errors2, setErrors2] = useState({});\r\n  const [skip, setSkip] = useState(0);\r\n  const [checkFirst, setFirst] = useState(false);\r\n  const [MonthlyRank, SetMonthlyRanking] = useState([]);\r\n  const [MonthlyRankCopy, SetMonthlyRankingCopy] = useState([]);\r\n  const [UpDown, setUpDown] = useState({\r\n    rank: false,\r\n    username: false,\r\n    monthlyhubpoint: false,\r\n    win: false,\r\n    loss: false,\r\n    winpercent: false,\r\n  });\r\n  const nextPage = () => {\r\n    setSkip(skip + limit);\r\n  };\r\n  const previousPage = () => {\r\n    setSkip(skip - limit);\r\n  };\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    setHubsCreate({ ...hubscreate, [name]: value });\r\n  };\r\n  const CreateHubs = async (e) => {\r\n    e.preventDefault();\r\n    const { premium, premiumadvanced, prestige } = hubscreate;\r\n    const payload = { prestige, premiumadvanced, premium };\r\n    const { isValid, errors } = validateHubsCreate(payload);\r\n    setErrors(errors);\r\n    if (!isValid) {\r\n      return;\r\n    }\r\n    const {\r\n      data: { code, msg, errors: servererrors },\r\n    } = await hubsInstance().post('/createhubs', payload);\r\n    if (code === 200) {\r\n      Notification('success', msg);\r\n    } else if (code === 201) {\r\n      setErrors(servererrors);\r\n    } else {\r\n      Notification('danger', msg);\r\n    }\r\n  };\r\n  const selectPrestige = (e) => {\r\n    setHubsCreate({ ...hubscreate, prestige: e.target.value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    GetCreatedHubs(() => {\r\n      GatherListData();\r\n    });\r\n    GatherListData();\r\n  }, [skip, limit]);\r\n\r\n  const GatherListData = async () => {\r\n    try {\r\n      const { name, prestige } = hubscreate;\r\n\r\n      const {\r\n        data: { code, gatherslist, MonthlyRank },\r\n      } = await hubsInstance().get(`/listgather`, {\r\n        params: {\r\n          skip,\r\n          limit,\r\n          name,\r\n          prestige: prestige === 'Show all' ? '' : prestige,\r\n        },\r\n      });\r\n      if (code === 200) {\r\n        if (skip === 0 && limit === 8 && gatherslist.length > 0) {\r\n          setGatherList(gatherslist);\r\n          setGatherListCopy(gatherslist);\r\n          setFirst(true);\r\n        } else {\r\n          setGatherList(gatherslist);\r\n          setGatherListCopy(gatherslist);\r\n        }\r\n        SetMonthlyRanking(MonthlyRank);\r\n        SetMonthlyRankingCopy(MonthlyRank);\r\n      }\r\n    } catch (e) {\r\n      return e;\r\n    }\r\n  };\r\n  const serchHubs = (e) => {\r\n    e.preventDefault();\r\n    // const { name, prestige } = hubscreate;\r\n    // const { isValid, errors } = validateHubsSearch({ name, prestige });\r\n    // setErrors2(errors);\r\n    // if (!isValid) {\r\n    //     return;\r\n    // }\r\n\r\n    GatherListData();\r\n  };\r\n\r\n  const selectFilterType = (e, element, type) => {\r\n    e.preventDefault();\r\n    if (type === 'Type') {\r\n      if (element === 'Premium') {\r\n        const filterPremium = gatherListCopy.filter(\r\n          (el) => el.premium && !el.premiumadvanced\r\n        );\r\n        setGatherList(filterPremium);\r\n      } else if (element === 'Premium/Advanced') {\r\n        const filterPremiumAdvanced = gatherListCopy.filter(\r\n          (el) => el.premium && el.premiumadvanced\r\n        );\r\n        setGatherList(filterPremiumAdvanced);\r\n      } else if (element === 'Normal hubs') {\r\n        const filternormal = gatherListCopy.filter(\r\n          (el) => !el.premium && !el.premiumadvanced\r\n        );\r\n        setGatherList(filternormal);\r\n      } else if (element === 'Show all') {\r\n        setGatherList(gatherListCopy);\r\n      }\r\n    } else if (type === 'Prestige') {\r\n      if (element === 'Show all') {\r\n        setGatherList(gatherListCopy);\r\n      } else {\r\n        const filterPrestige = gatherListCopy.filter(\r\n          (el) => el.prestige === element\r\n        );\r\n        setGatherList(filterPrestige);\r\n      }\r\n    }\r\n  };\r\n\r\n  const SortData = (type) => {\r\n    let OldState = [...MonthlyRankCopy];\r\n    OldState = OldState.sort((a, b) => {\r\n      if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n        return UpDown[type]\r\n          ? a[type].localeCompare(b[type])\r\n          : b[type].localeCompare(a[type]);\r\n      } else {\r\n        return UpDown[type] ? b[type] - a[type] : a[type] - b[type];\r\n      }\r\n    });\r\n    SetMonthlyRanking(OldState);\r\n    setUpDown({ ...UpDown, [type]: !UpDown[type] });\r\n  };\r\n  return (\r\n    <Layout header={true} footer={true}>\r\n      <div className=\"hubs-page\">\r\n        <div className=\"main-wrapper\">\r\n          <LeftSidebar\r\n            mainmenu={true}\r\n            increase={true}\r\n            community={true}\r\n            voiceserver={true}\r\n          />\r\n          <div className=\"middle-wrapper\">\r\n            <div className=\"hubs-top-section\">\r\n              <PlayHub\r\n                onChange={onChange}\r\n                hubscreate={hubscreate}\r\n                selectPrestige={selectPrestige}\r\n                serchHubs={serchHubs}\r\n                errors={errors2}\r\n              />\r\n              <CreateHub\r\n                onChange={onChange}\r\n                hubscreate={hubscreate}\r\n                setHubsCreate={setHubsCreate}\r\n                errors={errors}\r\n                CreateHubs={CreateHubs}\r\n                selectPrestige={selectPrestige}\r\n              />\r\n            </div>\r\n            <div className=\"hubs-gather-list\">\r\n              <GatherList\r\n                gatherslist={gatherslist}\r\n                hubscreate={hubscreate}\r\n                nextPage={nextPage}\r\n                previousPage={previousPage}\r\n                skip={skip}\r\n                selectFilterType={selectFilterType}\r\n                checkFirst={checkFirst}\r\n              />\r\n            </div>\r\n            <div className=\"hubs-gather-matchmaking\">\r\n              <MonthlyRanking\r\n                MonthlyRank={MonthlyRank}\r\n                SortData={SortData}\r\n                UpDown={UpDown}\r\n              />\r\n            </div>\r\n          </div>\r\n          <RightSidebar />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nexport default Hubs;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\news\\newsdetail.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\insidegamesecond.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\news\\news.jsx",["618","619"],"import React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport './news.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Layout from '../layout/layout';\r\nimport LeftSidebar from '../sidebar/leftsidebar';\r\nimport news from '../../assets/news/news.png';\r\nimport eye from '../../assets/news/eye-icon.png';\r\nimport heart from '../../assets/news/heart-icon.png';\r\nimport heartred from '../../assets/news/heart-icon-red.png';\r\nimport NewsHeader from './newsheader';\r\nimport { NEWS_INSTANCE } from '../../config/axios';\r\nimport { showRedIcon } from '../../function';\r\n\r\nconst News = () => {\r\n  const { t } = useTranslation();\r\n  const [allnews, setNews] = useState([]);\r\n  const [allnewsCopy, setNewsCopy] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [category, setCategory] = useState('Select category');\r\n  const [categoryList, setCategoryList] = useState([\r\n    { type: 'All', active: false },\r\n    { type: 'Tournaments', active: false },\r\n    { type: 'Ladders', active: false },\r\n    { type: 'Gathers', active: false },\r\n    { type: 'Matchmaking', active: false },\r\n  ]);\r\n  const [userid, setUserid] = useState('');\r\n  const [limit, setLimit] = useState(8);\r\n  const [skip, setSkip] = useState(0);\r\n\r\n  const nextPage = () => {\r\n    setSkip(skip + limit);\r\n  };\r\n\r\n  const previousPage = () => {\r\n    setSkip(skip - limit);\r\n  };\r\n  useEffect(() => {\r\n    NewsListData();\r\n  }, [limit, skip]);\r\n  const NewsListData = async () => {\r\n    const response = await NEWS_INSTANCE().get(`/getnews/${skip}/${limit}`);\r\n\r\n    const { code, allnews, userid } = response.data;\r\n    console.log(code, allnews, userid);\r\n    if (code === 200) {\r\n      setNews(allnews);\r\n      setNewsCopy(allnews);\r\n      setUserid(userid);\r\n    }\r\n  };\r\n\r\n  const searchCategory = (e) => {\r\n    try {\r\n      let { value } = e.target;\r\n      const exp = new RegExp(value.toLowerCase());\r\n      const filteredData = allnewsCopy.filter(\r\n        (item) =>\r\n          exp.test(item.title.toLowerCase()) ||\r\n          exp.test(item.content.toLowerCase()) ||\r\n          exp.test(item.category.toLowerCase())\r\n      );\r\n      setNews(filteredData);\r\n      setSearch(value);\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  const searchByCategory = (type) => {\r\n    try {\r\n      const oldState = [...categoryList];\r\n      const exp = new RegExp(type.toLowerCase());\r\n      const filteredData = allnewsCopy.filter((item) =>\r\n        exp.test(item.category.toLowerCase())\r\n      );\r\n      oldState.forEach((el) => {\r\n        if (el.type === type) {\r\n          setCategory(type);\r\n          el.active = true;\r\n        } else {\r\n          el.active = false;\r\n        }\r\n      });\r\n      setCategoryList(oldState);\r\n      if (type === 'All') {\r\n        setNews(allnewsCopy);\r\n      } else {\r\n        setNews(filteredData);\r\n      }\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n  const LikeDeslike = async (id) => {\r\n    const response = await NEWS_INSTANCE().put(`/like/${id}`);\r\n    const { code } = response.data;\r\n    if (code === 200) {\r\n      NewsListData();\r\n    }\r\n  };\r\n  return (\r\n    <Layout header={true} footer={true}>\r\n      <div className=\"news\">\r\n        <div className=\"main-wrapper\">\r\n          <LeftSidebar\r\n            mainmenu={true}\r\n            increase={true}\r\n            community={true}\r\n            voiceserver={true}\r\n          />\r\n          <div className=\"middle-wrapper-full\">\r\n            <NewsHeader\r\n              searchCategory={searchCategory}\r\n              search={search}\r\n              searchByCategory={searchByCategory}\r\n              categoryList={categoryList}\r\n              category={category}\r\n              show={true}\r\n            />\r\n            <div className=\"news-list-content\">\r\n              {allnews.length > 0 ? (\r\n                allnews.map((el, i) => (\r\n                  <React.Fragment>\r\n                    <NewsList\r\n                      element={el}\r\n                      index={i}\r\n                      LikeDeslike={LikeDeslike}\r\n                      userid={userid}\r\n                    />\r\n                  </React.Fragment>\r\n                ))\r\n              ) : (\r\n                <div\r\n                  className=\"news-list-not-found\"\r\n                  style={{ marginTop: '15%', marginLeft: '40%' }}\r\n                >\r\n                  <h4 style={{ color: 'white', fontSize: '35px' }}>\r\n                    {t('global.no-data')}\r\n                  </h4>\r\n                </div>\r\n              )}\r\n              {allnews.length > 0 && (\r\n                <div class=\"button-section\">\r\n                  <button\r\n                    disabled={skip <= 0 ? true : false}\r\n                    className=\"custom-button-css button-css\"\r\n                    onClick={() => previousPage()}\r\n                  >\r\n                    {t('global.previous')}\r\n                  </button>{' '}\r\n                  <button\r\n                    disabled={allnews.length <= 0 ? true : false}\r\n                    className=\"custom-button-css button-css\"\r\n                    onClick={() => nextPage()}\r\n                  >\r\n                    {t('global.next')}\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nexport default News;\r\n\r\nconst NewsList = ({ element, index, LikeDeslike, userid }) => {\r\n  const { _id, content, title, imgurl, likes, views, category } = element;\r\n  const { t } = useTranslation();\r\n  return (\r\n    <div className=\"news-list\" key={index + _id}>\r\n      <div className=\"news-thumb\">\r\n        <img src={imgurl ? imgurl : news} alt=\"News\" />\r\n      </div>\r\n      <div className=\"news-info\">\r\n        <h4>\r\n          <Link to={`/newsdetail/?id=${_id}`}>\r\n            {content.substring(0, 33) + '..'}\r\n          </Link>\r\n        </h4>\r\n        <div className=\"news-info-action\">\r\n          <div className=\"news-action-box\">\r\n            <img src={eye} alt=\"eye\" />\r\n            {views.length}\r\n            {views.length >= 1000 ? ',K' : null}\r\n          </div>\r\n          <div className=\"news-action-box\">\r\n            <img\r\n              src={showRedIcon(likes, userid) ? heartred : heart}\r\n              alt=\"heart\"\r\n              onClick={() => LikeDeslike(_id)}\r\n              className=\"heartimg\"\r\n            />\r\n            {likes.length}\r\n            {likes.length >= 1000 ? ',K' : null}\r\n          </div>\r\n          <div className=\"news-action-box category-tag\">\r\n            {t('news.category-name')}:\r\n            <span className=\"news-tag\">#{category}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"news-title\">\r\n        <h3>{title.substring(0, 20) + '..'}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmaking1vs1.jsx",["620"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"./matchmaking.css\";\r\n// import { Link, NavLink } from \"react-router-dom\";\r\nimport Layout from \"../layout/layout\"\r\nimport LeftSidebar from \"../sidebar/leftsidebar\";\r\nimport RightSidebar from \"../sidebar/rightsidebar\";\r\nimport MatchMakingProfile from \"./matchmakingprofile\";\r\n// import MonthlyRanking from \"./monthlyranking\";\r\nimport MonthlyRanking from \"../hubs/monthlyrank\";\r\nimport FeaturedStreaming from \"./featuredstreaming\";\r\n// import GameSelection from \"./gameselection\";\r\nimport LookingGame1vs1 from \"./lookinggame1vs1\";\r\nimport UserContext from \"../../context/context\";\r\n// import LookingGame5vs5 from \"./lookinggame5vs5\";\r\nimport {\r\n    Notification,\r\n    DecodeData,\r\n    EncodeData,\r\n    queryString,\r\n    // MovePosition\r\n} from \"../../function\";\r\nimport { matchmakingInstance } from \"../../config/axios\";\r\nlet interval = null;\r\n\r\nconst MatchMaking1vs1 = () => {\r\n    const {\r\n        userDetails: {\r\n            ispremium,\r\n            ispremiumadvnaced,\r\n            username,\r\n            useravatar,\r\n        },\r\n        loggedIn,\r\n        distributedStats: { Stats1vs1, QueueLength1vs1 },\r\n        distributedStats,\r\n        setDistributedStats\r\n    } = useContext(UserContext);\r\n    const [UpDown, setUpDown] = useState({ rank: false, username: false, monthlyhubpoint: false, win: false, loss: false, winpercent: false });\r\n    let checkTimer = localStorage.getItem('r_encoded_q^11') ? localStorage.getItem(\"~interval$%!11\") : 0;\r\n    const [timerView, setTimerView] = useState({ timer: checkTimer ? parseInt(checkTimer) : 0, isValid: false });\r\n    useEffect(() => {\r\n        try {\r\n            checkQueue();\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }, []);\r\n    const StartQueue = async () => {\r\n        //This function used to start the 1vs1 matchmaking queue.\r\n        try {\r\n            const { premium, advanced } = queryString();\r\n            const response = await matchmakingInstance().post(\r\n                \"/queuefilter1v1\", {\r\n                premium,\r\n                advanced\r\n            });\r\n            const {\r\n                data: { code, msg, queueid, errors },\r\n            } = response;\r\n            if (code === 200) {\r\n                const myCipher = EncodeData(\"24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm\");\r\n                const EncodedQueue = myCipher(queueid);\r\n                Notification(\"success\", msg);\r\n                localStorage.setItem(\"r_encoded_q^11\", EncodedQueue);\r\n                StartTimer();\r\n            } else if (code === 201) {\r\n                Notification(\"danger\", Object.values(errors)[0]);\r\n            } else {\r\n                Notification(\"danger\", msg);\r\n            }\r\n        } catch (error) {\r\n            //Error\r\n            return error;\r\n        }\r\n    };\r\n\r\n\r\n    const checkQueue = async () => {\r\n        try {\r\n            const queueid = localStorage.getItem(\"r_encoded_q^11\");\r\n            if (queueid) {\r\n                const myDecipher = DecodeData(\"24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm\");\r\n                const decoded = myDecipher(queueid);\r\n                const response = await matchmakingInstance().get(\r\n                    `/checkvalidqueue/${decoded}`\r\n                );\r\n                const {\r\n                    data: { code },\r\n                } = response;\r\n                if (code === 200) {\r\n                    StartTimer();\r\n                } else {\r\n                    localStorage.removeItem(\"r_encoded_q^11\");\r\n                    localStorage.removeItem(\"~interval$%!11\");\r\n                }\r\n            }\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    };\r\n    const StartTimer = () => {\r\n        interval = setInterval(() => {\r\n            if (localStorage.getItem('r_encoded_q^11')) {\r\n                setTimerView((preState) => {\r\n                    let { timer } = preState;\r\n                    timer += 1;\r\n                    localStorage.setItem(\"~interval$%!11\", timer);\r\n                    return { isValid: true, timer };\r\n                });\r\n            } else {\r\n                ClearIntervalData();\r\n            }\r\n\r\n        }, 1000);\r\n    };\r\n\r\n    const removeQueue = async () => {\r\n        try {\r\n            const queueid = localStorage.getItem(\"r_encoded_q^11\");\r\n            if (queueid) {\r\n                const myDecipher = DecodeData(\"24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm\");\r\n                const decoded = myDecipher(queueid);\r\n                const response = await matchmakingInstance().delete(\r\n                    `/removequeue1vs1/${decoded}`\r\n                );\r\n                const {\r\n                    data: { code, msg },\r\n                } = response;\r\n                if (code === 200) {\r\n                    Notification(\"success\", msg);\r\n                    ClearIntervalData();\r\n\r\n                } else {\r\n                    Notification(\"danger\", msg);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    };\r\n\r\n    const ClearIntervalData = () => {\r\n        clearInterval(interval);\r\n        setTimerView({ isValid: false, timer: 0 });\r\n        localStorage.removeItem(\"r_encoded_q^11\");\r\n        localStorage.removeItem(\"~interval$%!11\");\r\n    }\r\n\r\n    const SortData = (type) => {\r\n        let OldState = [...Stats1vs1];\r\n        OldState = OldState.sort((a, b) => {\r\n            if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n                return UpDown[type] ? a[type].localeCompare(b[type]) : b[type].localeCompare(a[type])\r\n            } else {\r\n                return UpDown[type] ? b[type] - a[type] : a[type] - b[type]\r\n            }\r\n        });\r\n        setDistributedStats({ ...distributedStats, Stats1vs1: OldState });\r\n        setUpDown({ ...UpDown, [type]: !UpDown[type] });\r\n    }\r\n    return (\r\n        <Layout header={true} footer={true}>\r\n            <div className=\"hubs-page\">\r\n\r\n                <div className=\"main-wrapper\">\r\n\r\n                    <LeftSidebar mainmenu={true} increase={true} community={true} voiceserver={true} />\r\n\r\n                    <div className=\"middle-wrapper\">\r\n\r\n                        <div className=\"matchmaking\">\r\n\r\n                            {loggedIn && (\r\n                                <MatchMakingProfile\r\n                                    username={username}\r\n                                    useravatar={useravatar}\r\n                                    ispremium={ispremium}\r\n                                    ispremiumadvnaced={ispremiumadvnaced}\r\n                                />\r\n                            )}\r\n                            <LookingGame1vs1 StartQueue={StartQueue} username={username}\r\n                                useravatar={useravatar} timerView={timerView}\r\n                                removeQueue={removeQueue} QueueLength1vs1={QueueLength1vs1} />\r\n                            <MonthlyRanking MonthlyRank={Stats1vs1 ? Stats1vs1 : []} SortData={SortData} UpDown={UpDown} />\r\n                            <FeaturedStreaming />\r\n                        </div>\r\n                    </div>\r\n                    <RightSidebar />\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default MatchMaking1vs1;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\insidegamefirst.jsx",["621","622","623"],"import React, { useEffect, useState } from 'react';\r\nimport copy from 'copy-to-clipboard';\r\nimport { useTranslation } from 'react-i18next';\r\nimport './hubs.css';\r\nimport Layout from '../layout/layout';\r\nimport LeftSidebar from '../sidebar/leftsidebar';\r\nimport RightSidebar from '../sidebar/rightsidebar';\r\nimport Teams from '../hubs/teams';\r\nimport Chat from './chat';\r\nimport ShareGame from './sharegame';\r\nimport PlayGame from './playgame';\r\nimport GameFinished from './gamefinished';\r\nimport { hubsInstance } from '../../config/axios';\r\nimport { queryString, Notification, FormatTimer } from '../../function';\r\nimport {\r\n  socket,\r\n  GetHubsChat,\r\n  PlayerJoinInHub,\r\n  PlayerJoinHubFull,\r\n  PlayerPickTimer,\r\n  HubGameCancelled,\r\n  PickPlayerEvent,\r\n  PickMapEvent,\r\n  SetHubsIP,\r\n  ExitFromHub,\r\n} from '../../socket';\r\nimport { validateComment, CalculateStats } from '../../function';\r\n\r\nconst InsideGameFirst = () => {\r\n  const { t } = useTranslation();\r\n  const [message, setMessage] = useState('');\r\n  const [userid, setUserId] = useState('');\r\n  const [chats, setChats] = useState([]);\r\n  const [joinedplayers, setJoinedPlayers] = useState([]);\r\n  const [team1, setTeam1] = useState([]);\r\n  const [team2, setTeam2] = useState([]);\r\n  const [BothCaptain, setBothCaptain] = useState([]);\r\n  const [Captain, setCaptain] = useState(false);\r\n  const [Exist, setExist] = useState(false);\r\n  const [ChanceTimer, setChanceTimer] = useState({ timer: 0, chance: false });\r\n  const [maps, setMaps] = useState([]);\r\n  const [name, setName] = useState('');\r\n  const [running, setRunning] = useState(true);\r\n  const [checkfull, setCheckfull] = useState('');\r\n  const [cancelled, setCancelled] = useState(false);\r\n  const [mapvoting, setMapvoting] = useState('false');\r\n  const [joinip, setJoinIp] = useState('');\r\n  const [dataLoad, setDataLoad] = useState(false);\r\n  const [userStats, setUserStats] = useState([]);\r\n  const [ScoreBoth, setBothState] = useState({ team1: '', team2: '' });\r\n  const [comment, setComment] = useState('');\r\n  const [errors, setErrors] = useState({});\r\n  const [commentList, setCommentList] = useState([]);\r\n  useEffect(() => {\r\n    HubsData();\r\n    //This event is used to get real time chat message\r\n    GetHubsChat((messages) => {\r\n      try {\r\n        setChats((preState) => [...preState, messages]);\r\n        document.querySelector('.chat-list:last-child').scrollIntoView({\r\n          behavior: 'smooth',\r\n          block: 'nearest',\r\n          inline: 'start',\r\n        });\r\n      } catch (e) {\r\n        return 0;\r\n      }\r\n    });\r\n    //This event is used to call when any player join in the hub\r\n    PlayerJoinInHub((data) => {\r\n      HubsData();\r\n      setJoinedPlayers((preState) => [...preState, data]);\r\n    });\r\n\r\n    //When players full in lobby this socket event will call\r\n    PlayerJoinHubFull(() => {\r\n      HubsData();\r\n    });\r\n\r\n    // this function for PlayerPickTimer\r\n    PlayerPickTimer((data) => {\r\n      const userlocalid = localStorage.getItem('userid');\r\n      if (data.playerid === userlocalid) {\r\n        setChanceTimer({ timer: data.timer, chance: true });\r\n      } else {\r\n        setChanceTimer({ timer: data.timer, chance: false });\r\n      }\r\n    });\r\n\r\n    //This socket event will when game cancelled\r\n    HubGameCancelled((data) => {\r\n      const { userid } = data;\r\n      const userlocalid = localStorage.getItem('userid');\r\n      if (userlocalid === userid) {\r\n        Notification(\r\n          'warning',\r\n          'You expelled from room with 15 minutes penalty because of your inactivity in your turn'\r\n        );\r\n      } else {\r\n        Notification('info', 'Player expelled from room');\r\n      }\r\n      setChanceTimer({ timer: 0, chance: false });\r\n      HubsData();\r\n    });\r\n\r\n    //This event is used to sate players diffrent states\r\n    PickPlayerEvent((data) => {\r\n      const { player, team, pickplayerid } = data;\r\n      if (team === 'team1') {\r\n        setTeam1((preState) => [...preState, player]);\r\n        setJoinedPlayers((preState) =>\r\n          preState.filter((el) => el.userid._id !== pickplayerid)\r\n        );\r\n      } else if (team === 'team2') {\r\n        setTeam2((preState) => [...preState, player]);\r\n        setJoinedPlayers((preState) =>\r\n          preState.filter((el) => el.userid._id !== pickplayerid)\r\n        );\r\n      }\r\n    });\r\n\r\n    // This function is used to get captains picked map in real time\r\n    PickMapEvent((mapname) => {\r\n      setMaps((preState) => setMapsFunction(preState, mapname));\r\n    });\r\n\r\n    SetHubsIP((ip) => {\r\n      setJoinIp(ip.ip);\r\n      setChanceTimer({ timer: 60, chance: false });\r\n    });\r\n\r\n    ExitFromHub((joinid) => {\r\n      setJoinedPlayers((oldArray) =>\r\n        oldArray.filter((el) => el._id !== joinid)\r\n      );\r\n    });\r\n    const setMapsFunction = (preState, mapname) => {\r\n      preState.forEach((element) => {\r\n        if (element.title === mapname) {\r\n          element.open = false;\r\n        }\r\n      });\r\n      return preState;\r\n    };\r\n  }, []);\r\n  const HubsData = async () => {\r\n    try {\r\n      const { id } = queryString();\r\n      if (id) {\r\n        const {\r\n          data: {\r\n            code,\r\n            getHubsData: {\r\n              chats: chat,\r\n              joinedplayers,\r\n              team1,\r\n              team2,\r\n              maps,\r\n              name,\r\n              running,\r\n              checkfull,\r\n              cancelled,\r\n              mapvoting,\r\n              joinip,\r\n              comments,\r\n            },\r\n            userid,\r\n          },\r\n        } = await hubsInstance().get(`/hubsdetail/${id}`);\r\n        if (code === 200) {\r\n          setUserId(userid);\r\n          setRunning(running);\r\n          setChats(chat);\r\n          setJoinedPlayers(joinedplayers);\r\n          setMaps(maps);\r\n          setName(name);\r\n          setCheckfull(checkfull);\r\n          setCancelled(cancelled);\r\n          setMapvoting(mapvoting);\r\n          setJoinIp(joinip);\r\n          setCommentList(comments);\r\n          checkExistInHub(joinedplayers, team1, team2, userid);\r\n          if (team1.length > 0 && team2.length > 0) {\r\n            checkCaptain(team1, team2, userid);\r\n            if (!running) {\r\n              // CalculateStats(team1, team2);\r\n              const calculateMvpAll = CalculateStats(team1, team2);\r\n              setUserStats(calculateMvpAll);\r\n              let firstteam = calculateMvpAll.filter(\r\n                (el) => el.type === 'team1' && el.iscaptain\r\n              );\r\n              let secondteam = calculateMvpAll.filter(\r\n                (el) => el.type === 'team2' && el.iscaptain\r\n              );\r\n              if (firstteam.length && secondteam.length) {\r\n                setBothState({\r\n                  team1: firstteam[0].score,\r\n                  team2: secondteam[0].score,\r\n                });\r\n              }\r\n            }\r\n          }\r\n          setDataLoad(true);\r\n          ScrollChat(chat);\r\n        }\r\n        socket.emit('join', id);\r\n      }\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n  const sendChatMessage = () => {\r\n    const { id: hubid } = queryString();\r\n    const token = localStorage.getItem('webtoken');\r\n    const payload = { token, message, hubid };\r\n    if (token && hubid && message) {\r\n      socket.emit('HubChat', payload);\r\n      setMessage('');\r\n    }\r\n  };\r\n  const HandleSend = (e) => {\r\n    if (e.charCode === 13) {\r\n      sendChatMessage();\r\n    }\r\n  };\r\n  const checkCaptain = (team1, team2, userid) => {\r\n    const BothTeams = [...team1, ...team2];\r\n    const CheckFromBoth = BothTeams.filter(\r\n      (el) => el.iscaptain && el.userid._id === userid\r\n    );\r\n    const CheckBothCaptains = BothTeams.filter((el) => el.iscaptain);\r\n    team1 = team1.filter((el) => !el.iscaptain);\r\n    team2 = team2.filter((el) => !el.iscaptain);\r\n    if (CheckFromBoth.length > 0) {\r\n      setCaptain(true);\r\n    }\r\n    setTeam1(team1);\r\n    setTeam2(team2);\r\n    setBothCaptain(CheckBothCaptains);\r\n  };\r\n  const HandleJoin = async () => {\r\n    try {\r\n      const { id: hubid } = queryString();\r\n      if (hubid) {\r\n        const payload = { hubid };\r\n        const {\r\n          data: { code, msg, errors },\r\n        } = await hubsInstance().put('/joinhub', payload);\r\n        if (code === 200) {\r\n          Notification('success', msg);\r\n        } else if (code === 201) {\r\n          const checkError = Object.values(errors);\r\n          if (checkError.length > 0) {\r\n            Notification('danger', checkError[0]);\r\n          }\r\n        } else {\r\n          Notification('danger', msg);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n  const ScrollChat = (chat) => {\r\n    try {\r\n      if (chat.length > 0) {\r\n        document.querySelector('.chat-list:last-child').scrollIntoView({\r\n          behavior: 'smooth',\r\n          block: 'nearest',\r\n          inline: 'start',\r\n        });\r\n      }\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n  const checkExistInHub = (joinedplayers, team1, team2, userid) => {\r\n    const FullArray = [...joinedplayers, ...team1, ...team2];\r\n    const FilterIfExist = FullArray.filter((el) => el.userid._id === userid);\r\n    if (FilterIfExist.length > 0) {\r\n      setExist(true);\r\n    }\r\n  };\r\n  const PickPlayer = async (pickplayerid) => {\r\n    const { id: hubid } = queryString();\r\n    if (hubid) {\r\n      const payload = { pickplayerid, hubid };\r\n      await hubsInstance().put('/pickplayer', payload);\r\n    }\r\n  };\r\n\r\n  const PickMap = async (mapname) => {\r\n    const { id: hubid } = queryString();\r\n    if (hubid) {\r\n      const payload = { mapname, hubid };\r\n      await hubsInstance().put('/mapvote', payload);\r\n    }\r\n  };\r\n\r\n  const PostComment = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const { isValid, errors } = validateComment({ comment });\r\n      setErrors(errors);\r\n      if (!isValid) {\r\n        return;\r\n      }\r\n      const { id: hubid } = queryString();\r\n      const response = await hubsInstance().post('/postComment', {\r\n        comment,\r\n        hubid,\r\n      });\r\n      const {\r\n        data: { code, saveComment, msg },\r\n      } = response;\r\n      if (code === 200) {\r\n        Notification('success', msg);\r\n        let oldState = [...commentList];\r\n        oldState.unshift(saveComment);\r\n        setCommentList(oldState);\r\n        setComment('');\r\n      } else {\r\n        Notification('danger', msg);\r\n      }\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  const HandleExist = async () => {\r\n    try {\r\n      const { id: hubid } = queryString();\r\n      if (hubid) {\r\n        const response = await hubsInstance().delete(`/exitfromhub/${hubid}`);\r\n        const {\r\n          data: { code, msg, joinid },\r\n        } = response;\r\n        if (code === 200) {\r\n          Notification('success', msg);\r\n          setExist(false);\r\n        } else {\r\n          Notification('danger', msg);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n  return (\r\n    <Layout header={true} footer={true}>\r\n      <div className=\"game-finished-page\">\r\n        <div className=\"main-wrapper\">\r\n          <LeftSidebar\r\n            mainmenu={true}\r\n            increase={true}\r\n            community={true}\r\n            voiceserver={true}\r\n          />\r\n          {dataLoad && (\r\n            <div className=\"middle-wrapper\">\r\n              <div className=\"game-finished-top-section\">\r\n                <Teams\r\n                  name={`${name} 's Hub`}\r\n                  checkfull={checkfull}\r\n                  team1={team1}\r\n                  team2={team2}\r\n                  running={running}\r\n                  HandleJoin={HandleJoin}\r\n                  BothTeamsData={BothCaptain}\r\n                  ChanceTimer={ChanceTimer}\r\n                  Exist={Exist}\r\n                  ScoreBoth={ScoreBoth}\r\n                  HandleExist={HandleExist}\r\n                />\r\n              </div>\r\n              {running ? (\r\n                <React.Fragment>\r\n                  {checkfull === 'true' && (\r\n                    <TimerAndJoinIpSection\r\n                      ChanceTimer={ChanceTimer}\r\n                      Captain={Captain}\r\n                      cancelled={cancelled}\r\n                      mapvoting={mapvoting}\r\n                      joinip={joinip}\r\n                      Exist={Exist}\r\n                    />\r\n                  )}\r\n                  <div className=\"game-finished-content\">\r\n                    {mapvoting === 'false' && (\r\n                      <React.Fragment>\r\n                        <Chat\r\n                          chats={chats}\r\n                          joinedplayers={joinedplayers}\r\n                          sendChatMessage={sendChatMessage}\r\n                          message={message}\r\n                          setMessage={setMessage}\r\n                          userid={userid}\r\n                          HandleSend={HandleSend}\r\n                          Captain={Captain}\r\n                          Exist={Exist}\r\n                          PickPlayer={PickPlayer}\r\n                          chance={ChanceTimer.chance}\r\n                        />\r\n                        <ShareGame />\r\n                      </React.Fragment>\r\n                    )}\r\n                    {mapvoting === 'true' && (\r\n                      <PlayGame\r\n                        maps={maps}\r\n                        chats={chats}\r\n                        sendChatMessage={sendChatMessage}\r\n                        message={message}\r\n                        setMessage={setMessage}\r\n                        userid={userid}\r\n                        HandleSend={HandleSend}\r\n                        Exist={Exist}\r\n                        PickMap={PickMap}\r\n                        chance={ChanceTimer.chance}\r\n                        Captain={Captain}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </React.Fragment>\r\n              ) : (\r\n                <GameFinished\r\n                  userStats={userStats}\r\n                  comment={comment}\r\n                  setComment={setComment}\r\n                  PostComment={PostComment}\r\n                  commentList={commentList}\r\n                  errors={errors}\r\n                />\r\n              )}\r\n            </div>\r\n          )}\r\n          <RightSidebar />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nexport default InsideGameFirst;\r\n\r\nconst TimerAndJoinIpSection = ({\r\n  ChanceTimer,\r\n  Captain,\r\n  cancelled,\r\n  mapvoting,\r\n  joinip,\r\n  Exist,\r\n}) => {\r\n  const { timer, chance } = ChanceTimer;\r\n  const { t } = useTranslation();\r\n  return (\r\n    <div className=\"ip-server timer-check\">\r\n      {!cancelled ? (\r\n        <React.Fragment>\r\n          {joinip ? (\r\n            <React.Fragment>\r\n              {Exist && (\r\n                <h4>\r\n                  {t('hub.ipserver')}: <span>{joinip}</span>{' '}\r\n                  <i\r\n                    onClick={() => {\r\n                      copy(`connect ${joinip}`);\r\n                    }}\r\n                    class=\"fa fa-clone\"\r\n                    aria-hidden=\"true\"\r\n                  ></i>\r\n                </h4>\r\n              )}\r\n            </React.Fragment>\r\n          ) : (\r\n            <React.Fragment>\r\n              {Captain ? (\r\n                <React.Fragment>\r\n                  {chance && Captain ? (\r\n                    <h4>\r\n                      {t('hub.pick-a')}{' '}\r\n                      {mapvoting === 'false' ? 'PLAYER' : 'MAP'}{' '}\r\n                      <span>{FormatTimer(timer)}</span>\r\n                    </h4>\r\n                  ) : (\r\n                    <h4>\r\n                      {t('hub.your-opponent')} <span>{t('hub.picking')}</span>\r\n                    </h4>\r\n                  )}\r\n                </React.Fragment>\r\n              ) : (\r\n                <React.Fragment>\r\n                  <h4>{t('hub.picking')}...</h4>\r\n                </React.Fragment>\r\n              )}\r\n            </React.Fragment>\r\n          )}\r\n        </React.Fragment>\r\n      ) : (\r\n        <h4 className=\"cancelled-game\">{t('hub.cancelled')}</h4>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmaking.jsx",["624"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport \"./matchmaking.css\";\r\nimport Layout from \"../layout/layout\";\r\nimport LeftSidebar from \"../sidebar/leftsidebar\";\r\nimport RightSidebar from \"../sidebar/rightsidebar\";\r\nimport MatchMakingProfile from \"./matchmakingprofile\";\r\nimport MonthlyRanking from \"../hubs/monthlyrank\";\r\nimport FeaturedStreaming from \"./featuredstreaming\";\r\nimport GameSelection from \"./gameselection\";\r\nimport UserContext from '../../context/context';\r\nimport MatchMakingTeam from \"../popups/matchmakingteam\";\r\nimport { Notification, EncodeData, checkPlayersStatus } from \"../../function\";\r\nimport history from \"../../config/history\";\r\n\r\nconst MatchMaking = () => {\r\n    const { userDetails: { group, teams, ispremium, ispremiumadvnaced, username, useravatar }, loggedIn, distributedStats, distributedStats: { Stats5vs5, QueueLength5vs5 }, setDistributedStats } = useContext(UserContext);\r\n    const [premium, setPremium] = useState(false);\r\n    const [advanced1vs1, setAdvanced1vs1] = useState(false);\r\n    const [premium1vs1, setPremium1vs1] = useState(false);\r\n    const [advanced, setAdvanced] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [showteam, setShowTeam] = useState(false);\r\n    // const [MonthlyRank, SetMonthlyRanking] = useState([]);\r\n    // const [MonthlyRankCopy, SetMonthlyRankingCopy] = useState([]);\r\n    const [UpDown, setUpDown] = useState({ rank: false, username: false, monthlyhubpoint: false, win: false, loss: false, winpercent: false });\r\n\r\n    const handleClose = () => {\r\n        if (loggedIn) {\r\n            if (group) {\r\n                const { _id } = group;\r\n                RedirectPlayer('group', _id);\r\n            } else {\r\n                Notification('danger', 'Please try to join or create a group and then start matchmaking');\r\n            }\r\n        } else {\r\n            Notification('danger', 'Please try to login and the select a game !!')\r\n        }\r\n    };\r\n    const handleCloseTeam = () => {\r\n        if (loggedIn) {\r\n            setShowTeam(!showteam)\r\n        } else {\r\n            Notification('danger', 'Please try to login and the select a game !!')\r\n        }\r\n    };\r\n\r\n    const RedirectPlayer = (type, id) => {\r\n        const encoded = EncodeData('24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm');\r\n        type = encoded(type);\r\n        id = encoded(id);\r\n        history.push(`/matchmaking5vs5?type=${type}&id=${id}&premium=${premium}&advanced=${advanced}`);\r\n    }\r\n    const RedirectPlayerSolo = (type) => {\r\n        if (!group) {\r\n            const encoded = EncodeData('24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm');\r\n            type = encoded(type);\r\n            history.push(`/matchmaking5vs5?type=${type}&premium=${premium}&advanced=${advanced}`);\r\n        } else {\r\n            Notification('danger', 'If you are in a group, you cannot search for a game alone, you have to leave the group.')\r\n        }\r\n    }\r\n    const RedirectWithTeam = (type, id) => {\r\n        const filterTeam = teams.filter(el => el._id === id);\r\n        if (filterTeam.length > 0) {\r\n            const { joinedmembers } = filterTeam[0];\r\n            const { isValid, errors } = checkPlayersStatus(joinedmembers);\r\n            if (!isValid) {\r\n                setErrors(errors)\r\n                return;\r\n            }\r\n            const encoded = EncodeData('24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm');\r\n            type = encoded(type);\r\n            id = encoded(id);\r\n            history.push(`/matchmaking5vs5?type=${type}&id=${id}&premium=${premium}&advanced=${advanced}`);\r\n        }\r\n    }\r\n\r\n    const SortData = (type) => {\r\n        let OldState = [...Stats5vs5];\r\n        OldState = OldState.sort((a, b) => {\r\n            if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n                return UpDown[type] ? a[type].localeCompare(b[type]) : b[type].localeCompare(a[type])\r\n            } else {\r\n                return UpDown[type] ? b[type] - a[type] : a[type] - b[type]\r\n            }\r\n        });\r\n        setDistributedStats({ ...distributedStats, Stats5vs5: OldState });\r\n        setUpDown({ ...UpDown, [type]: !UpDown[type] });\r\n    }\r\n\r\n    const Play1vs1 = () => {\r\n        history.push(`/matchmaking1vs1?premium=${premium1vs1}&advanced=${advanced1vs1}`);\r\n    }\r\n\r\n    return (\r\n        <Layout header={true} footer={true}>\r\n            <div className=\"hubs-page\">\r\n\r\n                <div className=\"main-wrapper\">\r\n\r\n                    <LeftSidebar mainmenu={true} increase={true} community={true} voiceserver={true} />\r\n\r\n                    <div className=\"middle-wrapper\">\r\n\r\n                        <div className=\"matchmaking\">\r\n                            {loggedIn && <MatchMakingProfile username={username} useravatar={useravatar} ispremium={ispremium} ispremiumadvnaced={ispremiumadvnaced} />}\r\n                            <GameSelection handleClose={handleClose} premium={premium} advanced={advanced} setPremium={setPremium} setAdvanced={setAdvanced} RedirectPlayerSolo={RedirectPlayerSolo} handleCloseTeam={handleCloseTeam} queueLength={QueueLength5vs5} RedirectPlayer={RedirectPlayer} Play1vs1={Play1vs1} premium1vs1={premium1vs1} advanced1vs1={advanced1vs1} setPremium1vs1={setPremium1vs1} setAdvanced1vs1={setAdvanced1vs1} />\r\n                            <MonthlyRanking MonthlyRank={Stats5vs5 ? Stats5vs5 : []} SortData={SortData} UpDown={UpDown} />\r\n                            <FeaturedStreaming />\r\n                        </div>\r\n                    </div>\r\n                    <RightSidebar />\r\n                </div>\r\n            </div>\r\n            {showteam && <MatchMakingTeam show={showteam} handleClose={handleCloseTeam} teams={teams} handleShow={() => { }} RedirectWithTeam={RedirectWithTeam} errors={errors} />}\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default MatchMaking;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\gamefinished.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmakingroom.jsx",["625","626","627"],"import React, { useEffect, useState } from \"react\";\nimport copy from \"copy-to-clipboard\";\nimport \"../hubs/hubs.css\";\nimport Layout from \"../layout/layout\";\nimport LeftSidebar from \"../sidebar/leftsidebar\";\nimport RightSidebar from \"../sidebar/rightsidebar\";\nimport Teams from \"../hubs/teams\";\n// import Chat from \"./chat\";\n// import ShareGame from \"./sharegame\";\nimport PlayGame from \"../hubs/playgame\";\nimport GameFinished from '../hubs/gamefinished';\nimport { matchmakingInstance } from '../../config/axios';\nimport { queryString, Notification, FormatTimer } from \"../../function\";\nimport history from \"../../config/history\";\nimport { socket, GetHubsChat, PlayerPickTimer, HubGameCancelled, PickMapEvent, SetHubsIP, ResetRoom } from \"../../socket\";\nimport { validateComment, CalculateStats } from \"../../function\";\nconst MatchMakingRoom = () => {\n    const [message, setMessage] = useState('');\n    const [userid, setUserId] = useState('');\n    const [chats, setChats] = useState({ teamone: [], teamtwo: [] });\n    const [team1, setTeam1] = useState([]);\n    const [team2, setTeam2] = useState([]);\n    const [BothCaptain, setBothCaptain] = useState([]);\n    const [Captain, setCaptain] = useState(false);\n    const [Exist, setExist] = useState(false);\n    const [ChanceTimer, setChanceTimer] = useState({ timer: 0, chance: false });\n    const [maps, setMaps] = useState([]);\n    const [name, setName] = useState('');\n    const [running, setRunning] = useState(true);\n    const [checkfull, setCheckfull] = useState('');\n    const [cancelled, setCancelled] = useState(false);\n    const [mapvoting, setMapvoting] = useState('false');\n    const [joinip, setJoinIp] = useState('');\n    const [dataLoad, setDataLoad] = useState(false);\n    const [userStats, setUserStats] = useState([]);\n    const [ScoreBoth, setBothState] = useState({ team1: '', team2: '' });\n    const [comment, setComment] = useState('');\n    const [errors, setErrors] = useState({});\n    const [commentList, setCommentList] = useState([]);\n    const [teamname, setTeamName] = useState(\"\");\n    useEffect(() => {\n        MatchMakingData();\n        //This event is used to get real time chat message\n        GetHubsChat(({ messages, team }) => {\n            try {\n                setChats((preState) => {\n                    return { ...preState, [team]: [...preState[team], messages] }\n                });\n                document.querySelector(\".chat-list:last-child\").scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });\n            } catch (e) {\n                return 0;\n            }\n        });\n\n        // this function for PlayerPickTimer \n        PlayerPickTimer((data) => {\n            console.log(\"data\", data);\n            const userlocalid = localStorage.getItem('userid');\n            if (data.playerid === userlocalid) {\n                setChanceTimer({ timer: data.timer, chance: true });\n            } else {\n                setChanceTimer({ timer: data.timer, chance: false });\n            }\n        });\n\n        //This socket event will when game cancelled\n        HubGameCancelled(() => {\n            Notification('danger', 'Game cannceled due to inactivety at the time map ban');\n            history.push(\"/matchmaking\");\n        });\n        // This function is used to get captains picked map in real time\n        PickMapEvent((mapname) => {\n            setMaps(preState => setMapsFunction(preState, mapname))\n        });\n        //In this event we set server ip where all things are configured\n        SetHubsIP((ip) => {\n            setJoinIp(ip.ip)\n            setChanceTimer({ timer: 60, chance: false });\n        });\n        //In this event we setup all the things\n        ResetRoom(() => {\n            MatchMakingData();\n        })\n        const setMapsFunction = (preState, mapname) => {\n            preState.forEach(element => {\n                if (element.title === mapname) {\n                    element.open = false;\n                }\n            });\n            return preState;\n        }\n    }, []);\n    const MatchMakingData = async () => {\n        try {\n            const { id } = queryString();\n            if (id) {\n                const { data: { code, matchmakingRoomData: { teamone, teamtwo, team1, team2, maps, running, cancelled, mapvoting, joinip, comments, gamemode }, userid } } = await matchmakingInstance().get(`/matchmakingroomdata/${id}`);\n                if (code === 200) {\n                    setUserId(userid);\n                    setRunning(running);\n                    const teamname = teamone ? \"teamone\" : \"teamtwo\";\n                    setChats({ teamone: teamone ? teamone : [], teamtwo: teamtwo ? teamtwo : [] });\n                    setTeamName(teamname);\n                    setMaps(maps);\n                    setCheckfull('true');\n                    setCancelled(cancelled);\n                    setMapvoting(mapvoting);\n                    setJoinIp(joinip);\n                    setCommentList(comments);\n                    checkExistInHub(team1, team2, userid);\n                    if (team1.length > 0 && team2.length > 0) {\n                        checkCaptain(team1, team2, userid);\n                        if (!running) {\n                            const calculateMvpAll = CalculateStats(team1, team2, gamemode);\n                            setUserStats(calculateMvpAll);\n                            let firstteam = calculateMvpAll.filter(el => el.type === 'team1' && el.iscaptain);\n                            let secondteam = calculateMvpAll.filter(el => el.type === 'team2' && el.iscaptain);\n                            if (firstteam.length && secondteam.length) {\n                                setBothState({ team1: firstteam[0].score, team2: secondteam[0].score });\n                            }\n                        }\n                    }\n                    setDataLoad(true);\n                    ScrollChat([1, 2]);\n                }\n                socket.emit('join', id);\n            }\n        } catch (e) {\n            return 0;\n        }\n    }\n    const sendChatMessage = () => {\n        const { id: roomid } = queryString();\n        const token = localStorage.getItem('webtoken');\n        const payload = { token, message, roomid };\n        if (token && roomid && message) {\n            socket.emit('MatchMakingRoomChat', payload);\n            setMessage('');\n        }\n    }\n    const HandleSend = (e) => {\n        if (e.charCode === 13) {\n            sendChatMessage();\n        }\n    }\n    const checkCaptain = (team1, team2, userid) => {\n        const BothTeams = [...team1, ...team2];\n        const CheckFromBoth = BothTeams.filter(el => el.iscaptain && el.userid._id === userid);\n        const CheckBothCaptains = BothTeams.filter(el => el.iscaptain);\n        team1 = team1.filter(el => !el.iscaptain);\n        team2 = team2.filter(el => !el.iscaptain);\n        if (CheckFromBoth.length > 0) {\n            setCaptain(true);\n        }\n        setTeam1(team1);\n        setTeam2(team2);\n        setBothCaptain(CheckBothCaptains);\n    }\n\n    const ScrollChat = (chat) => {\n        try {\n            if (chat.length > 0) {\n                document.querySelector(\".chat-list:last-child\").scrollIntoView({\n                    behavior: \"smooth\", block: 'nearest', inline: 'start'\n                });\n            }\n        } catch (e) {\n            return 0;\n        }\n    }\n    const checkExistInHub = (team1, team2, userid) => {\n        const FullArray = [...team1, ...team2];\n        const FilterIfExist = FullArray.filter(el => el.userid._id === userid);\n        if (FilterIfExist.length > 0) {\n            setExist(true);\n        }\n    }\n\n    const PickMap = async (mapname) => {\n        const { id: roomid } = queryString();\n        if (roomid) {\n            const payload = { mapname, roomid }\n            await matchmakingInstance().put('/mapvote', payload);\n        }\n    }\n    const PostComment = async (e) => {\n        try {\n            e.preventDefault();\n            const { isValid, errors } = validateComment({ comment });\n            setErrors(errors);\n            if (!isValid) {\n                return;\n            }\n            const { id: roomid } = queryString();\n            const response = await matchmakingInstance().post('/postComment', { comment, roomid });\n            const { data: { code, saveComment, msg } } = response;\n            if (code === 200) {\n                Notification('success', msg);\n                let oldState = [...commentList];\n                oldState.unshift(saveComment);\n                setCommentList(oldState);\n                setComment('');\n            } else {\n                Notification('danger', msg);\n            }\n        } catch (e) {\n            return 0;\n        }\n    }\n\n    return (\n        <Layout header={true} footer={true}>\n            <div className=\"game-finished-page\">\n                <div className=\"main-wrapper\">\n                    <LeftSidebar mainmenu={true} increase={true} community={true} voiceserver={true} />\n                    {dataLoad && <div className=\"middle-wrapper\">\n                        <div className=\"game-finished-top-section\">\n                            <Teams name={'Matchmaking room'} checkfull={checkfull} team1={team1} team2={team2} running={running} HandleJoin={() => { }} BothTeamsData={BothCaptain} ChanceTimer={ChanceTimer} Exist={Exist} ScoreBoth={ScoreBoth} HandleExist={() => { }} />\n                        </div>\n                        {running ? <React.Fragment>\n                            {checkfull === 'true' && <TimerAndJoinIpSection ChanceTimer={ChanceTimer} Captain={Captain} cancelled={cancelled} mapvoting={mapvoting} joinip={joinip} Exist={Exist} />}\n                            <div className=\"game-finished-content\">\n                                {console.log(chats)}\n                                {mapvoting === 'true' && <PlayGame maps={maps} chats={chats[teamname]} sendChatMessage={sendChatMessage} message={message} setMessage={setMessage} userid={userid} HandleSend={HandleSend} Exist={Exist} PickMap={PickMap} chance={ChanceTimer.chance} Captain={Captain} />}\n                            </div>\n                        </React.Fragment> : <GameFinished userStats={userStats} comment={comment} setComment={setComment} PostComment={PostComment} commentList={commentList} errors={errors} />}\n                    </div>}\n                    <RightSidebar />\n                </div>\n            </div>\n        </Layout>\n    );\n};\nexport default MatchMakingRoom;\n\nconst TimerAndJoinIpSection = ({ ChanceTimer, Captain, cancelled, mapvoting, joinip, Exist }) => {\n    const { timer, chance } = ChanceTimer;\n    console.log(timer, chance);\n    return <div className=\"ip-server timer-check\">\n        {!cancelled ? <React.Fragment>\n            {joinip ? <React.Fragment>\n                {Exist && <h4>IP SERVER: <span>{joinip}</span> <i onClick={() => {\n                    copy(`connect ${joinip}`)\n                }} class=\"fa fa-clone\" aria-hidden=\"true\"></i></h4>}\n            </React.Fragment> : <React.Fragment>\n                    {Captain ? <React.Fragment>\n                        {chance && Captain ? <h4>PICK A {mapvoting === 'false' ? 'PLAYER' : 'MAP'} <span>{FormatTimer(timer)}</span></h4> : <h4>YOUR OPPONENT <span>PICKING</span></h4>}\n                    </React.Fragment> : <React.Fragment>\n                            <h4>PICKING...</h4>\n                        </React.Fragment>}\n                </React.Fragment>}\n        </React.Fragment> : <h4 className='cancelled-game'>CANCELLED</h4>}\n    </div>\n}\n\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\tournament.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\tournamentroom.jsx",["628","629","630","631"],"import React, { useEffect, useState } from \"react\";\nimport copy from \"copy-to-clipboard\";\nimport \"../hubs/hubs.css\";\nimport Layout from \"../layout/layout\";\nimport LeftSidebar from \"../sidebar/leftsidebar\";\nimport RightSidebar from \"../sidebar/rightsidebar\";\nimport Teams from \"../hubs/teams\";\n// import Chat from \"./chat\";\n// import ShareGame from \"./sharegame\";\nimport PlayGame from \"../hubs/playgame\";\nimport GameFinished from '../hubs/gamefinished';\nimport { tournamentInstance } from '../../config/axios';\nimport { queryString, Notification, FormatTimer } from \"../../function\";\n// import history from \"../../config/history\";\nimport { socket, GetHubsChat, PlayerPickTimer, HubGameCancelled, PickMapEvent, SetHubsIP, ResetRoom, GetMapVotingStart } from \"../../socket\";\nimport { validateComment, CalculateStats } from \"../../function\";\nconst TournamentRoom = () => {\n    const [message, setMessage] = useState('');\n    const [userid, setUserId] = useState('');\n    const [chats, setChats] = useState({ teamone: [], teamtwo: [] });\n    const [team1, setTeam1] = useState([]);\n    const [team2, setTeam2] = useState([]);\n    const [BothCaptain, setBothCaptain] = useState([]);\n    const [Captain, setCaptain] = useState(false);\n    const [Exist, setExist] = useState(false);\n    const [ChanceTimer, setChanceTimer] = useState({ timer: 0, chance: false });\n    const [maps, setMaps] = useState([]);\n    const [name, setName] = useState('');\n    const [running, setRunning] = useState(true);\n    const [checkfull, setCheckfull] = useState('');\n    const [cancelled, setCancelled] = useState(false);\n    const [mapvoting, setMapvoting] = useState('false');\n    const [joinip, setJoinIp] = useState('');\n    const [dataLoad, setDataLoad] = useState(false);\n    const [userStats, setUserStats] = useState([]);\n    const [ScoreBoth, setBothState] = useState({ team1: '', team2: '' });\n    const [comment, setComment] = useState('');\n    const [errors, setErrors] = useState({});\n    const [commentList, setCommentList] = useState([]);\n    const [teamname, setTeamName] = useState(\"\");\n    const [tournamentid, setTournamentId] = useState('');\n    // This state is used to set ready for the player - \n    const [Ready, setReadyTeam] = useState(false);\n    useEffect(() => {\n        TournamentRoomData();\n        //This event is used to get real time chat message\n        GetHubsChat(({ messages, team }) => {\n            try {\n                setChats((preState) => {\n                    return { ...preState, [team]: [...preState[team], messages] }\n                });\n                document.querySelector(\".chat-list:last-child\").scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });\n            } catch (e) {\n                return 0;\n            }\n        });\n\n        // this function for PlayerPickTimer \n        PlayerPickTimer((data) => {\n            console.log(\"data\", data);\n            const userlocalid = localStorage.getItem('userid');\n            if (data.playerid === userlocalid) {\n                setChanceTimer({ timer: data.timer, chance: true });\n            } else {\n                setChanceTimer({ timer: data.timer, chance: false });\n            }\n        });\n\n        //This socket event will when game cancelled\n        // HubGameCancelled(() => {\n        //     Notification('danger', 'Game cannceled due to inactivety at the time map ban');\n        //     history.push(\"/matchmaking\");\n        // });\n        // This function is used to get captains picked map in real time\n        PickMapEvent((mapname) => {\n            setMaps(preState => setMapsFunction(preState, mapname))\n        });\n        //In this event we set server ip where all things are configured\n        SetHubsIP((ip) => {\n            setJoinIp(ip.ip)\n            setChanceTimer({ timer: 60, chance: false });\n        });\n        //In this event we setup all the things\n        ResetRoom(() => {\n            TournamentRoomData();\n        })\n        //GetMapVotingStart\n        GetMapVotingStart(() => {\n            setMapvoting('true');\n            setReadyTeam(true);\n        })\n        const setMapsFunction = (preState, mapname) => {\n            preState.forEach(element => {\n                if (element.title === mapname) {\n                    element.open = false;\n                }\n            });\n            return preState;\n        }\n    }, []);\n    const TournamentRoomData = async () => {\n        try {\n            const { id } = queryString();\n            if (id) {\n                const { data: { code, tournamentRoomData: { teamone, teamtwo, team1, team2, maps, running, cancelled, mapvoting, joinip, comments, gamemode, tournamentid }, userid } } = await tournamentInstance().get(`/tournamentRoomData/${id}`);\n                if (code === 200) {\n                    setUserId(userid);\n                    setRunning(running);\n                    const teamname = teamone ? \"teamone\" : \"teamtwo\";\n                    setChats({ teamone: teamone ? teamone : [], teamtwo: teamtwo ? teamtwo : [] });\n                    setTeamName(teamname);\n                    setMaps(maps);\n                    setCheckfull('true');\n                    setCancelled(cancelled);\n                    setMapvoting(mapvoting);\n                    setJoinIp(joinip);\n                    setCommentList(comments);\n                    checkExistInHub(team1, team2, userid);\n                    // console.log('tournamentid', tournamentid);\n                    setTournamentId(tournamentid)\n                    setReadyTeam(mapvoting === 'true' ? true : false);\n                    if (team1.length > 0 && team2.length > 0) {\n                        checkCaptain(team1, team2, userid);\n                        if (!running) {\n                            const calculateMvpAll = CalculateStats(team1, team2, gamemode);\n                            setUserStats(calculateMvpAll);\n                            let firstteam = calculateMvpAll.filter(el => el.type === 'team1' && el.iscaptain);\n                            let secondteam = calculateMvpAll.filter(el => el.type === 'team2' && el.iscaptain);\n                            if (firstteam.length && secondteam.length) {\n                                setBothState({ team1: firstteam[0].score, team2: secondteam[0].score });\n                            }\n                        }\n                    }\n                    setDataLoad(true);\n                    ScrollChat([1, 2]);\n                }\n                socket.emit('join', id);\n            }\n        } catch (e) {\n            return 0;\n        }\n    }\n    const sendChatMessage = () => {\n        const { id: roomid } = queryString();\n        const token = localStorage.getItem('webtoken');\n        const payload = { token, message, roomid };\n        if (token && roomid && message) {\n            socket.emit('MatchMakingRoomChat', payload);\n            setMessage('');\n        }\n    }\n    const HandleSend = (e) => {\n        if (e.charCode === 13) {\n            sendChatMessage();\n        }\n    }\n    const checkCaptain = (team1, team2, userid) => {\n        const BothTeams = [...team1, ...team2];\n        const CheckFromBoth = BothTeams.filter(el => el.iscaptain && el.userid._id === userid);\n        const CheckBothCaptains = BothTeams.filter(el => el.iscaptain);\n        team1 = team1.filter(el => !el.iscaptain);\n        team2 = team2.filter(el => !el.iscaptain);\n        if (CheckFromBoth.length > 0) {\n            setCaptain(true);\n        }\n        setTeam1(team1);\n        setTeam2(team2);\n        setBothCaptain(CheckBothCaptains);\n    }\n\n    const ScrollChat = (chat) => {\n        try {\n            if (chat.length > 0) {\n                document.querySelector(\".chat-list:last-child\").scrollIntoView({\n                    behavior: \"smooth\", block: 'nearest', inline: 'start'\n                });\n            }\n        } catch (e) {\n            return 0;\n        }\n    }\n    const checkExistInHub = (team1, team2, userid) => {\n        const FullArray = [...team1, ...team2];\n        const FilterIfExist = FullArray.filter(el => el.userid._id === userid);\n        if (FilterIfExist.length > 0) {\n            setExist(true);\n        }\n    }\n\n    const PickMap = async (mapname) => {\n        const { id: roomid } = queryString();\n        if (roomid) {\n            const payload = { mapname, roomid }\n            await tournamentInstance().put('/tournamentMapVote', payload);\n        }\n    }\n    const PostComment = async (e) => {\n        try {\n            e.preventDefault();\n            const { isValid, errors } = validateComment({ comment });\n            setErrors(errors);\n            if (!isValid) {\n                return;\n            }\n            const { id: roomid } = queryString();\n            const response = await tournamentInstance().post('/postComment', { comment, roomid });\n            const { data: { code, saveComment, msg } } = response;\n            if (code === 200) {\n                Notification('success', msg);\n                let oldState = [...commentList];\n                oldState.unshift(saveComment);\n                setCommentList(oldState);\n                setComment('');\n            } else {\n                Notification('danger', msg);\n            }\n        } catch (e) {\n            return 0;\n        }\n    }\n\n    // This function is used to \n    const SetReady = async () => {\n        try {\n            const { id: roomid } = queryString();\n            if (tournamentid && roomid) {\n                const response = await tournamentInstance().post(`/setRaedy/${roomid}/${tournamentid}`);\n                const { data: { code, msg } } = response;\n                if (code === 200) {\n                    Notification('success', msg);\n                } else {\n                    Notification('danger', msg);\n                }\n            }\n        } catch (error) {\n            return error;\n        }\n    }\n\n    return (\n        <Layout header={true} footer={true}>\n            <div className=\"game-finished-page\">\n                <div className=\"main-wrapper\">\n                    <LeftSidebar mainmenu={true} increase={true} community={true} voiceserver={true} />\n                    {dataLoad && <div className=\"middle-wrapper\">\n                        <div className=\"game-finished-top-section\">\n                            <Teams name={'Tournament room'} checkfull={checkfull} team1={team1} team2={team2} running={running} HandleJoin={() => { }} BothTeamsData={BothCaptain} ChanceTimer={ChanceTimer} Exist={Exist} ScoreBoth={ScoreBoth} HandleExist={() => { }} />\n                        </div>\n                        {running ? <React.Fragment>\n                            {checkfull === 'true' && <TimerAndJoinIpSection ChanceTimer={ChanceTimer} Captain={Captain} cancelled={cancelled} mapvoting={mapvoting} joinip={joinip} Exist={Exist} Ready={Ready} SetReady={SetReady} />}\n                            <div className=\"game-finished-content\">\n                                {mapvoting === 'true' && <PlayGame maps={maps} chats={chats[teamname]} sendChatMessage={sendChatMessage} message={message} setMessage={setMessage} userid={userid} HandleSend={HandleSend} Exist={Exist} PickMap={PickMap} chance={ChanceTimer.chance} Captain={Captain} />}\n                            </div>\n                        </React.Fragment> : <GameFinished userStats={userStats} comment={comment} setComment={setComment} PostComment={PostComment} commentList={commentList} errors={errors} />}\n                    </div>}\n                    <RightSidebar />\n                </div>\n            </div>\n        </Layout>\n    );\n};\nexport default TournamentRoom;\n\nconst TimerAndJoinIpSection = ({ ChanceTimer, Captain, cancelled, mapvoting, joinip, Exist, Ready, SetReady }) => {\n    const { timer, chance } = ChanceTimer;\n    return <div className=\"ip-server timer-check\">\n        {!Ready && mapvoting === 'false' ? <div className='join-ready-btn'><button className=\"join-btn\" onClick={() => SetReady()} >Ready</button></div> : <React.Fragment>\n            {!cancelled ? <React.Fragment>\n                {joinip ? <React.Fragment>\n                    {Exist && <h4>IP SERVER: <span>{joinip}</span> <i onClick={() => {\n                        copy(`connect ${joinip}`)\n                    }} class=\"fa fa-clone\" aria-hidden=\"true\"></i></h4>}\n                </React.Fragment> : <React.Fragment>\n                        {Captain ? <React.Fragment>\n                            {chance && Captain ? <h4>PICK A {mapvoting === 'false' ? 'PLAYER' : 'MAP'} <span>{FormatTimer(timer)}</span></h4> : <h4>YOUR OPPONENT <span>PICKING</span></h4>}\n                        </React.Fragment> : <React.Fragment>\n                                <h4>PICKING...</h4>\n                            </React.Fragment>}\n                    </React.Fragment>}\n            </React.Fragment> : <h4 className='cancelled-game'>CANCELLED</h4>}\n        </React.Fragment>}\n\n    </div>\n}\n\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmaking5vs5.jsx",["632","633","634","635"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"./matchmaking.css\";\r\nimport Layout from \"../layout/layout\";\r\nimport LeftSidebar from \"../sidebar/leftsidebar\";\r\nimport RightSidebar from \"../sidebar/rightsidebar\";\r\nimport MatchMakingProfile from \"./matchmakingprofile\";\r\nimport MonthlyRanking from \"../hubs/monthlyrank\";\r\nimport FeaturedStreaming from \"./featuredstreaming\";\r\nimport MatchMakingGroup from \"../popups/matchmakinggroup\";\r\nimport LookingGame5vs5 from \"./lookinggame5vs5\";\r\nimport UserContext from \"../../context/context\";\r\nimport {\r\n  Notification,\r\n  DecodeData,\r\n  EncodeData,\r\n  queryString,\r\n  MovePosition\r\n} from \"../../function\";\r\nimport { matchmakingInstance, userInstance } from \"../../config/axios\";\r\nlet interval = null;\r\n\r\nconst MatchMaking5vs5 = () => {\r\n  const {\r\n    userDetails: {\r\n      group,\r\n      // teams,\r\n      ispremium,\r\n      ispremiumadvnaced,\r\n      username,\r\n      useravatar,\r\n      onlinefriends,\r\n      groupJoinedLength,\r\n      userid\r\n    },\r\n    loggedIn,\r\n    distributedStats: { Stats5vs5, QueueLength5vs5 },\r\n    distributedStats,\r\n    setDistributedStats\r\n  } = useContext(UserContext);\r\n  const { members: myGroupMembers, joinedmembers } = group ? group : { members: [] };\r\n  let checkTimer = localStorage.getItem('r_encoded_q^') ? localStorage.getItem(\"~interval$%!\") : 0;\r\n  const [timerView, setTimerView] = useState({ timer: checkTimer ? parseInt(checkTimer) : 0, isValid: false });\r\n  const [typeValue, setTypeValue] = useState({\r\n    type: \"\",\r\n    id: \"\",\r\n    premium: false,\r\n    advanced: false,\r\n  });\r\n  const [members, setMembers] = useState([]);\r\n  const [solo, setSolo] = useState(false);\r\n  const [isGroup, setIsGroup] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const [selectedPlayers, setSelectedPlayers] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [indexValue, setIndexValue] = useState(0);\r\n  const [UpDown, setUpDown] = useState({ rank: false, username: false, monthlyhubpoint: false, win: false, loss: false, winpercent: false });\r\n  useEffect(() => {\r\n    try {\r\n      const { type, id, premium, advanced } = queryString();\r\n      const myDecipher = DecodeData(\"24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm\");\r\n      const decodedType = type ? myDecipher(type) : \"\";\r\n      const decodedId = id ? myDecipher(id) : \"\";\r\n      if (decodedType || decodedId) {\r\n        setTypeValue({\r\n          type: decodedType,\r\n          id: decodedId,\r\n          premium: premium === \"true\" ? true : false,\r\n          advanced: advanced === \"true\" ? true : false,\r\n        });\r\n        if (decodedType !== 'solo') {\r\n          GetPlayerData(decodedId, decodedType);\r\n        } else if (decodedType === \"solo\") {\r\n          setSolo(true);\r\n        }\r\n        checkQueue();\r\n      }\r\n\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }, []);\r\n\r\n  const StartQueue = async () => {\r\n    //This function used to start the matchmaking queue.\r\n    try {\r\n      const response = await matchmakingInstance().post(\r\n        \"/queuefilter5v5\",\r\n        typeValue\r\n      );\r\n      const {\r\n        data: { code, msg, queueid, errors },\r\n      } = response;\r\n      if (code === 200) {\r\n        const myCipher = EncodeData(\"24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm\");\r\n        const EncodedQueue = myCipher(queueid);\r\n        Notification(\"success\", msg);\r\n        localStorage.setItem(\"r_encoded_q^\", EncodedQueue);\r\n        StartTimer();\r\n      } else if (code === 201) {\r\n        Notification(\"danger\", Object.values(errors)[0]);\r\n      } else {\r\n        Notification(\"danger\", msg);\r\n      }\r\n    } catch (error) {\r\n      //Error\r\n      return error;\r\n    }\r\n  };\r\n\r\n\r\n  const checkQueue = async () => {\r\n    try {\r\n      const queueid = localStorage.getItem(\"r_encoded_q^\");\r\n      if (queueid) {\r\n        const myDecipher = DecodeData(\"24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm\");\r\n        const decoded = myDecipher(queueid);\r\n        const response = await matchmakingInstance().get(\r\n          `/checkvalidqueue/${decoded}`\r\n        );\r\n        const {\r\n          data: { code },\r\n        } = response;\r\n        if (code === 200) {\r\n          StartTimer();\r\n        } else {\r\n          localStorage.removeItem(\"r_encoded_q^\");\r\n          localStorage.removeItem(\"~interval$%!\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n  const StartTimer = () => {\r\n    interval = setInterval(() => {\r\n      if (localStorage.getItem('r_encoded_q^')) {\r\n        setTimerView((preState) => {\r\n          let { timer } = preState;\r\n          timer += 1;\r\n          localStorage.setItem(\"~interval$%!\", timer);\r\n          return { isValid: true, timer };\r\n        });\r\n      } else {\r\n        ClearIntervalData();\r\n      }\r\n\r\n    }, 1000);\r\n  };\r\n\r\n  const removeQueue = async () => {\r\n    try {\r\n      const queueid = localStorage.getItem(\"r_encoded_q^\");\r\n      if (queueid) {\r\n        const { type } = typeValue;\r\n        const myDecipher = DecodeData(\"24t5/T%$Q#7jJDvm24t5/T%$Q#7jJDvm\");\r\n        const decoded = myDecipher(queueid);\r\n        const response = await matchmakingInstance().delete(\r\n          `/removequeue/${decoded}/${type}`\r\n        );\r\n        const {\r\n          data: { code, msg },\r\n        } = response;\r\n        if (code === 200) {\r\n          Notification(\"success\", msg);\r\n          ClearIntervalData();\r\n\r\n        } else {\r\n          Notification(\"danger\", msg);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  const ClearIntervalData = () => {\r\n    clearInterval(interval);\r\n    setTimerView({ isValid: false, timer: 0 });\r\n    localStorage.removeItem(\"r_encoded_q^\");\r\n    localStorage.removeItem(\"~interval$%!\");\r\n  }\r\n\r\n  const GetPlayerData = async (id, type) => {\r\n    try {\r\n      const response = await matchmakingInstance().get(`/playersinqueue/${type}/${id}`);\r\n      const { data: { code, joinedmembers } } = response;\r\n      if (code === 200) {\r\n        if (joinedmembers.length >= 5) {\r\n          const myIndex = joinedmembers.findIndex(el => el._id === localStorage.getItem('userid'));\r\n          MovePosition(joinedmembers, myIndex, 2);\r\n          setMembers(joinedmembers);\r\n        } else {\r\n          setMembers(joinedmembers);\r\n        }\r\n        if (type === 'group') {\r\n          setIsGroup(true);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      return e;\r\n    }\r\n  }\r\n\r\n  const handleClose = (index, type) => {\r\n    if (type === 'open') {\r\n      setIndexValue(index);\r\n    }\r\n    setShow(!show)\r\n\r\n  }\r\n\r\n  const InviteInGroup = async (id) => {\r\n    const payload = { index: indexValue };\r\n    const response = await userInstance().patch(`/inviteingroup/${id}`, payload);\r\n    const { data: { code, msg } } = response;\r\n    if (code === 200) {\r\n      Notification('success', msg)\r\n    } else {\r\n      Notification('danger', msg)\r\n    }\r\n  }\r\n\r\n  const StartGroupMatchmkaing = () => {\r\n    if (groupJoinedLength.length < 5) {\r\n      const required = 5 - groupJoinedLength.length;\r\n      Notification('danger', `Please add ${required} more members to satat queue`)\r\n    } else {\r\n      const playerLength = myGroupMembers.filter(el => el.joined);\r\n      if (playerLength.length === 5) {\r\n        StartQueue();\r\n      } else {\r\n        Notification('danger', `Some invited members are not joined the group, please be Patience !!`);\r\n      }\r\n    }\r\n  }\r\n\r\n  const SortData = (type) => {\r\n    let OldState = [...Stats5vs5];\r\n    OldState = OldState.sort((a, b) => {\r\n      if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n        return UpDown[type] ? a[type].localeCompare(b[type]) : b[type].localeCompare(a[type])\r\n      } else {\r\n        return UpDown[type] ? b[type] - a[type] : a[type] - b[type]\r\n      }\r\n    });\r\n    setDistributedStats({ ...distributedStats, Stats5vs5: OldState });\r\n    setUpDown({ ...UpDown, [type]: !UpDown[type] });\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Layout header={true} footer={true}>\r\n      <div className=\"hubs-page\">\r\n        <div className=\"main-wrapper\">\r\n          <LeftSidebar\r\n            mainmenu={true}\r\n            increase={true}\r\n            community={true}\r\n            voiceserver={true}\r\n          />\r\n          <div className=\"middle-wrapper\">\r\n            <div className=\"matchmaking\">\r\n              {loggedIn && (\r\n                <MatchMakingProfile\r\n                  username={username}\r\n                  useravatar={useravatar}\r\n                  ispremium={ispremium}\r\n                  ispremiumadvnaced={ispremiumadvnaced}\r\n                />\r\n              )}\r\n              <LookingGame5vs5\r\n                timerView={timerView}\r\n                typeValue={typeValue}\r\n                StartQueue={StartQueue}\r\n                removeQueue={removeQueue}\r\n                members={members}\r\n                solo={solo}\r\n                username={username}\r\n                useravatar={useravatar}\r\n                myGroupMembers={myGroupMembers}\r\n                isGroup={isGroup}\r\n                groupJoinedLength={groupJoinedLength}\r\n                handleClose={handleClose}\r\n                StartGroupMatchmkaing={StartGroupMatchmkaing}\r\n              />\r\n              <MonthlyRanking MonthlyRank={Stats5vs5 ? Stats5vs5 : []} SortData={SortData} UpDown={UpDown} />\r\n              <FeaturedStreaming />\r\n            </div>\r\n          </div>\r\n          <RightSidebar />\r\n        </div>\r\n      </div>\r\n      {show && <MatchMakingGroup show={show} handleClose={handleClose} onlinePlyaers={onlinefriends} joinedPlayers={joinedmembers} selectMember={() => { }} selectedPlayers={selectedPlayers} removeMember={() => { }} errors={errors} sendInvitation={() => { }} userid={userid} InviteInGroup={InviteInGroup} />}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MatchMaking5vs5;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\scouting\\index.jsx",["636","637","638","639"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { countries } from \"countries-list\";\r\nimport Layout from \"../layout/layout\";\r\nimport LeftSidebar from \"../sidebar/leftsidebar\";\r\nimport Filter from \"./filter-section\";\r\nimport ScoutnigRight from \"./scouting\";\r\nimport UserContext from \"../../context/context\";\r\nimport {\r\n  JoinScoutingAreaValidation,\r\n  Notification,\r\n  prestige,\r\n} from \"../../function\";\r\nimport { userInstance } from \"../../config/axios\";\r\n\r\nimport \"./scouting.css\";\r\n\r\nconst Scouting = () => {\r\n  const {\r\n    userDetails: { username, useravatar },\r\n    ContactWithUser,\r\n  } = useContext(UserContext);\r\n  const dataFilterType = [\r\n    { role: \"Entry Fragger\", checked: false },\r\n    { role: \"Caller/ IGl\", checked: false },\r\n    { role: \"Primary AWper\", checked: false },\r\n    { role: \"Secondary AWper\", checked: false },\r\n    { role: \"Lurker\", checked: false },\r\n    { role: \"Rifler\", checked: false },\r\n  ];\r\n  const initialState = { description: \"\", language: [], roles: [],isdisappears:''};\r\n  const initialRanks = [\r\n    { prestige: \"Prestige 1\",rank:'1000',prestigemax:'1199' },\r\n    { prestige: \"Prestige 2\",rank:'1200',prestigemax:'1399' },\r\n    { prestige: \"Prestige 3\",rank:'1400',prestigemax:'1599' },\r\n    { prestige: \"Prestige 4\",rank:'1600',prestigemax:'1799'},\r\n    { prestige: \"Prestige 5\",rank:'1800',prestigemax:'1999'},\r\n    { prestige: \"Prestige 6\",rank:'2000',prestigemax:'2299'},\r\n    { prestige: \"Prestige 7\",rank:'2300',prestigemax:'2599'},\r\n    { prestige: \"Prestige 8\",rank:'2600',prestigemax:'2899'},\r\n    { prestige: \"Prestige 9\",rank:'2900',prestigemax:'3499' },\r\n    { prestige: \"Prestige 10\",rank:'3500',prestigemax:'5000'},\r\n  ];\r\n  const [show, setShow] = useState(false);\r\n  const [countriesWithLang, setCountriesWithLang] = useState([]);\r\n  const [data, setData] = useState(initialState);\r\n  const [errors, setErrors] = useState({});\r\n  const [fetchAllCollections, setFetchAllCollections] = useState([]);\r\n  const [contact, setContact] = useState(false);\r\n  const [filterCheckBoxes, setFilterChcekBoxes] = useState(dataFilterType);\r\n  const [minRank, setMinRank] = useState(initialRanks);\r\n  const [maxRank, setMaxRank] = useState(initialRanks);\r\n   const [getprestigemax, setPrestigemax] = useState(0);\r\n  //These states for filter\r\n  const [filterlang, setFilterLang] = useState([]);\r\n  const [ageCheck, setAgeCheck] = useState(false);\r\n  const [filterMinRank, setFilterMinRank] = useState(null);\r\n  const [filterMaxRank, setFilterMaxRank] = useState(null);\r\n  const [filterCountry, setFilterCountry] = useState(null);\r\n\r\n  const [messageData, setMessageData] = useState({\r\n    messageto: \"\",\r\n    message: \"\",\r\n    scoutingId: \"\",\r\n  });\r\n\r\n  const setCountryList = () => {\r\n    let oldState = [];\r\n    Object.keys(countries).forEach((element) => {\r\n      oldState.push({\r\n        lang: element,\r\n        name: countries[element].name,\r\n        native: countries[element].native,\r\n      });\r\n    });\r\n    setCountriesWithLang(oldState);\r\n  };\r\n  const GetAllJoinedUsers = async () => {\r\n    try {\r\n      const response = await userInstance().get(\"/fetchDataForScouting\");\r\n      const {\r\n        data: { code, fetchAllCollections },\r\n      } = response;\r\n      if (code === 200) {\r\n        setFetchAllCollections(fetchAllCollections);\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCountryList();\r\n    GetAllJoinedUsers();\r\n  }, []);\r\n\r\n  const JoinTeamFinder = async () => {\r\n    try {\r\n      const { isValid, errors } = JoinScoutingAreaValidation(data);\r\n      if (!isValid) {\r\n        setErrors(errors);\r\n        return;\r\n      }\r\n      const response = await userInstance().post(\"/joinTeamFinder\", { data });\r\n      const {\r\n        data: { code, msg, errors: servererrors },\r\n      } = response;\r\n      if (code === 200) {\r\n        Notification(\"success\", msg);\r\n        handleClose();\r\n        setData(initialState);\r\n        GetAllJoinedUsers();\r\n      } else if (code === 201) {\r\n        Notification(\"danger\", Object.values(servererrors)[0]);\r\n      } else {\r\n        Notification(\"danger\", msg);\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n  const setSelectData = (type, value) => {\r\n    \r\n    if (type === \"roles\") {\r\n      let oldState = { ...data };\r\n      const checkExists = oldState[type].filter((el) => el === value);\r\n      if (checkExists.length === 0 && type) {\r\n        setData((preState) => {\r\n          return { ...preState, [type]: [...preState[type], value] };\r\n        });\r\n      }\r\n    } else if (type === \"language\") {\r\n      value = parseInt(value);\r\n      let oldState = { ...data };\r\n      const checkExists = oldState[type].filter((el) => el === value);\r\n      if (checkExists.length === 0 && type) {\r\n        setData((preState) => {\r\n          return {\r\n            ...preState,\r\n            [type]: [...preState[type], countriesWithLang[value]],\r\n          };\r\n        });\r\n      }\r\n    } else {\r\n      setData({ ...data, [type]: value });\r\n    }\r\n  };\r\n  const handleContactOpenClose = (type, index) => {\r\n    if (type === \"open\") {\r\n      const {\r\n        joinedUser: { _id: messageto },\r\n        _id: scoutingId,\r\n      } = fetchAllCollections[index];\r\n      setMessageData({ ...messageData, messageto, scoutingId });\r\n    }\r\n    setContact(!contact);\r\n  };\r\n\r\n  const setMessage = (e) => {\r\n    const { value } = e.target;\r\n    setMessageData({ ...messageData, message: value });\r\n  };\r\n\r\n  const FilterData = (type, valindex,rank,prestigemax) => {\r\n    try {\r\n      if (type === \"role\") {\r\n        let oldState = [...filterCheckBoxes];\r\n        let { checked } = oldState[valindex];\r\n        oldState[valindex].checked = !checked;\r\n        setFilterChcekBoxes(oldState);\r\n      } else if (type === \"language\") {\r\n        let oldStateF = [...filterlang];\r\n        let val = valindex.split(\" \");\r\n        let filterdLang = countriesWithLang.filter((el) => el.lang === val[0]);\r\n        let filterdchk = oldStateF.filter((el) => el.lang === val[0]);\r\n        if (filterdchk.length === 0) {\r\n          oldStateF.push(filterdLang[0]);\r\n          setFilterLang(oldStateF);\r\n        }\r\n      } else if (type === \"minrank\") {\r\n        setFilterMinRank(rank);\r\n        setPrestigemax(prestigemax);\r\n      } else if (type === \"maxrank\") {\r\n        setFilterMaxRank(rank);\r\n        setPrestigemax(prestigemax);\r\n      } else if (type === \"age\") {\r\n        console.log(type);\r\n        setAgeCheck(!ageCheck);\r\n      } else if (type === \"country\") {\r\n        setFilterCountry(rank);\r\n      }\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    try {\r\n      const { message, messageto, scoutingId } = messageData;\r\n      if (message.trim() && messageto && scoutingId) {\r\n        ContactWithUser(messageData);\r\n        setContact(false);\r\n        setMessageData({ message: \"\", messageto: \"\", scoutingId: \"\" });\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setShow(!show);\r\n  };\r\n\r\n  //This function is used to filter the data -\r\n\r\n  const filterDatav = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      //console.log(filterMinRank);\r\n      const rolesData = filterCheckBoxes\r\n        .filter((el) => el.checked)\r\n        .map((el) => el.role);\r\n      const payload = {\r\n        roles: rolesData,\r\n        language: filterlang,\r\n        minrank:filterMinRank,\r\n        maxrank:filterMaxRank,\r\n        prestigemax:getprestigemax\r\n      };\r\n      const response = await userInstance().post(\"/getfilterdata\", payload,);\r\n      const {\r\n        data: { code, fetchAllCollections },\r\n      } = response;\r\n      if (code === 200) {\r\n        setFetchAllCollections(fetchAllCollections);\r\n      }\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const removeSelected = (type, index) => {\r\n    let oldState = { ...data };\r\n    oldState[type].splice(index, 1);\r\n    setData(oldState);\r\n  };\r\n\r\n  const PropsDataForFilter = {\r\n    username,\r\n    useravatar,\r\n    errors,\r\n    countriesWithLang,\r\n    data,\r\n    show,\r\n    handleClose,\r\n    JoinTeamFinder,\r\n    setSelectData,\r\n    dataFilterType,\r\n    minRank,\r\n    maxRank,\r\n    filterCheckBoxes,\r\n    FilterData,\r\n    filterDatav,\r\n    removeSelected,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <body className=\"soutnig-main-page\" />\r\n      </Helmet>\r\n      <Layout header={true} footer={true}>\r\n        <div className=\"main-wrapper\">\r\n          <LeftSidebar\r\n            mainmenu={true}\r\n            increase={true}\r\n            community={true}\r\n            voiceserver={true}\r\n          />\r\n\r\n          <div className=\"middle-wrapper\">\r\n            <div className=\"scouting-page\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <Filter props={PropsDataForFilter} />\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                  <ScoutnigRight\r\n                    fetchAllCollections={fetchAllCollections}\r\n                    show={contact}\r\n                    handleClose={handleContactOpenClose}\r\n                    setMessage={setMessage}\r\n                    sendMessage={sendMessage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\nexport default Scouting;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\finishedtournaments.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\team\\team.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\checkJoined.jsx",["640"],"import React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport PopupWrapper from \"./popupwrapper\";\nimport user from '../../assets/matchmaking/user-icon.png';\nimport checkimg from '../../assets/matchmaking/check.png';\nimport { FormatTimer } from \"../../function\"\nconst CheckJoinedPopUp = ({ show, handleClose, timer, teamArray, readyPlayer, AcceptReady }) => {\n    return <PopupWrapper show={show} handleClose={handleClose} heading={\"Please confirm to play the game\"} defaultClass={\"outlayed-popup team-popup invitegroup-popup group-popup\"}>\n        <div className=\"check-joined-list\">\n            <div className=\"invite-group\">\n                {teamArray && teamArray.map((el, i) => {\n                    return <TeamArray element={el} index={i} readyPlayer={readyPlayer} />\n                })}\n            </div>\n            <div className=\"check-join-timer\">{FormatTimer(timer ? timer : 0)}</div>\n            <div className=\"teamlist-buuton\">\n                {!readyPlayer && <Button onClick={() => AcceptReady()}>Confirm</Button>}\n            </div>\n        </div>\n    </PopupWrapper>\n}\nexport default CheckJoinedPopUp;\n\nconst TeamArray = ({ element, index }) => {\n    const { ready, userid: { useravatar } } = element;\n    return <div className=\"invitegroup-image\" key={index}>\n        {ready && <img src={checkimg} alt=\"check image\" className=\"check-image\" />}\n        <img src={useravatar ? useravatar : user} alt=\"user\" />\n    </div>\n}","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\premium\\premiumListing.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\insidetournament.jsx",["641","642","643","644"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport history from \"../../config/history\";\r\nimport \"./tournament.css\";\r\nimport Layout from \"../layout/layout\"\r\nimport { Tab } from \"react-bootstrap\";\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport MatchMakingTeam from \"../popups/matchmakingteam\";\r\nimport { tournamentInstance } from \"../../config/axios\";\r\nimport { queryString, Notification, checkPlayersStatus, GetCheckIn } from \"../../function\";\r\nimport UserContext from '../../context/context';\r\nimport TournamentSummary from './summary';\r\nimport TournamentRegistration from './registration';\r\nimport TournamentRules from './rules';\r\nimport TournamentBrakets from './brackets';\r\nimport TournamentTestBrakets from \"./testBracket\";\r\nimport Reward from \"./reward\";\r\nimport { TournamentEvents } from \"../../socket\";\r\nconst TournamentInside = () => {\r\n    const { userDetails: { teams }, loggedIn } = useContext(UserContext);\r\n    const [tournamentData, setTournamentData] = useState({});\r\n    const [showteam, setShowTeam] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [key, setKey] = useState(localStorage.getItem('t_tab_key') ? localStorage.getItem('t_tab_key') : 'summary');\r\n    const [tournamentRules, setTournamentRules] = useState([]);\r\n    const [BracketData, setBracketData] = useState([]);\r\n    const [isExist, setExist] = useState(false);\r\n    const [isCheckIn, setIsCheckIn] = useState(false);\r\n    const [skip, setSkip] = useState(1);\r\n    const [limit, setLimit] = useState(6);\r\n    const [isReadyOpen, setIsReadyOpen] = useState(true);\r\n    const LevelsArray = [\r\n        \"roomsLevelOne\",\r\n        \"roomsLevelTwo\",\r\n        \"roomsLevelThree\",\r\n        \"roomsLevelFour\",\r\n        \"roomsLevelFive\",\r\n        \"roomsLevelSix\",\r\n    ];\r\n\r\n    const nextPage = () => {\r\n        setSkip(skip + limit);\r\n        setLimit(preState => preState + 6)\r\n    }\r\n\r\n    const changePage = (direction) => {\r\n        if (direction == 'back') {\r\n            setSkip(preState => preState - 1)\r\n        } else if (direction == 'next') {\r\n            setSkip(preState => preState + 1)\r\n        }\r\n    }\r\n    const previousPage = () => {\r\n        setSkip(skip - limit)\r\n        setLimit(preState => preState - 6)\r\n    }\r\n\r\n    const TournamentData = async () => {\r\n        try {\r\n            const { tid } = queryString();\r\n            if (tid) {\r\n                const response = await tournamentInstance().get(`/gettournaments/${tid}`);\r\n                let { data: { code, tournamentData, tournamentRules, TournamentDataForBrackets } } = response;\r\n                if (code === 200) {\r\n                    const { playerJoined, checkedInPlayers } = tournamentData;\r\n                    let Players = [];\r\n                    playerJoined.forEach(element => {\r\n                        if (element.UserOrTeam && element.onModel === 'users') {\r\n                            Players.push(element.UserOrTeam);\r\n                        } else if (element.UserOrTeam && element.onModel === 'team') {\r\n                            Players = [...Players, ...element.UserOrTeam.joinedmembers];\r\n                        }\r\n                    });\r\n\r\n                    tournamentData.Players = GetCheckIn(checkedInPlayers, Players);\r\n                    ExistCheck(Players);\r\n                    CheckInCheck(checkedInPlayers);\r\n                    setTournamentData(tournamentData);\r\n                    setTournamentRules(tournamentRules);\r\n                    setBracketData(TournamentDataForBrackets);\r\n\r\n\r\n\r\n                }\r\n            }\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        TournamentData();\r\n        TournamentEvents(() => {\r\n            TournamentData();\r\n        })\r\n    }, []);\r\n    const handleCloseTeam = () => {\r\n        if (loggedIn) {\r\n            setShowTeam(!showteam)\r\n        } else {\r\n            Notification('danger', 'Please try to login and then try to join the tournament !!')\r\n        }\r\n    };\r\n    const JoinWithTeam = async (type, teamid) => {\r\n        //Join with team\r\n        const filterTeam = teams.filter(el => el._id === teamid);\r\n        if (filterTeam.length > 0) {\r\n            const { joinedmembers } = filterTeam[0];\r\n            const { isValid, errors } = checkPlayersStatus(joinedmembers);\r\n            if (!isValid) {\r\n                setErrors(errors)\r\n                return;\r\n            }\r\n            CallJoin(teamid);\r\n        }\r\n    }\r\n    const CallJoin = async (teamid) => {\r\n        const { tid } = queryString();\r\n        if (tid) {\r\n            const payload = { teamid, tid }\r\n            const response = await tournamentInstance().post('/joinTournament', payload);\r\n            const { data: { code, msg, errors } } = response;\r\n            if (code === 200) {\r\n                Notification('success', msg);\r\n                setShowTeam(false);\r\n                setErrors({});\r\n                //TournamentData();\r\n            } else if (code === 201) {\r\n                if (!showteam) {\r\n                    Notification('danger', Object.values(errors)[0]);\r\n                } else {\r\n                    setErrors(errors);\r\n                }\r\n            } else {\r\n                Notification('danger', msg);\r\n            }\r\n        }\r\n    }\r\n    const selectTab = (key) => {\r\n        localStorage.setItem('t_tab_key', key)\r\n        setKey(key);\r\n    }\r\n    const ExistCheck = (players) => {\r\n        const isValid = players.filter(el => el._id === localStorage.getItem('userid'));\r\n        if (isValid.length > 0) {\r\n            setExist(true);\r\n        }\r\n    }\r\n    const CheckInCheck = (checkedInPlayers) => {\r\n        const isValid = checkedInPlayers.filter(el => el._id === localStorage.getItem('userid'));\r\n        if (isValid.length > 0) {\r\n            setIsCheckIn(true);\r\n        }\r\n    }\r\n    const CheckInTournament = async () => {\r\n        const { tid } = queryString();\r\n        if (tid) {\r\n            const response = await tournamentInstance().patch(`/checkInTournament/${tid}`);\r\n            const { data: { code, msg, errors } } = response;\r\n            if (code === 200) {\r\n                Notification('success', msg);\r\n                // TournamentData();\r\n            } else if (code === 201) {\r\n                Notification('danger', Object.values(errors)[0]);\r\n            } else {\r\n                Notification('danger', msg);\r\n            }\r\n        }\r\n    }\r\n    const SeeMyStatus = () => {\r\n        let { Players } = { ...tournamentData };\r\n        Players.forEach(element => {\r\n            if (element._id === localStorage.getItem('userid')) {\r\n                element.isStatus = true;\r\n            }\r\n        });\r\n        setTournamentData({ ...tournamentData, Players })\r\n    }\r\n    const GoToTheRoom = async () => {\r\n        try {\r\n            const { tid } = queryString();\r\n            if (tid) {\r\n                const response = await tournamentInstance().post(`/goToTheRoom/${tid}`);\r\n                const { data: { code, msg, roomid } } = response;\r\n                if (code === 200) {\r\n                    history.push(`/tournamentroom/?id=${roomid}`);\r\n                } else {\r\n                    Notification('danger', msg);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n    return (\r\n        <Layout header={true} footer={true}>\r\n            <div className=\"tournament-inside\">\r\n                <div className=\"main-wrapper\">\r\n                    <div className=\"middle-wrapper\">\r\n                        <div className=\"tournament-tabs\">\r\n                            <Tabs defaultActiveKey={key} id=\"uncontrolled-tab-example\" onSelect={(key) => selectTab(key)}>\r\n                                <Tab eventKey=\"summary\" title=\"Summary\">\r\n                                    <TournamentSummary tournamentData={tournamentData} />\r\n                                </Tab>\r\n                                <Tab eventKey=\"rewards\" title=\"Rewards\">\r\n                                    <Reward tournamentData={tournamentData} />\r\n                                </Tab>\r\n                                <Tab eventKey=\"brackets\" title=\"Brackets\">\r\n                                    <TournamentTestBrakets tournamentData={tournamentData} BracketData={BracketData} LevelsArray={LevelsArray} />\r\n                                    {/* <TournamentBrakets tournamentData={tournamentData} /> */}\r\n                                </Tab>\r\n                                <Tab eventKey=\"registration\" title=\"Registration\">\r\n                                    <TournamentRegistration tournamentData={tournamentData} handleCloseTeam={handleCloseTeam} CallJoin={CallJoin} isExist={isExist} CheckInTournament={CheckInTournament} isCheckIn={isCheckIn} SeeMyStatus={SeeMyStatus} skip={skip} limit={limit} nextPage={nextPage} previousPage={previousPage} changePage={changePage} />\r\n                                </Tab>\r\n                                <Tab eventKey=\"rules\" title=\"Rules\">\r\n                                    <TournamentRules tournamentRules={tournamentRules} />\r\n                                </Tab>\r\n                            </Tabs>\r\n                        </div>\r\n                    </div>\r\n                    {showteam && <MatchMakingTeam show={showteam} handleClose={handleCloseTeam} teams={teams} handleShow={() => { }} RedirectWithTeam={JoinWithTeam} errors={errors} />}\r\n                </div>\r\n            </div>\r\n            {!tournamentData.tournamentEnd && <React.Fragment>\r\n                {tournamentData.tournamentStarted && isExist && <IsReadyComponent isReadyOpen={isReadyOpen} setIsReadyOpen={setIsReadyOpen} GoToTheRoom={GoToTheRoom} />}\r\n            </React.Fragment>}\r\n        </Layout>\r\n    );\r\n};\r\nexport default TournamentInside;\r\n\r\n\r\nconst IsReadyComponent = ({ isReadyOpen, setIsReadyOpen, GoToTheRoom }) => {\r\n    return <div className=\"tournament-match\">\r\n        <i class=\"fa fa-times\" aria-hidden=\"true\" onClick={() => setIsReadyOpen(!isReadyOpen)}></i>\r\n        <h6>Tournament Match is Ready!</h6>\r\n        <p>Come on and join</p>\r\n        <button onClick={() => GoToTheRoom()}>Join</button>\r\n    </div>\r\n}\r\n\r\n\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\advance\\advanceListing.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\loader\\loader.jsx",["645"],"import React from 'react';\r\nimport loader from '../../assets/header/loaderimg.gif';\r\nimport './loader.css';\r\nconst Loader = () => (\r\n    <div className=\"loader\">\r\n      <img src={loader} />\r\n    </div>\r\n  );\r\n\r\n  export default Loader;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sectionincident\\sectionincident.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\profile.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\premium\\premium.jsx",["646","647","648"],"﻿import React, { useState, useEffect, useContext } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport Layout from '../layout/layout';\r\nimport premium from '../../assets/home/premium-icon.png';\r\n// import amount from '../../assets/home/3.png';\r\nimport { userInstance } from '../../config/axios';\r\nimport UserContext from '../../context/context';\r\n\r\nimport './premium.css';\r\nconst Premium = () => {\r\n  const paymentOptionsArray = [\r\n    {\r\n      type: 'Premium- 1Month',\r\n      membershipType: 'premium',\r\n      amount: 8.99,\r\n      cycle: 1,\r\n    },\r\n    {\r\n      type: 'Premium- 3Month',\r\n      amount: 25,\r\n      cycle: 3,\r\n      membershipType: 'premium',\r\n    },\r\n    {\r\n      type: 'Premium- 6Month',\r\n      amount: 50,\r\n      cycle: 6,\r\n      membershipType: 'premium',\r\n    },\r\n  ];\r\n  const {\r\n    userDetails: { ispremium },\r\n    setGlobalLoader,\r\n  } = useContext(UserContext);\r\n  const subScription = async (planname, price, membershipType, cycle) => {\r\n    const plannData = {\r\n      planname: planname,\r\n      price: price,\r\n      membershipType: membershipType,\r\n      cycle: cycle,\r\n    };\r\n    setGlobalLoader(true);\r\n    const response = await userInstance().post('/addsubScription', {\r\n      plannData,\r\n    });\r\n    let { code, link } = response.data;\r\n    if (code === 200) {\r\n      window.location.href = link;\r\n    } else {\r\n      setGlobalLoader(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <body className=\"premium-main-page\" />\r\n      </Helmet>\r\n      <Layout header={true} footer={true}>\r\n        <div className=\"main-wrapper\">\r\n          <div className=\"middle-wrapper\">\r\n            <div className=\"premium-page\">\r\n              <div className=\"incident-heading\">\r\n                <h1>Welcome to the Premium section</h1>\r\n              </div>\r\n              <div className=\"premium-image-section\">\r\n                <img src={premium} alt=\"premiumimage\" />\r\n                <h6>\r\n                  ACCESS THE ADVANTAGES OF BEING <span>PREMIUM</span> and\r\n                  discover everything that can\r\n                </h6>\r\n              </div>\r\n              <div className=\"premium-bottom\">\r\n                <h6>\r\n                  INCLUDES ADVANTAGES FOR CONTENT CREATORS AND MUCH MORE, DO NOT\r\n                  MISS THIS INTERESTING PROMOTION and MAKE A PARTY TO YOUR STAY\r\n                  IN outplayed, ACCESS TO JUICY PRIZES AND ORGANIZED TOURNAMENTS\r\n                  ONLY FOR OUR PREMIUM COMMUNITY\r\n                </h6>\r\n              </div>\r\n              <div className=\"premium-limit\">\r\n                {paymentOptionsArray.map((el, i) => {\r\n                  return (\r\n                    <div className=\"premium-one\">\r\n                      <div className=\"premium-month\">\r\n                        <h6>{el.type}</h6>\r\n                      </div>\r\n                      {ispremium ? (\r\n                        <div className=\"premium-amount\">\r\n                          <h6>\r\n                            {el.amount}{' '}\r\n                            <i class=\"fa fa-eur\" aria-hidden=\"true\"></i>\r\n                          </h6>\r\n                        </div>\r\n                      ) : (\r\n                        <div\r\n                          className=\"premium-amount premium \"\r\n                          onClick={(e) =>\r\n                            subScription(\r\n                              el.type,\r\n                              el.amount,\r\n                              el.membershipType,\r\n                              el.cycle\r\n                            )\r\n                          }\r\n                        >\r\n                          <h6>\r\n                            {el.amount}{' '}\r\n                            <i class=\"fa fa-eur\" aria-hidden=\"true\"></i>\r\n                          </h6>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\nexport default Premium;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\playerDetail.jsx",["649","650"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport Layout from '../layout/layout';\r\nimport { Form } from 'react-bootstrap';\r\nimport { socket, GetCommentData, GetCommentDataOff } from '../../socket';\r\n\r\nimport SocailPost from './postComponent';\r\nimport { userInstance } from '../../config/axios';\r\nimport { Notification } from '../../function';\r\nimport Loader from '../loader/loader';\r\n\r\nconst PlayerPosts = () => {\r\n  const [content, setContent] = useState('');\r\n  const [errors, setErrors] = useState({});\r\n  const [fileError, setFileError] = useState('');\r\n  const [getmedia, setPostMedia] = useState([]);\r\n  const limit = 5;\r\n  const [data, setData] = useState([]);\r\n  const [commenttext, setComment] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [random, setRandom] = useState(Math.random());\r\n\r\n  const [pageCounts, setPageCounts] = useState(0);\r\n\r\n  const [skip, setSkip] = useState(0);\r\n\r\n  const oldDataRef = useRef(data);\r\n\r\n  const ValidatePost = (values) => {\r\n    let errors = {};\r\n    let isValid = true;\r\n    if (!values.content) {\r\n      errors.content = 'Content is required !';\r\n      isValid = false;\r\n    }\r\n    return { isValid: isValid, errors: errors };\r\n  };\r\n\r\n  useEffect(() => {\r\n    AllPost(limit, skip);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [limit, skip]);\r\n\r\n  useEffect(() => {\r\n    oldDataRef.current = data;\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handler = (message) => {\r\n      messageHandler(message, oldDataRef.current, setData);\r\n    };\r\n    GetCommentData(handler);\r\n\r\n    return () => {\r\n      GetCommentDataOff(handler);\r\n    };\r\n  }, []);\r\n\r\n  const messageHandler = (message, oldData, setData) => {\r\n    oldData.forEach((el) => {\r\n      const { postid, getCommentData } = message;\r\n      if (el._id === postid) {\r\n        el.comments.push(getCommentData);\r\n      }\r\n    });\r\n    setData(oldData);\r\n    setRandom(Math.random());\r\n  };\r\n\r\n  const AllPost = async (limit, skip) => {\r\n    try {\r\n      if (limit > 0) {\r\n        const response = await userInstance().get(\r\n          `/allpost?limit=${limit}&skip=${skip}`\r\n        );\r\n        let {\r\n          data: { code, posts, postCounts },\r\n        } = response;\r\n        if (code === 200) {\r\n          setData(posts);\r\n          setPageCounts(postCounts);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  const addPost = async (e) => {\r\n    if (e.key === 'Enter') {\r\n      DirectPost(e);\r\n    }\r\n  };\r\n\r\n  const DirectPost = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const postObj = {\r\n        content: content,\r\n      };\r\n      const validPost = ValidatePost(postObj);\r\n      setErrors(validPost.errors);\r\n      if (!validPost.isValid) {\r\n        return;\r\n      }\r\n      const removeExtraSpace = (s) => s.trim().split(/ +/).join(' ');\r\n      let contents = removeExtraSpace(content);\r\n      if (validPost && contents !== '') {\r\n        const data = new FormData();\r\n\r\n        if (getmedia.length <= 4) {\r\n          for (let i = 0; i < getmedia.length; i++) {\r\n            data.append('file', getmedia[i].image);\r\n          }\r\n        } else {\r\n          setFileError(\r\n            'You cant add more then 5 images please remove some images to upload'\r\n          );\r\n          return;\r\n        }\r\n        setIsLoading(true);\r\n        const saveData = await userInstance().post('/addpostv2', data, {\r\n          params: postObj,\r\n        });\r\n        let { code, msg } = saveData.data;\r\n        if (code === 200) {\r\n          setIsLoading(false);\r\n          AllPost(limit, skip);\r\n          Notification('success', msg);\r\n          setContent('');\r\n          setPostMedia([]);\r\n        } else {\r\n          Notification('success', msg);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  };\r\n  const addComment = async (e, postid) => {\r\n    try {\r\n      e.preventDefault();\r\n      let webtoken = localStorage.getItem('webtoken').toString();\r\n      if (commenttext && commenttext.trim()) {\r\n        socket.emit('SendComment', { message: commenttext, postid, webtoken });\r\n        setComment('');\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  const addPostReact = async (type, postid) => {\r\n    try {\r\n      const playload = { type, postid };\r\n      const result = await userInstance().put('/addpostReact/', { playload });\r\n      let { code } = result.data;\r\n      if (code === 200) {\r\n        AllPost(limit, skip);\r\n      }\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleSelectImages = (files) => {\r\n    try {\r\n      let oldState = [...getmedia];\r\n      const validFileExtensions = [\r\n        'jpg',\r\n        'jpeg',\r\n        'gif',\r\n        'png',\r\n        'mp4',\r\n        'webm',\r\n        'ogg',\r\n      ];\r\n      const imgValidExtensions = ['jpg', 'jpeg', 'gif', 'png'];\r\n      const videoValidExtension = ['mp4', 'webm', 'ogg'];\r\n\r\n      for (let i = 0; i < files.length; i++) {\r\n        const extention = files[i].name.split('.').pop();\r\n\r\n        if (validFileExtensions.includes(extention)) {\r\n          if (\r\n            imgValidExtensions.includes(extention) &&\r\n            files[i].size > 1024 * 1024\r\n          ) {\r\n            setFileError('You can only post images less then 1 mb');\r\n            continue;\r\n          }\r\n\r\n          if (\r\n            videoValidExtension.includes(extention) &&\r\n            files[i].size > 1024 * 1024 * 10\r\n          ) {\r\n            setFileError('You can only post video less then 5 mb');\r\n            continue;\r\n          }\r\n          oldState.push({\r\n            blobUrl: URL.createObjectURL(files[i]),\r\n            image: files[i],\r\n          });\r\n        } else {\r\n          setFileError('Invalid file type');\r\n          continue;\r\n        }\r\n      }\r\n      setPostMedia(oldState);\r\n    } catch (error) {\r\n      console.log(error);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const cancelImage = (index) => {\r\n    let oldState = [...getmedia];\r\n    oldState.splice(index, 1);\r\n    //To remove file error of more the 5 file\r\n    if (oldState.length <= 5) {\r\n      setFileError('');\r\n    }\r\n    setPostMedia(oldState);\r\n  };\r\n\r\n  // const handlePageClick = ({ selected }) => {\r\n  //   setSkip(selected * limit);\r\n  // };\r\n  // const pageCount = Math.ceil(pageCounts / limit);\r\n\r\n  const openCloseComment = (index) => {\r\n    let oldState = [...data];\r\n    const { selected } = oldState[index];\r\n    oldState[index].selected = !selected;\r\n    setData(oldState);\r\n  };\r\n\r\n  const functionProps = {\r\n    openCloseComment,\r\n    addPostReact,\r\n    addComment,\r\n    commenttext,\r\n    setComment,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loader />}\r\n      <Helmet>\r\n        <body className=\"profile-main-page\" />\r\n      </Helmet>\r\n      <Layout header={true} footer={true}>\r\n        <div id={random}>\r\n          <div className=\"new-post\">\r\n            <h6>NEW POST</h6>\r\n            <div className=\"upload-section\">\r\n              <div className=\"msg-txt\">\r\n                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    className=\"textarea-without-resize\"\r\n                    value={content}\r\n                    placeholder=\"Write here....\"\r\n                    onChange={(e) => setContent(e.target.value)}\r\n                    onKeyPress={(e) => addPost(e)}\r\n                  />\r\n                  {errors.content && <p className=\"error\">{errors.content}</p>}\r\n                  {fileError && <p className=\"error\">{fileError}</p>}\r\n                </Form.Group>\r\n              </div>\r\n\r\n              <div className=\"file-upload\">\r\n                <div className=\"upload-new\">\r\n                  <div className=\"add-image\">\r\n                    <label for=\"exampleFormControlFile2\">\r\n                      {' '}\r\n                      <span>\r\n                        <i className=\"fa fa-plus\" />\r\n                      </span>\r\n                      <span>Add Image</span>\r\n                    </label>\r\n                    <Form.File\r\n                      id=\"exampleFormControlFile2\"\r\n                      className=\"browse-input\"\r\n                      label=\"Upload\"\r\n                      name=\"image\"\r\n                      multiple\r\n                      onChange={(e) => handleSelectImages(e.target.files)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <Form.Group>\r\n                  <div className=\"browse-button\">\r\n                    <button className=\"drop-comment\" onClick={DirectPost}>\r\n                      POST\r\n                    </button>\r\n                  </div>\r\n                </Form.Group>\r\n              </div>\r\n            </div>\r\n            <div className=\"upload-btn\">\r\n              <div className=\"upload-more\">\r\n                <div className=\"upload-image-section\">\r\n                  {getmedia &&\r\n                    getmedia.map((imgl, j) => {\r\n                      return (\r\n                        <div className=\"post-images\" key={j}>\r\n                          <i\r\n                            className=\"fa fa-times\"\r\n                            onClick={() => cancelImage(j)}\r\n                          />\r\n                          <img\r\n                            src={imgl.blobUrl}\r\n                            alt=\"uploaded\"\r\n                            style={{ height: '50px', width: '50px' }}\r\n                          />\r\n                        </div>\r\n                      );\r\n                    })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {data &&\r\n            data.map((el, i) => {\r\n              return (\r\n                <SocailPost element={el} index={i} functions={functionProps} />\r\n              );\r\n            })}\r\n        </div>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\nexport default PlayerPosts;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\advance\\advance.jsx",["651"],"﻿import React, { useContext } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport Layout from '../layout/layout';\r\nimport advance from '../../assets/home/advance-icon.png';\r\n// import amount from '../../assets/home/3.png';\r\nimport './advance.css';\r\nimport { userInstance } from '../../config/axios';\r\nimport UserContext from '../../context/context';\r\nimport { Notification } from '../../function/index';\r\n\r\nconst Advance = () => {\r\n  const paymentOptionsArray = [\r\n    {\r\n      type: 'Advance- 1Month',\r\n      membershipType: 'advance',\r\n      amount: 8.99,\r\n      cycle: 1,\r\n    },\r\n    {\r\n      type: 'Advance- 3Month',\r\n      amount: 25,\r\n      cycle: 3,\r\n      membershipType: 'advance',\r\n    },\r\n    {\r\n      type: 'Advance- 6Month',\r\n      amount: 50,\r\n      cycle: 6,\r\n      membershipType: 'advance',\r\n    },\r\n  ];\r\n  const {\r\n    userDetails: { ispremiumadvnaced },\r\n    setGlobalLoader,\r\n  } = useContext(UserContext);\r\n\r\n  const subScription = async (planname, price, membershipType, cycle) => {\r\n    const plannData = {\r\n      planname: planname,\r\n      price: price,\r\n      membershipType: membershipType,\r\n      cycle: cycle,\r\n    };\r\n    setGlobalLoader(true);\r\n    const response = await userInstance().post('/addsubScription', {\r\n      plannData,\r\n    });\r\n    const { code, link } = response.data;\r\n    if (code === 200) {\r\n      window.location.href = link;\r\n    } else {\r\n      setGlobalLoader(false);\r\n      Notification('danger', 'Some error has occured!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <body className=\"premium-main-page\" />\r\n      </Helmet>\r\n      <Layout header={true} footer={true}>\r\n        <div className=\"main-wrapper\">\r\n          <div className=\"middle-wrapper\">\r\n            <div className=\"premium-page advance-page\">\r\n              <div className=\"incident-heading\">\r\n                <h1>Welcome to the Advance section</h1>\r\n              </div>\r\n              <div className=\"premium-image-section advance-image-section\">\r\n                <img src={advance} alt=\"premiumimage\" />\r\n                <h6>\r\n                  ALL <span>ADVANCED</span> OFFERS OFFER THE SAME ADVANTAGES\r\n                  ONLY TIME CHANGES\r\n                </h6>\r\n              </div>\r\n              <div className=\"premium-bottom\">\r\n                <h6>\r\n                  INCLUDES ADVANTAGES FOR CONTENT CREATORS AND MUCH MORE, DO NOT\r\n                  MISS THIS INTERESTING PROMOTION and MAKE A PARTY TO YOUR STAY\r\n                  IN outplayed, ACCESS TO JUICY PRIZES AND ORGANIZED TOURNAMENTS\r\n                  ONLY FOR OUR PREMIUM COMMUNITY\r\n                </h6>\r\n              </div>\r\n              <div className=\"premium-limit\">\r\n                {paymentOptionsArray.map((el, i) => {\r\n                  return (\r\n                    <div className=\"premium-one advance-one\" key={i}>\r\n                      <div className=\"premium-month\">\r\n                        <h6>{el.type}</h6>\r\n                      </div>\r\n                      {ispremiumadvnaced ? (\r\n                        <div className=\"premium-amount\">\r\n                          <h6>\r\n                            {el.amount}{' '}\r\n                            <i class=\"fa fa-eur\" aria-hidden=\"true\"></i>\r\n                          </h6>\r\n                        </div>\r\n                      ) : (\r\n                        <div\r\n                          className=\"premium-amount advance\"\r\n                          onClick={(e) =>\r\n                            subScription(\r\n                              el.type,\r\n                              el.amount,\r\n                              el.membershipType,\r\n                              el.cycle\r\n                            )\r\n                          }\r\n                        >\r\n                          <h6>\r\n                            {el.amount}{' '}\r\n                            <i class=\"fa fa-eur\" aria-hidden=\"true\"></i>\r\n                          </h6>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\nexport default Advance;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\store\\store.jsx",["652","653","654","655"],"import React, { useEffect, useState,useContext } from \"react\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport { Form,Button } from \"react-bootstrap\";\r\nimport \"react-image-lightbox/style.css\";\r\nimport PopupWrapper from \"../popups/popupwrapper\";\r\nimport Layout from '../layout/layout';\r\nimport LeftSidebar from '../sidebar/leftsidebar';\r\nimport counterone from '../../assets/store/counter1.png';\r\nimport WeaponDetail from './storeDetail';\r\nimport './store.css';\r\nimport { userInstance } from \"../../config/axios\";\r\nimport UserContext from '../../context/context';\r\nimport {Notification,productReadmeValidation} from '../../function/index';\r\nimport { countries } from \"countries-list\";  \r\nconst Store = () => {\r\n  const [weaponDetail, setWeaponDetail] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [allproduct, setStore] = useState([]);\r\n  const [allproductCopy, setStoreCopy] = useState([]);\r\n  const [lightboximage,setLightBoxImage]=useState('');\r\n  const [categoryList, setCategoryList] = useState([]);\r\n  const { loggedIn, userDetails} = useContext(UserContext);\r\n  const [readmealert, setReadmeNotification] = useState(false);\r\n  const [noticationMsg, SetnoticationMsg] = useState('');\r\n  const [contactAdd, setcontactAdd] = useState(false);\r\n  const [activeProduct, setActiveProduct] = useState({});  \r\n  const [countriesList, setCountriesList] = useState([]);\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [town, setTown] = useState(); \r\n  const [province, setProvince] = useState(\"\");\r\n  const [direction, setDirection] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n  const {\r\n    coins,onsiteWallet\r\n  } = userDetails;\r\n  //console.log(onsiteWallet);\r\n  const handleOpen = (img) => {\r\n    setLightBoxImage(img);\r\n    setIsOpen(!isOpen);\r\n  }\r\n  useEffect(() => {\r\n    GetAllProducts();\r\n    CategoryListData();\r\n    getCountry();\r\n  }, [])\r\n  const getCountry = () => {\r\n    let oldState = [];\r\n    Object.keys(countries).forEach((element) => {\r\n      oldState.push({\r\n        lang: element,\r\n        name: countries[element].name,\r\n        native: countries[element].native,\r\n      });\r\n    });\r\n    setCountriesList(oldState);\r\n  };\r\n\r\n  const GetAllProducts = async () => {\r\n      const response = await userInstance().get(\"/showproduct\");\r\n      const {\r\n        data: { code, allproducts },\r\n      } = response;\r\n      if (code === 200) {\r\n        setStore(allproducts);\r\n        setStoreCopy(allproducts);\r\n      }\r\n  };\r\n  const CategoryListData = async () => {\r\n    const response = await userInstance().get('/categoryslist');\r\n    const { code, allcategorys } = response.data;\r\n    if (code === 200) {\r\n        setCategoryList(allcategorys);\r\n    }\r\n}\r\n  const handleWeapondetail = () => {\r\n    setWeaponDetail(!weaponDetail);\r\n  };\r\n  const handleActive =(id) =>{\r\n    const oldState = [...categoryList];\r\n    oldState.forEach(el => {\r\n      if (el._id === id) {\r\n      el.active = true;\r\n      } else {\r\n      el.active = false;\r\n      }\r\n   })\r\n   const filteredData= allproductCopy.filter(el => el.catid._id === id);\r\n   setStore(filteredData);\r\n   setCategoryList(oldState);\r\n  }\r\n  const handleReadme = async (totalcoins,pid,type,steamcode,price,admin)=>{\r\n    if(loggedIn){\r\n     if( coins >= totalcoins){\r\n      if(type ==='Steam code'){ \r\n        const  payload={\r\n          totalcoins,\r\n          pid,\r\n          steamcode,\r\n          admin\r\n        }\r\n        const response = await userInstance().post('/readmeProduct',payload);\r\n        let {code,msg}=response.data;\r\n        if(code === 200){\r\n          Notification('success', msg);\r\n        }\r\n      }else{\r\n        setActiveProduct({totalcoins,pid,steamcode,admin});\r\n        setcontactAdd(!contactAdd);\r\n      }\r\n     }else{\r\n      //let missingcoins= totalcoins-coins;\r\n      //SetnoticationMsg(\"You are missing \"+missingcoins+\" coins to redeem this item.\");\r\n       setActiveProduct({price,pid,steamcode,admin});\r\n       SetnoticationMsg('isnotenough');\r\n      setReadmeNotification(!readmealert);\r\n     }\r\n    }else{\r\n      //SetnoticationMsg(\"Please Login !\");\r\n      SetnoticationMsg('islogin');\r\n      setReadmeNotification(!readmealert);\r\n    }\r\n  }\r\n  const hardwareProductReadme = async(e) =>{\r\n      let {totalcoins,pid,steamcode,admin}=activeProduct?activeProduct:'';\r\n      const  payload={\r\n        phone,\r\n        direction,\r\n        province,\r\n        country,\r\n        town,\r\n        totalcoins,\r\n        pid,\r\n        steamcode,\r\n        admin\r\n      }\r\n      const { isValid, errors } = productReadmeValidation(payload);\r\n      if (!isValid) {\r\n          console.log(errors);\r\n          setErrors(errors);\r\n          return;\r\n      }\r\n      const response = await userInstance().post('/readmeProduct',payload);\r\n      let {code,msg}=response.data;\r\n      if(code === 200){\r\n        Notification('success', msg);\r\n        setPhone('');\r\n        setDirection('');\r\n        setProvince('') \r\n        setCountry('');\r\n        setTown('');\r\n        setActiveProduct({});\r\n        setcontactAdd(!contactAdd);\r\n      }\r\n  } \r\n const redeemProductRealMony = async() =>{\r\n  let {price,pid,steamcode,admin}=activeProduct?activeProduct:'';\r\n  if(onsiteWallet >=price){\r\n    const  payload={\r\n      price,\r\n      pid,\r\n      steamcode,\r\n      type:'realmoney',\r\n      admin\r\n    }\r\n    const response = await userInstance().post('/readmeProduct',payload);\r\n    let {code,msg}=response.data;\r\n    if(code === 200){\r\n      Notification('success', msg);\r\n      setActiveProduct({});\r\n      setReadmeNotification(!readmealert);\r\n    }\r\n  }else{\r\n     setActiveProduct({});\r\n     setReadmeNotification(!readmealert);\r\n     Notification('danger', \"You don't  enough balance redeem this product\");\r\n  }\r\n } \r\n  return (\r\n    <Layout header={true} footer={true}>\r\n      <div className=\"store-page\">\r\n        <div className=\"main-wrapper\">\r\n          <LeftSidebar\r\n            mainmenu={true}\r\n            increase={true}\r\n            community={true}\r\n            voiceserver={true}\r\n          />\r\n          <div className=\"middle-wrapper\">\r\n            <div className=\"store-main\">\r\n              <div className=\"tag\">\r\n                 {categoryList && categoryList.map((el,i)=>{\r\n                  return <span  onClick={()=>handleActive(el._id)}><h6 className={el.active?'active':''}>{el.name}</h6></span>\r\n                 })}\r\n              </div>\r\n              <div className=\"counter-section\">\r\n                <h2>Counter Strike: Global Offensive</h2>\r\n                <div className=\"counter-list-area\">\r\n                  {allproduct && allproduct.map((e, i) => {\r\n                   let {image,price,catid,title,content,_id,steamcode,quantity,createdby}=e?e:''\r\n                   let totalpeice=price*500;\r\n                   let type=catid?catid.name:'';\r\n                    return <>\r\n                    {(quantity >0)?<div\r\n                      key={i}\r\n                      className=\"counter-list\"\r\n                      onClick={() => handleOpen(image)}\r\n                    >\r\n                      <div className=\"counter-list-img\">\r\n                        <img src={e.image} alt=\"counter\" />\r\n                        <div className=\"tag\">\r\n                        <h6  onClick={() => handleReadme(totalpeice,_id,type,steamcode,price,createdby._id)} >Redeems </h6>\r\n                          <h6 className=\"active\">{catid?catid.name:'CSGO'}</h6>\r\n                        </div>\r\n                      </div>\r\n                      <div>                    \r\n                      </div>\r\n                      \r\n                      <div className=\"counter-content\">\r\n                        <h6>{title}</h6>\r\n                        <p>CSGO Weapon</p>\r\n                        <div className=\"counter-price\">\r\n                          <h5>\r\n                            <span>F</span>\r\n                            {price} <span>({price*500})</span>\r\n                          </h5>\r\n                          <div className=\"counter-desc\">{content}</div>\r\n                        </div>\r\n                      </div>\r\n                    </div>:''}\r\n                      {/* {isOpen && (\r\n                        <Lightbox\r\n                          mainSrc={lightboximage?lightboximage:counterone}\r\n                          nextSrc={lightboximage?lightboximage:counterone}\r\n                          prevLabel={lightboximage?lightboximage:counterone}\r\n                          onCloseRequest={() => setIsOpen(false)}\r\n                          toolbarButtons={['Readme']}\r\n                        />\r\n                      )} */}\r\n                  </> \r\n                  })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <WeaponDetail show={weaponDetail} handleClose={handleWeapondetail} />\r\n        <PopupWrapper show={readmealert} handleClose={setReadmeNotification}>\r\n          <div className=\"store-popup\">\r\n        \r\n          { noticationMsg === 'isnotenough' ?<div class=\"tag\" onClick={()=>redeemProductRealMony()}>You don't have enough coin . click here to <h6 className=\"active\">Redeems </h6> product  real money</div>  : noticationMsg === 'islogin' ? <p>Please Login !</p> : ''}\r\n             \r\n          </div>\r\n        </PopupWrapper>\r\n        <PopupWrapper show={contactAdd} handleClose={setcontactAdd}>\r\n          <div className=\"store-popup\">\r\n          <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                  <Form.Label>Country</Form.Label> \r\n                  <Form.Control as=\"select\"  required={true} name=\"country\" onChange={({target:{value}}) =>setCountry(value)}>\r\n                    <option>Select Country</option>\r\n                    {countriesList && countriesList.map((el, i) => {\r\n                      return <option value={el.name}  key={i}>{el.name}</option>\r\n                    })}\r\n                  </Form.Control>\r\n            {errors.country && <span style={{ color: 'red' }}>{errors.country}</span>}     \r\n            </Form.Group>\r\n          <Form.Group controlId=\"formBasicloginone\">\r\n            <Form.Label>Town</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Please enter town\"\r\n              name=\"town\"\r\n              required={true}\r\n              autoComplete=\"off\"\r\n              value={town}\r\n              onChange={(e) =>\r\n             setTown(e.target.value)}\r\n            />\r\n              {errors.town && <span style={{ color: 'red' }}>{errors.town}</span>}\r\n          </Form.Group> \r\n          <Form.Group controlId=\"formBasicloginone\">\r\n            <Form.Label>Province</Form.Label>\r\n            <Form.Control type=\"text\" name=\"province\" placeholder=\"Please enter province\" value={province}  required={true} \r\n             onChange={(e) =>setProvince(e.target.value)} />\r\n               {errors.province && <span style={{ color: 'red' }}>{errors.province}</span>}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"formBasicloginone\">\r\n            <Form.Label>Direction</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Please enter direction\"\r\n              name=\"direction\"\r\n              required={true}\r\n              autoComplete=\"off\"\r\n              value={direction}\r\n              onChange={(e) =>\r\n             setDirection(e.target.value)}\r\n            />\r\n             {errors.direction && <span style={{ color: 'red' }}>{errors.direction}</span>} \r\n          </Form.Group> \r\n          <Form.Group controlId=\"formBasicloginone\">\r\n            <Form.Label>Telephone contact</Form.Label>\r\n            <Form.Control type=\"Number\" name=\"phone\" placeholder=\"Please enter number\" value={phone}  required={true} \r\n             onChange={(e) =>setPhone(e.target.value)} />\r\n               {errors.phone && <span style={{ color: 'red' }}>{errors.phone}</span>}\r\n          </Form.Group>\r\n          <p><b>NOTE:</b> The redeemed product may take several weeks to arrive, for any questions, contact an administrator, thank you!</p>\r\n          <div className=\"withdraw-bottom\">\r\n            <button onClick={()=>setcontactAdd()} className=\"btn btn-cancel\">\r\n                Cancel\r\n            </button>\r\n            <button type=\"submit\" onClick={()=>hardwareProductReadme()}  className=\"btn btn-continue\" >\r\n              Confirm\r\n            </button>\r\n          </div>\r\n        </div>\r\n        </PopupWrapper>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nexport default Store;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\servers\\list.jsx",["656","657","658"],"import React, { useEffect, useState } from \"react\";\nimport AdminWrapper from \"../adminwrapper/wrapper\";\nimport { Table, Button, Form } from 'react-bootstrap';\nimport history from \"../../../config/history\";\nimport { adminInstance } from '../../../config/axios';\nimport { Notification } from '../../../function';\n\nconst ServerList = () => {\n    const [allServer, setAllServers] = useState([]);\n    const [allServerCopy, setAllServersCopy] = useState([]);\n    const [search, setSearch] = useState('');\n    useEffect(() => {\n        serverList();\n    }, [])\n    const serverList = async () => {\n        const response = await adminInstance().get('/serverlist');\n        const { code, serverlist } = response.data;\n        if (code === 200) {\n            setAllServers(serverlist);\n            setAllServersCopy(serverlist);\n        }\n    }\n    const delServer = async id => {\n        const payload = { id: id };\n        const response = await adminInstance().delete(`/delserver/${id}`, payload);\n        const { code, msg } = response.data;\n        if (code === 200) {\n            Notification('success', msg);\n        } else {\n            Notification('danger', msg);\n        }\n    };\n\n    return (\n        <AdminWrapper>\n            <div className=\"user-list\">\n                <div className=\"container\">\n                    <h2 className=\"admin-title\">Server List</h2>\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <div className=\"admin-search\">\n                                <Form inline>\n                                    <Button onClick={() => history.push(\"/admin/addserver\")}>Add Server</Button>\n                                </Form>\n                            </div>\n                            <Table striped bordered hover responsive>\n                                <thead>\n                                    <tr>\n                                        <th>S.N</th>\n                                        <th>IP</th>\n                                        <th>PORT</th>\n                                        <th>SSH USER</th>\n                                        <th>SERVER TYPE</th>\n                                        <th>ACTION</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {allServer && allServer.map((el, i) => {\n                                        return <ServerLists element={el} index={i} delServer={delServer} />\n                                    })}\n                                </tbody>\n                            </Table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </AdminWrapper>\n    );\n};\nexport default ServerList;\n\nconst ServerLists = ({ element, index, delServer }) => {\n    const { ip, port, sshuser, servertype, _id } = element;\n    return (\n        <tr key={index}>\n            <td>{index + 1}</td>\n            <td>{ip}</td>\n            <td>{port}</td>\n            <td>{sshuser}</td>\n            <td>{servertype}</td>\n            <td>\n                <div className=\"action-buttons\">\n                    <Button className=\"block-btn\" onClick={() => {\n                        if (\n                            window.confirm(\n                                'Are you sure to delete this server ?'\n                            )\n                        ) {\n                            delServer(_id);\n                        }\n                    }}>Delete</Button>\n                    <Button onClick={() => history.push(`/admin/addserver/?type=edit&id=${_id}`)} className=\"approve-btn\">Views & edit</Button>\n                </div>\n            </td>\n        </tr>\n    )\n}\n\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\addmaps\\list.jsx",["659","660","661","662"],"import React, { useEffect, useState } from \"react\";\nimport AdminWrapper from \"../adminwrapper/wrapper\";\nimport { Table, Button, Form } from 'react-bootstrap';\nimport history from \"../../../config/history\";\nimport { adminInstance } from '../../../config/axios';\nimport { Notification } from '../../../function';\n\nconst MapsList = () => {\n    const [allMpas, setAllMaps] = useState([]);\n    const [allMpasCopy, setAllMpasCopy] = useState([]);\n    const [search, setSearch] = useState('');\n    useEffect(() => {\n        NormalListData();\n    }, [])\n    const NormalListData = async () => {\n        const response = await adminInstance().get('/allmaps');\n        const { code, maps } = response.data;\n        if (code === 200) {\n            setAllMaps(maps);\n            setAllMpasCopy(maps);\n        }\n    }\n    const handleDeleteMap = async (_id) => {\n        const response = await adminInstance().delete(`/deletemap/${_id}`);\n        const { code, msg } = response.data;\n        if (code === 200) {\n            Notification('success', msg);\n            setAllMaps((oldArray) => oldArray.filter((el) => el._id !== _id));\n            setAllMpasCopy((oldArray) => oldArray.filter((el) => el._id !== _id));\n        } else {\n            Notification('danger', msg);\n        }\n    }\n\n    return (\n        <AdminWrapper>\n            <div className=\"user-list\">\n                <div className=\"container\">\n                    <h2 className=\"admin-title\">Maps List</h2>\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <div className=\"admin-search\">\n                                <Form inline>\n                                    <Button onClick={() => history.push(\"/admin/addmaps\")}>Add maps</Button>\n                                </Form>\n                            </div>\n                            <Table striped bordered hover responsive>\n                                <thead>\n                                    <tr>\n                                        <th>S.N</th>\n                                        <th>Image</th>\n                                        <th>Name</th>\n                                        <th>Type</th>\n                                        <th>ACTION</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {allMpas && allMpas.map((el, i) => {\n                                        return <MapList element={el} index={i} handleDeleteMap={handleDeleteMap} />\n                                    })}\n                                </tbody>\n                            </Table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </AdminWrapper>\n    );\n};\nexport default MapsList;\n\nconst MapList = ({ element, index, handleDeleteMap }) => {\n    const { title, _id, imgurl, maptype } = element;\n    return (\n        <tr key={index}>\n            <td>{index + 1}</td>\n            <td><img src={imgurl} className=\"img-size\" /></td>\n            <td>{title}</td>\n            <td>{maptype}</td>\n            <td>\n                <div className=\"action-buttons\">\n                    <Button className=\"block-btn\" onClick={() => {\n                        if (\n                            window.confirm(\n                                'Are you sure to delete this map ?'\n                            )\n                        ) {\n                            handleDeleteMap(_id);\n                        }\n                    }}>Delete</Button>\n                    <Button onClick={() => history.push(`/admin/addmaps/?type=edit&id=${_id}`)} className=\"approve-btn\">Views & edit</Button>\n                </div>\n            </td>\n        </tr>\n    )\n}\n\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\addproduct.jsx",["663","664","665","666"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Form, Button, Dropdown } from 'react-bootstrap';\r\nimport { adminInstance } from '../../../config/axios';\r\nimport { Notification, queryString } from '../../../function';\r\nimport AdminWrapper from \"../adminwrapper/wrapper\";\r\nimport history from '../../../config/history';\r\n    const AddProduct = () => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [check, setCheck] = useState(false);\r\n    const [image, setimage] = useState('');\r\n    const [Productmedia, setMedia] = useState();\r\n    const imgRef = useRef(null);\r\n    const [getProductMedia, setProductMedia] = useState([]);\r\n    const [category, setcategory] = useState('');\r\n    const [categoryID, setcategoryID] = useState('');\r\n    const [categoryList, setCategoryList] = useState();\r\n    const [steamcode, setSteamCode] = useState();\r\n    const [steamcheck, setSteamCheck] = useState(false);\r\n    const [steamcheckType, setSteamCheckType] = useState('Steam code');\r\n    const [quantity, setQuantity] = useState(\"\");\r\n    \r\n    const addProduct = async e => {\r\n    e.preventDefault();\r\n    let checkValid = imgRef.current.files[0].type.split('/');\r\n    const checkValue = checkValid[1]\r\n    if ((checkValue === 'png') || (checkValue === 'jpg') || (checkValue === 'jpeg')) {\r\n    const data = new FormData();\r\n    data.append(\"file\", imgRef.current.files[0]);\r\n    const payload = { title, content,price,media:getProductMedia,catid:categoryID,steamcode,quantity}\r\n    const response = await adminInstance().post(\"/addProduct\", data, {\r\n    params: payload\r\n    });                \r\n    const { code, msg } = response.data;\r\n    if (code === 200) {\r\n    history.push('/admin/store');\r\n    Notification('success', msg);\r\n    }\r\n    } else {\r\n    Notification('warning', 'Please select png or jpg or jpeg type file');\r\n    }\r\n    };\r\n    useEffect(() => {\r\n    const { type, id } = queryString();\r\n    CategoryListData();\r\n    if (type && id) {\r\n    setCheck(true);\r\n    GetStoreData();\r\n    }\r\n    }, []);\r\n    const CategoryListData = async () => {\r\n        const response = await adminInstance().get('/categoryslist');\r\n        const { code, allcategorys } = response.data;\r\n        console.log(allcategorys);\r\n        if (code === 200) {\r\n            setCategoryList(allcategorys);\r\n        }\r\n    }\r\n\r\n    const updateProducts = async (e) => {\r\n    e.preventDefault();\r\n    const { type, id } = queryString();\r\n    if (type && id) {\r\n    let checkValid = imgRef.current.files[0] ? imgRef.current.files[0].type.split('/') : false;\r\n    if (checkValid) {\r\n    const checkValue = checkValid[1]\r\n    if ((checkValue === 'png') || (checkValue === 'jpg') || (checkValue === 'jpeg')) {\r\n    updateFromBoth(id)\r\n    } else {\r\n    Notification('warning', 'Please select png or jpg or jpeg type file');\r\n    }\r\n    } else {\r\n    updateFromBoth(id)\r\n    }\r\n    }\r\n    }\r\n    const updateFromBoth = async (id) => {\r\n    const data = new FormData();\r\n    data.append(\"file\", imgRef.current.files[0]);\r\n    const payload = { title, content,price,media:getProductMedia,catid:categoryID,steamcode,quantity}\r\n    const response = await adminInstance().patch(`/updateProduct/${id}`, data, {\r\n    params: payload\r\n    });\r\n    const { code, msg } = response.data;\r\n    if (code === 200) {\r\n    history.push('/admin/store');\r\n    Notification('success', msg);\r\n    } else {\r\n    Notification('danger', msg);\r\n    }\r\n    }\r\n    const GetStoreData = async () => {\r\n    const { type, id } = queryString();\r\n    if (type && id) {\r\n    const response = await adminInstance().get(`/getProductById/${id}`);     \r\n    const { code, data } = response.data; \r\n    if (code === 200) {\r\n    const { title, content, image,price,media,catid,steamcode,quantity} = data;\r\n    setTitle(title);\r\n    setContent(content);\r\n    setimage(image);\r\n    setPrice(price);\r\n    setMedia(media);\r\n    setcategory(catid.name);\r\n    setcategoryID(catid._id);\r\n    setQuantity(quantity);\r\n    if(steamcode){\r\n      setSteamCheck(true);\r\n      setSteamCode(steamcode);\r\n    }\r\n    }\r\n    }\r\n    }\r\n    const handelChangeMedia = async (e) => {\r\n    const data = new FormData();\r\n    for (let i = 0; i < e.length; i++) {\r\n    data.append(\"file\", e[i]);\r\n    }\r\n    const saveMediaData = await adminInstance().post(\"/uploadMedia\", data, {\r\n    params: \"\"\r\n    }); \r\n    const {code,fileArray} =  saveMediaData.data;\r\n    if (code === 200) {\r\n    setProductMedia(fileArray);\r\n    }\r\n    };\r\n    const removeMedia = async (index) => { \r\n    const {id } = queryString();\r\n    let oldState = [...Productmedia] // make a separate copy of the array\r\n    const response = await adminInstance().put(`/deleteMedia/${index}/${id}`); \r\n    const { code,msg} = response.data;\r\n    if (code === 200) {\r\n    oldState.splice(index, 1);\r\n    setMedia(oldState);\r\n    Notification('success', msg);\r\n    } else {\r\n    Notification('danger', msg);\r\n    } \r\n    }\r\n    const selectcategoryList = (type) => {  \r\n    const oldState = [...categoryList];\r\n    setcategoryID(type);\r\n    oldState.forEach(el => {\r\n    if (el._id === type) {\r\n    if(el.name === 'Steam code'){;\r\n      setSteamCheck(true);\r\n    }else{\r\n      setSteamCheck(false);\r\n    }   \r\n    setcategory(el.name);\r\n    el.active = true;\r\n    } else {\r\n    el.active = false;\r\n    }\r\n    })\r\n    setCategoryList(oldState);\r\n    }\r\nreturn (\r\n<AdminWrapper>\r\n   <div className=\"user-list\">\r\n      <div className=\"container\">\r\n         <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n               <h2>{check ? 'Update' : 'Add'} Product</h2>\r\n               <Form onSubmit={check ? updateProducts : addProduct}>\r\n                  <Form.Group controlId=\"formBasicloginone\">\r\n                     <Form.Label>Title</Form.Label>\r\n                     <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"title\"\r\n                        name=\"title\"\r\n                        autoComplete=\"off\"\r\n                        value={title}\r\n                        required={true}\r\n                        onChange={(e) =>\r\n                     setTitle(e.target.value)}\r\n                     />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formBasicloginone\">\r\n                     <Form.Label>Price</Form.Label>\r\n                     <Form.Control\r\n                        type=\"number\"\r\n                        placeholder=\"Price\"\r\n                        name=\"price\"\r\n                        autoComplete=\"off\"\r\n                        value={price}\r\n                        required={true}\r\n                        onChange={(e) =>\r\n                     setPrice(e.target.value)}\r\n                     />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formBasicloginone\">\r\n                     <Form.Label>Quantity</Form.Label>\r\n                     <Form.Control\r\n                        type=\"number\"\r\n                        placeholder=\"Quantity\"\r\n                        name=\"quantity\"\r\n                        autoComplete=\"off\"\r\n                        value={quantity}\r\n                        required={true}\r\n                        onChange={(e) =>\r\n                        setQuantity(e.target.value)}\r\n                     />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formBasicPassword\">\r\n                     <Form.Label>Content</Form.Label>\r\n                     <Form.Control\r\n                        as=\"textarea\" rows=\"5\"\r\n                        type=\"text\"\r\n                        placeholder=\"Content\"\r\n                        name=\"content\"\r\n                        autoComplete=\"off\"\r\n                        required={true}\r\n                        value={content}\r\n                        onChange={(e) =>\r\n                     setContent(e.target.value)}\r\n                     />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formBasicloginone\">\r\n                     <Dropdown>\r\n                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                           {category?category:'Select category'}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                           {categoryList && categoryList.map((el, i) => {\r\n                           return (\r\n                           <Dropdown.Item key={i} active={el.active} onClick={() => selectcategoryList(el._id)}>{el.name}</Dropdown.Item>\r\n                           )\r\n                           })}\r\n                        </Dropdown.Menu>\r\n                     </Dropdown>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formBasicloginone\">\r\n                    {steamcheck && <div>\r\n                     <Form.Label>Steam code</Form.Label>\r\n                      <input type=\"text\"  name=\"steamcode\" placeholder=\"Steam Code\" value={steamcode} className=\"form-control\" onChange={(e) =>\r\nsetSteamCode(e.target.value)} />\r\n                    </div> }       \r\n                  </Form.Group>\r\n                  \r\n                  <Form.Group controlId=\"formBasicloginone\">\r\n                     {check && \r\n                     <div>\r\n                        {Productmedia && Productmedia.map((el, i) => { \r\n                        return <div className=\"imagebox\"> <i class=\"fa fa-times deletemedia\" aria-hidden=\"true\"  \r\n                           onClick={() => {\r\n                           if (\r\n                           window.confirm(\r\n                           'Are you sure to delete this Image?'\r\n                           )\r\n                           ) {\r\n                           removeMedia(i);\r\n                           }\r\n                           }}\r\n                           ></i> <img src={el} className=\"imagesize\" /> \r\n                        </div>\r\n                        })}\r\n                     </div>\r\n                     }\r\n                     <Form.Label>Select Product Media</Form.Label>\r\n                     <Form.Control\r\n                        type=\"file\"\r\n                        id=\"myfile\"\r\n                        name=\"image\"\r\n                        accept=\"image/*\"\r\n                        multiple\r\n                        onChange={(e) =>\r\n                     handelChangeMedia(e.target.files)}\r\n                     />\r\n                  </Form.Group>\r\n                  <div className=\"\">\r\n                     {check && \r\n                     <div className=\"imagebox\">\r\n                        <img src={image} className=\"imagesize\" />\r\n                     </div>\r\n                     }\r\n                     <span>\r\n                        <Form.File id=\"exampleFormControlFile1\" label=\"Select Product Image\" required={check ? false : true} ref={imgRef} />\r\n                     </span>\r\n                     <div className=\"login-button\">\r\n                        {check ? <Button type=\"submit\" className=\"l-btn\" >\r\n                        Update\r\n                        </Button> : <Button type=\"submit\" className=\"l-btn\" >\r\n                        ADD\r\n                        </Button>}\r\n                     </div>\r\n                  </div>\r\n               </Form>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</AdminWrapper>\r\n);\r\n};\r\nexport default AddProduct;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\addcategory.jsx",["667","668","669","670"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Form, Button, Dropdown } from 'react-bootstrap';\r\nimport { adminInstance } from '../../../config/axios';\r\nimport { Notification, queryString } from '../../../function';\r\nimport AdminWrapper from \"../adminwrapper/wrapper\";\r\nimport history from '../../../config/history';\r\nconst AddCategory = () => {\r\n    const [name, setName] = useState(\"\");\r\n    const [check, setCheck] = useState(false);\r\n    const addCategory = async e => {\r\n        e.preventDefault();\r\n                const payload = { name}\r\n                const response = await adminInstance().post(\"/createcategory\",{name:name});                \r\n                const { code, msg } = response.data;\r\n                if (code === 200) {\r\n                    history.push('/admin/store/category');\r\n                    Notification('success', msg);\r\n                }\r\n    };\r\n    useEffect(() => {\r\n        const { type, id } = queryString();\r\n        if (type && id) {\r\n            setCheck(true);\r\n            GetStoreData();\r\n        }\r\n    }, []);\r\n    const updateCategorys = async (e) => {\r\n        e.preventDefault();\r\n        const { type, id } = queryString();\r\n        if (type && id) {\r\n            updateFromBoth(id)\r\n        }\r\n\r\n    }\r\n    const updateFromBoth = async (id) => {\r\n        const payload = { name}\r\n        const response = await adminInstance().post(\"/updateCategory\",{name:name,id:id}); \r\n        const { code, msg } = response.data;\r\n        if (code === 200) {\r\n            history.push('/admin/store/category');\r\n            Notification('success', msg);\r\n        } else {\r\n            Notification('danger', msg);\r\n        }\r\n    }\r\n\r\n    const GetStoreData = async () => {\r\n        const { type, id } = queryString();\r\n        if (type && id) {\r\n            const response = await adminInstance().get(`/categorybyid/${id}`);        \r\n            const { code, data } = response.data;\r\n            if (code === 200) {\r\n                const { name} = data;\r\n                setName(name);\r\n            }\r\n        }\r\n    } \r\n    return (\r\n        <AdminWrapper>\r\n            <div className=\"user-list\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <h2>{check ? 'Update' : 'Add'} Category</h2>\r\n                            <Form onSubmit={check ? updateCategorys : addCategory}>\r\n                                <Form.Group controlId=\"formBasicloginone\">\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"title\"\r\n                                        name=\"name\"\r\n                                        autoComplete=\"off\"\r\n                                        value={name}\r\n                                        required={true}\r\n                                        onChange={(e) => setName(e.target.value)}\r\n                                    />\r\n                                </Form.Group>\r\n                                <div className=\"\">\r\n                                    \r\n                                    <div className=\"login-button\">\r\n                                        {check ? <Button type=\"submit\" className=\"l-btn\" >\r\n                                            Update\r\n                                    </Button> : <Button type=\"submit\" className=\"l-btn\" >\r\n                                                ADD\r\n                                    </Button>}\r\n                                    </div>\r\n                                </div>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </AdminWrapper>\r\n    );\r\n};\r\nexport default AddCategory;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\admindashboard\\dashboard.jsx",["671"],"import React, { useEffect } from \"react\";\r\nimport AdminWrapper from \"../adminwrapper/wrapper\";\r\n\r\n\r\n\r\nconst AdminDashboard = () => {\r\n    return (\r\n            <AdminWrapper>\r\n\r\n                <div className=\"dashboard\">\r\n\r\n                  \r\n\r\n                    <div className=\"container\">\r\n                    <h2 className=\"admin-title\">Dashboard</h2>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6 col-md-6  col-lg-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row align-items-center\">\r\n                                        <div className=\"col\">\r\n                                            <h6 className=\"text-muted mb-2\">\r\n                                                Total Ads\r\n                                            </h6>\r\n                                            <span className=\"font-weight-600 h4 mb-0\">\r\n                                                12,125\r\n                                            </span>\r\n                                        </div>\r\n\r\n                                        <div class=\"col-auto\">\r\n                                            <span class=\"fa fa-laptop text-muted\"></span>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6 col-md-6  col-lg-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row align-items-center\">\r\n                                        <div className=\"col\">\r\n                                            <h6 className=\"text-muted mb-2\">\r\n                                                Categories\r\n                                            </h6>\r\n\r\n                                            <span className=\"font-weight-600 h4 mb-0\">\r\n                                                569\r\n                                            </span>\r\n                                        </div>\r\n\r\n                                        <div class=\"col-auto\">\r\n                                            <span class=\"fa fa-align-left text-muted\"></span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6 col-md-6  col-lg-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row align-items-center\">\r\n                                        <div className=\"col\">\r\n                                            <h6 className=\"text-muted mb-2\">\r\n                                                Total Buy\r\n                                            </h6>\r\n\r\n                                            <span className=\"font-weight-600 h4 mb-0\">\r\n                                                35.5%\r\n                                            </span>\r\n                                        </div>\r\n\r\n                                        <div class=\"col-auto\">\r\n                                            <span class=\"fa fa-laptop text-muted\"></span>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6 col-md-6  col-lg-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row align-items-center\">\r\n                                        <div className=\"col\">\r\n                                            <h6 className=\"text-muted mb-2\">\r\n                                                Total Sell\r\n                                            </h6>\r\n\r\n                                            <span className=\"font-weight-600 h4 mb-0\">\r\n                                                25.36%\r\n                                            </span>\r\n                                        </div>\r\n\r\n                                        <div class=\"col-auto\">\r\n                                            <span class=\"fa fa-arrow-up text-muted\"></span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"col-sm-6 col-md-6  col-lg-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row align-items-center\">\r\n                                        <div className=\"col\">\r\n                                            <h6 className=\"text-muted mb-2\">\r\n                                                Reviews\r\n                                            </h6>\r\n                                            <span className=\"font-weight-600 h4 mb-0\">\r\n                                                124\r\n                                            </span>\r\n                                        </div>\r\n\r\n                                        <div class=\"col-auto\">\r\n                                            <span class=\"fa fa-thumbs-up text-muted\"></span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6 col-md-6  col-lg-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row align-items-center\">\r\n                                        <div className=\"col\">\r\n                                            <h6 className=\"text-muted mb-2\">\r\n                                               Total Payout\r\n                                            </h6>\r\n\r\n                                            <span className=\"font-weight-600 h4 mb-0\">\r\n                                                $15,233\r\n                                            </span>\r\n                                        </div>\r\n\r\n                                        <div class=\"col-auto\">\r\n                                            <span class=\"fa fa-money text-muted\"></span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6 col-md-6  col-lg-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row align-items-center\">\r\n                                        <div className=\"col\">\r\n                                            <h6 className=\"text-muted mb-2\">\r\n                                                Total User\r\n                                            </h6>\r\n\r\n                                            <span className=\"font-weight-600 h4 mb-0\">\r\n                                               265\r\n                                            </span>\r\n                                        </div>\r\n\r\n                                        <div class=\"col-auto\">\r\n                                            <span class=\"fa fa-user text-muted\"></span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6 col-md-6  col-lg-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row align-items-center\">\r\n                                        <div className=\"col\">\r\n                                            <h6 className=\"text-muted mb-2\">\r\n                                                Block User\r\n                                            </h6>\r\n\r\n                                            <span className=\"font-weight-600 h4 mb-0\">\r\n                                                15\r\n                                            </span>\r\n                                        </div>\r\n                                        <div class=\"col-auto\">\r\n                                            <span class=\"fa fa-ban text-muted\"></span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                  \r\n            </AdminWrapper>      \r\n       \r\n    );\r\n  };\r\n  \r\nexport default AdminDashboard;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\category.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\challenge\\challenge.jsx",["672","673"],"import React, { useEffect } from \"react\";\r\nimport AdminWrapper from \"../adminwrapper/wrapper\";\r\nimport { Table, Button, Modal, Form, FormControl } from 'react-bootstrap';\r\n\r\n\r\nconst AdminChallenge = () => {\r\n    return (\r\n            <AdminWrapper>\r\n\r\n                <div className=\"user-list\">\r\n\r\n                  \r\n\r\n                    <div className=\"container\">\r\n                        <h2 className=\"admin-title\">Challenges</h2>\r\n\r\n                        <div className=\"row\">\r\n                   \r\n                            <div className=\"col-md-12\">\r\n\r\n                                <div className=\"admin-search\">\r\n                                    <Form inline>\r\n                                        <FormControl type=\"text\" placeholder=\"Search Challenge\" className=\"mr-sm-2\" />\r\n                                        <Button>Search</Button>\r\n                                    </Form>\r\n                                </div>\r\n\r\n                            <Table striped bordered hover responsive>\r\n                                    <thead>\r\n                                            <tr>\r\n                                            <th>Title</th>\r\n                                            <th>Price</th>\r\n                                            <th>Category</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n\r\n                                            <tr>\r\n                                            <td>Car for sale</td>\r\n                                            <td>$120</td>\r\n                                            <td>Car</td>\r\n                                            <td>\r\n                                                <div className=\"action-buttons\">\r\n                                                    <Button className=\"block-btn\">Delete</Button>\r\n                                                    <Button className=\"approve-btn\">View</Button>\r\n                                                </div> \r\n                                            </td>\r\n                                            </tr>\r\n\r\n                                            <tr>\r\n                                            <td>Car for sale</td>\r\n                                            <td>$120</td>\r\n                                            <td>Car</td>\r\n                                            <td>\r\n                                                <div className=\"action-buttons\">\r\n                                                    <Button className=\"block-btn\">Delete</Button>\r\n                                                    <Button className=\"approve-btn\">View</Button>\r\n                                                </div> \r\n                                            </td>\r\n                                            </tr>\r\n\r\n                                            <tr>\r\n                                            <td>Car for sale</td>\r\n                                            <td>$120</td>\r\n                                            <td>Car</td>\r\n                                            <td>\r\n                                                <div className=\"action-buttons\">\r\n                                                    <Button className=\"block-btn\">Delete</Button>\r\n                                                    <Button className=\"approve-btn\">View</Button>\r\n                                                </div> \r\n                                            </td>\r\n                                            </tr>\r\n\r\n                                            <tr>\r\n                                            <td>Car for sale</td>\r\n                                            <td>$120</td>\r\n                                            <td>Car</td>\r\n                                            <td>\r\n                                                <div className=\"action-buttons\">\r\n                                                    <Button className=\"block-btn\">Delete</Button>\r\n                                                    <Button className=\"approve-btn\">View</Button>\r\n                                                </div> \r\n                                            </td>\r\n                                            </tr>\r\n\r\n                                            <tr>\r\n                                            <td>Car for sale</td>\r\n                                            <td>$120</td>\r\n                                            <td>Car</td>\r\n                                            <td>\r\n                                                <div className=\"action-buttons\">\r\n                                                    <Button className=\"block-btn\">Delete</Button>\r\n                                                    <Button className=\"approve-btn\">View</Button>\r\n                                                </div> \r\n                                            </td>\r\n                                            </tr>\r\n\r\n\r\n\r\n\r\n                                    </tbody>\r\n                            </Table>\r\n\r\n                            </div>\r\n                        \r\n\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                  \r\n            </AdminWrapper>      \r\n       \r\n    );\r\n  };\r\n  \r\nexport default AdminChallenge;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\purchase-items.jsx",["674","675","676","677","678"],"import React, { useEffect, useState } from \"react\";\r\nimport AdminWrapper from \"../adminwrapper/wrapper\";\r\nimport { Table, Button, Form } from 'react-bootstrap';\r\nimport history from \"../../../config/history\";\r\nimport { adminInstance } from '../../../config/axios';\r\nimport { Notification } from '../../../function';\r\n\r\nconst PurchaseItems = () => {\r\n    const [allitemlist, setStore] = useState([]);\r\n    const [allitemlistCopy, setProductCopy] = useState([]);\r\n    useEffect(() => {\r\n        StoreListData();\r\n    }, [])\r\n    const StoreListData = async () => {\r\n        const response = await adminInstance().get('/allitemPruchesList');\r\n        console.log(response.data);\r\n        const { code, allitemlist } = response.data;\r\n        if (code === 200) {\r\n            setStore(allitemlist);\r\n            setProductCopy(allitemlist);\r\n        }\r\n    }\r\n    return (\r\n        <AdminWrapper>\r\n            <div className=\"user-list\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"admin-title\">All Purchase Items</h2>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                    \r\n                            <Table striped bordered hover responsive>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Product Name</th>\r\n                                        <th>User Name</th>\r\n                                        <th>Address</th>\r\n                                        <th>Phone</th>\r\n                                        <th>Date</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {allitemlist && allitemlist.map((el, i) => {\r\n                                        return <ProductList element={el} index={i}  />\r\n                                    })} \r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </AdminWrapper>\r\n    );\r\n};\r\nexport default PurchaseItems;\r\n\r\nconst ProductList = ({ element, index }) => {\r\n    let {address,createdAt,phone,pid,purchaseby} = element;\r\n    let {title}=pid?pid:{}\r\n    let {username}=purchaseby?purchaseby:{}\r\n    return (\r\n        <tr key={index}>\r\n            <td>{title}</td>\r\n            <td>{username}</td>\r\n            <td>{address}</td>\r\n            <td>{phone}</td>\r\n            <td>{createdAt}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\admincategory\\category.jsx",["679"],"import React, { useEffect, useState } from \"react\";\r\nimport AdminWrapper from \"../adminwrapper/wrapper\";\r\nimport { Table, Button, Form, FormControl } from 'react-bootstrap';\r\nimport history from \"../../../config/history\";\r\nimport { adminInstance } from '../../../config/axios';\r\nimport { Notification } from '../../../function';\r\n\r\nconst AdminCategory = () => {\r\n    const [allnews, setNews] = useState([]);\r\n    const [allnewsCopy, setNewsCopy] = useState([]);\r\n    const [search, setSearch] = useState('');\r\n    useEffect(() => {\r\n        NewsListData();\r\n    }, [])\r\n    const NewsListData = async () => {\r\n        const response = await adminInstance().get('/getnews');\r\n        const { code, allnews } = response.data;\r\n        if (code === 200) {\r\n            setNews(allnews);\r\n            setNewsCopy(allnews);\r\n        }\r\n    }\r\n    const HandlDeleteNews = async (_id) => {\r\n        const response = await adminInstance().delete(`/deletenews/${_id}`);\r\n        const { code, msg } = response.data;\r\n        if (code === 200) {\r\n            Notification('success', msg);\r\n            setNews((oldArray) => oldArray.filter((el) => el._id !== _id));\r\n            setNewsCopy((oldArray) => oldArray.filter((el) => el._id !== _id));\r\n        } else {\r\n            Notification('danger', msg);\r\n        }\r\n    }\r\n    const searchCategory = e => {\r\n        try {\r\n            let { value } = e.target;\r\n            const exp = new RegExp(value.toLowerCase());\r\n            const filteredData = allnewsCopy.filter(item =>\r\n                exp.test(item.category.toLowerCase())\r\n            );\r\n            setNews(filteredData);\r\n            setSearch(value);\r\n        } catch (e) {\r\n            return 0;\r\n        }\r\n    };\r\n    return (\r\n        <AdminWrapper>\r\n            <div className=\"user-list\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"admin-title\">News List</h2>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"admin-search\">\r\n                                <Form inline>\r\n                                    <FormControl type=\"text\" placeholder=\"Search Category\"\r\n                                        value={search} className=\"mr-sm-2\" onChange={(e) => searchCategory(e)} />\r\n                                    <Button onClick={() => history.push(\"/admin/addnews\")}>Add news</Button>\r\n                                </Form>\r\n                            </div>\r\n                            <Table striped bordered hover responsive>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Image</th>\r\n                                        <th>Title</th>\r\n                                        <th>Content</th>\r\n                                        <th>Category</th>\r\n                                        <th>Action</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {allnews && allnews.map((el, i) => {\r\n                                        return <NewsList element={el} index={i} HandlDeleteNews={HandlDeleteNews} />\r\n                                    })}\r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </AdminWrapper>\r\n    );\r\n};\r\nexport default AdminCategory;\r\n\r\nconst NewsList = ({ element, index, HandlDeleteNews }) => {\r\n    const { title, content, _id, category, imgurl } = element;\r\n    return (\r\n        <tr key={index}>\r\n            <td><img src={imgurl} className=\"img-size\" /></td>\r\n            <td>{title.substring(0, 25) + \"...\"}</td>\r\n            <td>{content ? content.substring(0, 45) + '...' : \"\"}</td>\r\n            <td>{category}</td>\r\n            <td>\r\n                <div className=\"action-buttons\">\r\n                    <Button className=\"block-btn\" onClick={() => {\r\n                        if (\r\n                            window.confirm(\r\n                                'Are you sure to delete this news?'\r\n                            )\r\n                        ) {\r\n                            HandlDeleteNews(_id);\r\n                        }\r\n                    }}>Delete</Button>\r\n                    <Button onClick={() => history.push(`/admin/addnews/?type=edit&id=${_id}`)} className=\"approve-btn\">Views & edit</Button>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\userlist\\user.jsx",["680","681","682","683","684","685","686","687","688","689"],"import React, { useEffect ,useState} from \"react\";\r\nimport AdminWrapper from \"../adminwrapper/wrapper\";\r\nimport { Table, Button, Modal, Form, FormControl } from 'react-bootstrap';\r\nimport { adminInstance } from '../../../config/axios';\r\nimport history from \"../../../config/history\";\r\nimport { Notification, queryString } from '../../../function';\r\n\r\n\r\nconst AdminUser = () => {\r\n    const [allalluser, setAlluser] = useState([]);\r\n    const [allalluserCopy, setAlluserCopy] = useState([]);\r\n    const [isturnament, setisTurnament] = useState(false);\r\n    const [isladders, setisLadders] = useState(false);\r\n    useEffect(() => {\r\n        StoreListData();\r\n    }, []);\r\n    const StoreListData = async () => {\r\n        const response = await adminInstance().get('/alluserlist');\r\n        const { code, alluser } = response.data;\r\n        if (code === 200) {\r\n            setAlluser(alluser);\r\n            setAlluserCopy(alluser);\r\n        }\r\n    }\r\n    const isRole = async(type,id,status) =>{\r\n        const response = await adminInstance().post(\"/updateuserRole\",{type:type,id:id,status:status}); \r\n        const { code, msg } = response.data;\r\n        if (code === 200) {\r\n        StoreListData();\r\n        Notification('success', msg);\r\n        } else {\r\n        Notification('danger', msg);\r\n        }\r\n    }\r\n    // const DeleteProduct = async (_id) => {\r\n    //     const response = await adminInstance().delete(`/deleteProduct/${_id}`);\r\n    //     const { code, msg } = response.data;\r\n    //     if (code === 200) {\r\n    //         Notification('success', msg);\r\n    //     } else {\r\n    //         Notification('danger', msg);\r\n    //     }\r\n    // }\r\n    return (\r\n            <AdminWrapper>\r\n\r\n                <div className=\"user-list\">\r\n\r\n                  \r\n\r\n                    <div className=\"container\">\r\n                        <h2 className=\"admin-title\">User List</h2>\r\n\r\n                        <div className=\"row\">\r\n                   \r\n                            <div className=\"col-md-12\">\r\n\r\n                                <div className=\"admin-search\">\r\n                                    <Form inline>\r\n                                        <FormControl type=\"text\" placeholder=\"Search User\" className=\"mr-sm-2\" />\r\n                                        <Button>Search</Button>\r\n                                    </Form>\r\n                                </div>\r\n\r\n                            <Table striped bordered hover responsive>\r\n                                    <thead>\r\n                                            <tr>\r\n                                            <th>Name</th>\r\n                                            <th>Email</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {allalluser && allalluser.map((el, i) => { \r\n                                           let {username,email,isroles,_id,isladders,isturnament} = el?el:{} \r\n                                           let  isladdersStatus=isladders?false:true;\r\n                                           let  isturnamentStaus=isturnament?false:true;\r\n                                           let turnamentmsg=isturnament?'Are you sure to delete Turnament Role?':'Are you sure to Assign Turnament Role?';\r\n                                           let laddermsg=isturnament?'Are you sure to delete Ladder Role?':'Are you sure to Assign Ladder Role?';\r\n                                       return (<>\r\n                                               <tr>\r\n                                            <td>{username}</td>\r\n                                            <td>{email}</td>\r\n                                            <td>\r\n                                                <div className=\"action-buttons\">\r\n                                                    {/* <Button className=\"block-btn\" onClick={() => {\r\n                                                    if (\r\n                                                    window.confirm(\r\n                                                    'Are you sure to delete this Product?'\r\n                                                    )\r\n                                                    ) {\r\n                                                    DeleteProduct(_id);\r\n                                                    }\r\n                                                    }}>Delete</Button> */}\r\n                                                   {/* { <Button className=\"block-btn\">Block</Button>\r\n                                                    <Button className=\"approve-btn\">Approved</Button>} */}\r\n                                                    <Button  onClick={() => { if (\r\n                                                    window.confirm(\r\n                                                        turnamentmsg\r\n                                                    )\r\n                                                    ) {\r\n                                                    isRole('isturnament',_id,isturnamentStaus);\r\n                                                    }\r\n                                                    }}  className= {isturnament?'block-btn':'approve-btn'}> {isturnament?'Remove Turnament':'Assign Turnament'}</Button>\r\n                                                    <Button onClick={() => { if (\r\n                                                    window.confirm(\r\n                                                    'Are you sure to Assign Ladder Role?'\r\n                                                    )\r\n                                                    ) {\r\n                                                    isRole('isladders',_id,isladdersStatus);\r\n                                                    }\r\n                                                    }} className={isladders?'block-btn':'approve-btn'}> \r\n                                                     {isladders?'Remove Ladders':'Assign Ladders'} \r\n                                                      </Button>\r\n                                                </div> \r\n                                            </td>\r\n                                            </tr>\r\n                                         </>\r\n                                           )})}\r\n                                    </tbody>\r\n                            </Table>\r\n\r\n                            </div>\r\n                        \r\n\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                  \r\n            </AdminWrapper>      \r\n       \r\n    );\r\n  };\r\n  \r\nexport default AdminUser;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\tournament\\addtournament.jsx",["690","691","692","693"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { Form, Button, Dropdown } from 'react-bootstrap'\r\nimport { adminInstance } from '../../../config/axios'\r\nimport { Notification, queryString } from '../../../function'\r\nimport AdminWrapper from '../adminwrapper/wrapper'\r\nimport history from '../../../config/history'\r\nimport DateTimePicker from \"react-datetime-picker\";\r\nconst Addtournament = () => {\r\n  const [title, setTitle] = useState('') \r\n  const [price, setPrice] = useState('')\r\n  const [startdate, setStartDate] = useState(new Date());\r\n  const [check, setCheck] = useState(false)\r\n  const [image, setimage] = useState('')\r\n  const imgRef = useRef(null);\r\n  const [playerNumbers, setPlayerNumbers] = useState('')\r\n  const [gameType, setgameType] = useState('')\r\n  const [tournamentType, setTournamenttype] = useState([{type:'Premium',active:false},{type:'Premium/advanced',active:false},{type:'Normal',active:false}]);\r\n  const [TrnType, setTrntype] = useState('Normal');\r\n  const [upoadimage, setUploadimage] = useState(false);\r\n  const addProduct = async (e) => {\r\n    e.preventDefault()\r\n    const payload = {\r\n      title,\r\n      tournamentStart:startdate,\r\n      tournamentPrize:price,\r\n      playerNumbers,\r\n      gameType,\r\n      tournamentType:TrnType\r\n    }\r\n      let checkValid = imgRef.current.files[0].type.split('/')\r\n      const checkValue = checkValid[1]\r\n      if (checkValue === 'png' || checkValue === 'jpg' || checkValue === 'jpeg') {\r\n        const data = new FormData()\r\n        data.append('file', imgRef.current.files[0])\r\n        const response = await adminInstance().post(\"/createTournament\", data, {\r\n          params: payload\r\n          });\r\n        const { code, msg } = response.data\r\n        if (code === 200) {\r\n          history.push('/admin/tournament')\r\n          Notification('success', msg)\r\n        }\r\n      } else {\r\n        Notification('warning', 'Please select png or jpg or jpeg type file')\r\n      }\r\n    }\r\n\r\n  useEffect(() => {\r\n    const { type, id } = queryString()\r\n    if (type && id) {\r\n      setCheck(true)\r\n      GetStoreData()\r\n    }\r\n  }, [])\r\n  const updateProducts = async (e) => {\r\n    e.preventDefault()\r\n    const { type, id } = queryString()\r\n    if (type && id) {\r\n      let checkValid = imgRef.current.files[0]\r\n        ? imgRef.current.files[0].type.split('/')\r\n        : false\r\n      if (checkValid) {\r\n        const checkValue = checkValid[1]\r\n        if (\r\n          checkValue === 'png' ||\r\n          checkValue === 'jpg' ||\r\n          checkValue === 'jpeg'\r\n        ) {\r\n          updateFromBoth(id)\r\n        } else {\r\n          Notification('warning', 'Please select png or jpg or jpeg type file')\r\n        }\r\n      } else {\r\n        updateFromBoth(id)\r\n      }\r\n    }\r\n  }\r\n  const updateFromBoth = async (id) => {\r\n    const data = new FormData()\r\n    data.append('file', imgRef.current.files[0])\r\n    const payload = {\r\n      title,\r\n      tournamentStart:startdate,\r\n      tournamentPrize:price,\r\n      playerNumbers,\r\n      gameType,\r\n      tournamentType:TrnType\r\n    }\r\n    const response = await adminInstance().patch(`/updateTurnament/${id}`, data, {\r\n      params: payload,\r\n    })\r\n    const { code, msg } = response.data\r\n    if (code === 200) {\r\n      history.push('/admin/tournament')\r\n      Notification('success', msg)\r\n    } else {\r\n      Notification('danger', msg)\r\n    }\r\n  }\r\n  const GetStoreData = async () => {\r\n    const { type, id } = queryString()\r\n    if (type && id) {\r\n      const response = await adminInstance().get(`/getTournamentById/${id}`)\r\n      const { code, data } = response.data\r\n      if (code === 200) {\r\n        const {\r\n          banner,\r\n          gameType,\r\n          playerNumbers,\r\n          title,\r\n          tournamentPrize,\r\n          tournamentStart,\r\n          tournamentType\r\n        } = data\r\n          setTitle(title);\r\n          setPrice(tournamentPrize);\r\n          setimage(banner);\r\n          setPlayerNumbers(playerNumbers);\r\n          setgameType(gameType);\r\n          setTrntype(tournamentType);\r\n       \r\n          setStartDate(new Date(tournamentStart));\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  const selectTournamentType = (type) => {  \r\n   const oldState = [...tournamentType];\r\n   setTrntype(type);\r\n   oldState.forEach(el => {\r\n   if (el.type === type) {\r\n      el.active = true;\r\n   } else {\r\n      el.active = false;\r\n   }\r\n   })\r\n   setTournamenttype(oldState);\r\n   }\r\n  const selectTournamentGameType = (type) => {\r\n    setgameType(type)\r\n  }\r\n  \r\n  const SelectDate = (tournamentDate) => {\r\n    setStartDate(tournamentDate)\r\n}\r\n\r\n  return (\r\n    <AdminWrapper>\r\n      <div className='user-list'>\r\n        <div className='container'>\r\n          <div className='row'>\r\n            <div className='col-md-12'>\r\n              <h2>{check ? 'Update' : 'Add'} Tournament</h2>\r\n              <Form onSubmit={check ? updateProducts : addProduct}>\r\n                <Form.Group controlId='formBasicloginone'>\r\n                  <Form.Label>Tournament Name</Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    placeholder='title'\r\n                    name='title'\r\n                    autoComplete='off'\r\n                    value={title}\r\n                    required={true}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId='formBasicloginone'>\r\n                  <Form.Label>Tournament Prize</Form.Label>\r\n                  <Form.Control\r\n                    type='number'\r\n                    placeholder='Price'\r\n                    name='price'\r\n                    autoComplete='off'\r\n                    value={price}\r\n                    required={true}\r\n                    onChange={(e) => setPrice(e.target.value)}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId='formBasicloginone'>\r\n                  <Form.Label>Set Max Teams</Form.Label>\r\n                  <Form.Control\r\n                    type='number'\r\n                    placeholder='Set max teams'\r\n                    name='playerNumbers'\r\n                    autoComplete='off'\r\n                    value={playerNumbers}\r\n                    required={true}\r\n                    onChange={(e) => setPlayerNumbers(e.target.value)}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicloginone\">\r\n                    <Form.Label>Start Date: </Form.Label><br/>\r\n                    <DateTimePicker\r\n                        value={startdate}\r\n                        selected={startdate}\r\n                        onChange={SelectDate}\r\n                        minDate={new Date()}\r\n                        className=\"start-date\"\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group controlId='formBasicloginone'>\r\n                  <Dropdown>\r\n                    <Dropdown.Toggle variant='secondary' id='dropdown-basic'>                     \r\n                      {TrnType?TrnType:'Tournament type'}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      {tournamentType &&\r\n                        tournamentType.map((el, i) => {\r\n                          return (\r\n                            <Dropdown.Item\r\n                              key={i}\r\n                              active={el.active}\r\n                              onClick={() => selectTournamentType(el.type)} >\r\n                              {el.type}\r\n                            </Dropdown.Item>\r\n                          )\r\n                        })}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </Form.Group>\r\n                <Form.Group\r\n                  controlId='formBasicloginone'\r\n                  className='inline-check'\r\n                >\r\n                  <div className='check-field'>\r\n                    <input\r\n                      type='checkbox'\r\n                      name='type'\r\n                      value='1vs1'\r\n                      checked={gameType === '1vs1' ? true : false}\r\n                      onChange={() => selectTournamentGameType('1vs1')}\r\n                    />\r\n                    1 vs 1\r\n                    <input\r\n                      type='checkbox'\r\n                      name='type'\r\n                      value='5vs5'\r\n                      checked={gameType === '5vs5' ? true : false}\r\n                      onChange={() => selectTournamentGameType('5vs5')}\r\n                    />\r\n                    5 vs 5\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <div className=''>\r\n                  {check && (\r\n                    <div className='imagebox'>\r\n                      <img src={image} className='imagesize' />\r\n                    </div>\r\n                  )}\r\n                  <span>\r\n                    <Form.File\r\n                      id='exampleFormControlFile1'\r\n                      label='Tournament banner'\r\n                      ref={imgRef}\r\n                      required={check ? false : true} ref={imgRef}\r\n                    />\r\n                  </span>\r\n                  <div className='login-button'>\r\n                    {check ? (\r\n                      <Button type='submit' className='l-btn'>\r\n                        Update\r\n                      </Button>\r\n                    ) : (\r\n                      <Button type='submit' className='l-btn'>\r\n                        ADD\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </AdminWrapper>\r\n  )\r\n}\r\nexport default Addtournament\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\admincategory\\addnews.jsx",["694","695"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { Form, Button, Dropdown } from 'react-bootstrap';\nimport { adminInstance } from '../../../config/axios';\nimport { Notification, queryString } from '../../../function';\nimport AdminWrapper from \"../adminwrapper/wrapper\";\nimport history from '../../../config/history';\n\nconst AddNews = () => {\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    const [category, setCategory] = useState(\"Select category\");\n    const [check, setCheck] = useState(false);\n    const [imgurl, setImgUrl] = useState('');\n    const [categoryList, setCategoryList] = useState([{ type: 'Tournaments', active: false }, { type: 'Ladders', active: false }, { type: 'Gathers', active: false }, { type: 'Matchmaking', active: false }]);\n    const imgRef = useRef(null);\n    const addNews = async e => {\n        e.preventDefault();\n        if (category !== 'Select category') {\n            let checkValid = imgRef.current.files[0].type.split('/');\n            const checkValue = checkValid[1]\n            if ((checkValue === 'png') || (checkValue === 'jpg') || (checkValue === 'jpeg')) {\n                const data = new FormData();\n                data.append(\"file\", imgRef.current.files[0]);\n                const payload = { title, content, category, }\n                const response = await adminInstance().post(\"/addnews\", data, {\n                    params: payload\n                });\n                const { code, msg } = response.data;\n                if (code === 200) {\n                    history.push('/admin/category');\n                    Notification('success', msg);\n                }\n            } else {\n                Notification('warning', 'Please select png or jpg or jpeg type file');\n            }\n        } else {\n            Notification('warning', 'Please select news category');\n        }\n\n    };\n\n    useEffect(() => {\n        const { type, id } = queryString();\n        if (type && id) {\n            setCheck(true);\n            GetNesData();\n        }\n    }, []);\n    const updateNews = async (e) => {\n        e.preventDefault();\n        const { type, id } = queryString();\n        if (type && id) {\n            if (category !== 'Select category') {\n                let checkValid = imgRef.current.files[0] ? imgRef.current.files[0].type.split('/') : false;\n                if (checkValid) {\n                    const checkValue = checkValid[1]\n                    if ((checkValue === 'png') || (checkValue === 'jpg') || (checkValue === 'jpeg')) {\n                        updateFromBoth(id)\n                    } else {\n                        Notification('warning', 'Please select png or jpg or jpeg type file');\n                    }\n                } else {\n                    updateFromBoth(id)\n                }\n            } else {\n                Notification('warning', 'Please select news category');\n            }\n        }\n\n    }\n    const updateFromBoth = async (id) => {\n        const data = new FormData();\n        data.append(\"file\", imgRef.current.files[0]);\n        const payload = { title, content, category, }\n        const response = await adminInstance().patch(`/updatenews/${id}`, data, {\n            params: payload\n        });\n        const { code, msg } = response.data;\n        if (code === 200) {\n            Notification('success', msg);\n        } else {\n            Notification('danger', msg);\n        }\n    }\n    const GetNesData = async () => {\n        const { type, id } = queryString();\n        if (type && id) {\n            const response = await adminInstance().get(`/getnewsdata/${id}`);\n            const { code, data } = response.data;\n            if (code === 200) {\n                const { title, content, imgurl, category } = data;\n                setTitle(title);\n                setContent(content);\n                selectCategory(category);\n                setImgUrl(imgurl);\n            }\n        }\n    }\n    const selectCategory = (type) => {\n        const oldState = [...categoryList];\n        oldState.forEach(el => {\n            if (el.type === type) {\n                setCategory(type);\n                el.active = true;\n            } else {\n                el.active = false;\n            }\n        })\n        setCategoryList(oldState);\n    }\n    return (\n        <AdminWrapper>\n            <div className=\"user-list\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h2>{check ? 'Update' : 'Add'} News</h2>\n                            <Form onSubmit={check ? updateNews : addNews}>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Form.Label>Title</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"title\"\n                                        name=\"title\"\n                                        autoComplete=\"off\"\n                                        value={title}\n                                        required={true}\n                                        onChange={(e) => setTitle(e.target.value)}\n                                    />\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Dropdown>\n                                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\n                                            {category}\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            {categoryList && categoryList.map((el, i) => {\n                                                return (\n                                                    <Dropdown.Item key={i} active={el.active} onClick={() => selectCategory(el.type)}>{el.type}</Dropdown.Item>\n                                                )\n                                            })}\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicPassword\">\n                                    <Form.Label>Content</Form.Label>\n                                    <Form.Control\n                                        as=\"textarea\" rows=\"5\"\n                                        type=\"text\"\n                                        placeholder=\"Content\"\n                                        name=\"content\"\n                                        autoComplete=\"off\"\n                                        required={true}\n                                        value={content}\n                                        onChange={(e) => setContent(e.target.value)}\n                                    />\n                                </Form.Group>\n                                <div className=\"\">\n                                    {check && <div className=\"imagebox\">\n                                        <img src={imgurl} className=\"imagesize\" />\n                                    </div>}\n                                    <span> <Form.File id=\"exampleFormControlFile1\" label=\"Select image\" required={check ? false : true} ref={imgRef} /></span>\n                                    <div className=\"login-button\">\n                                        {check ? <Button type=\"submit\" className=\"l-btn\" >\n                                            Update\n                                    </Button> : <Button type=\"submit\" className=\"l-btn\" >\n                                                ADD\n                                    </Button>}\n                                    </div>\n                                </div>\n                            </Form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </AdminWrapper>\n    );\n};\nexport default AddNews;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\adminlogin\\login.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\createnormalhub\\normalhublist.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\createnormalhub\\normalhub.jsx",["696"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Dropdown } from 'react-bootstrap';\nimport { adminInstance } from '../../../config/axios';\nimport { Notification, queryString, validateNormalHub } from '../../../function';\nimport AdminWrapper from \"../adminwrapper/wrapper\";\nimport history from '../../../config/history';\n\nconst NormalHub = () => {\n    const [name, setName] = useState(\"\");\n    const [prestige, setPrestige] = useState(\"Please select prestige\");\n    const [check, setCheck] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    const [prestigeList, setPristigeList] = useState([{ type: 'Prestige 1', active: false }, { type: 'Prestige 2', active: false }, { type: 'Prestige 3', active: false }, { type: 'Prestige 4', active: false }, { type: 'Prestige 5', active: false }, { type: 'Prestige 6', active: false }, { type: 'Prestige 7', active: false }, { type: 'Prestige 8', active: false }, { type: 'Prestige 9', active: false }, { type: 'Prestige 10', active: false }]);\n    const addNormalHub = async e => {\n        e.preventDefault();\n        const { isValid, errors } = validateNormalHub({ name, prestige });\n        if (!isValid) {\n            setErrors(errors)\n            return;\n        }\n        const response = await adminInstance().post('/createnormalhub', { name, prestige });\n        const { data: { code, msg } } = response;\n        if (code === 200) {\n            Notification('success', msg);\n            history.push('/admin/hubslist');\n        } else {\n            Notification('danger', msg);\n        }\n    };\n    useEffect(() => {\n        const { type, id } = queryString();\n        if (type && id) {\n            setCheck(true);\n            GetNormalHubsData();\n        }\n    }, []);\n    const updateNormalHub = async (e) => {\n        e.preventDefault();\n        const { type, id } = queryString();\n        if (type && id) {\n            const payload = { hubid: id, name, prestige };\n            const { isValid, errors } = validateNormalHub(payload);\n            if (!isValid) {\n                setErrors(errors)\n                return;\n            }\n            const response = await adminInstance().patch(\"/updatenormalhub\", payload);\n            const { data: { code, msg } } = response;\n            if (code === 200) {\n                Notification('success', msg);\n            } else {\n                Notification('danger', msg);\n            }\n        }\n    }\n\n    const GetNormalHubsData = async () => {\n        const { type, id } = queryString();\n        if (type && id) {\n            const response = await adminInstance().get(`/normalhubbyid/${id}`);\n            const { code, data } = response.data;\n            if (code === 200) {\n                const { name, prestige } = data;\n                setName(name);\n                setPrestige(prestige);\n                selectPrestigeList(prestige);\n            }\n        }\n    }\n    const selectPrestigeList = (type) => {\n        const oldState = [...prestigeList];\n        oldState.forEach(el => {\n            if (el.type === type) {\n                setPrestige(type);\n                el.active = true;\n            } else {\n                el.active = false;\n            }\n        })\n        setPristigeList(oldState);\n    }\n    return (\n        <AdminWrapper>\n            <div className=\"user-list\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h2>{check ? 'Update' : 'Add'} Normal Hub</h2>\n                            <Form onSubmit={check ? updateNormalHub : addNormalHub}>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Form.Label>Name</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"title\"\n                                        name=\"Hub name\"\n                                        autoComplete=\"off\"\n                                        value={name}\n                                        onChange={(e) => setName(e.target.value)}\n                                    />\n                                    {errors.name && <span style={{ color: 'red' }}>{errors.name}</span>}\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Dropdown>\n                                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\n                                            {prestige}\n                                        </Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            {prestigeList && prestigeList.map((el, i) => {\n                                                return (\n                                                    <Dropdown.Item key={i} active={el.active} onClick={() => selectPrestigeList(el.type)}>{el.type}</Dropdown.Item>\n                                                )\n                                            })}\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                    {errors.prestige && <span style={{ color: 'red' }}>{errors.prestige}</span>}\n                                </Form.Group>\n                                <div className=\"\">\n                                    <div className=\"login-button\">\n                                        {check ? <Button type=\"submit\" className=\"l-btn\" >\n                                            Update Normal Hub\n                                    </Button> : <Button type=\"submit\" className=\"l-btn\" >\n                                                ADD Normal Hub\n                                    </Button>}\n                                    </div>\n                                </div>\n                            </Form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </AdminWrapper>\n    );\n};\nexport default NormalHub;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\privateroute\\index.js",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\function\\index.js",["697","698","699","700","701","702","703","704","705","706","707","708","709"],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\socket\\index.js",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\store\\index.jsx",["710","711"],"import React, { useEffect, useState } from \"react\";\r\nimport AdminWrapper from \"../adminwrapper/wrapper\";\r\nimport { Table, Button, Form } from 'react-bootstrap';\r\nimport history from \"../../../config/history\";\r\nimport { adminInstance } from '../../../config/axios';\r\nimport { Notification } from '../../../function';\r\n\r\nconst ProductStore = () => {\r\n    const [allproduct, setStore] = useState([]);\r\n    const [allproductCopy, setProductCopy] = useState([]);\r\n    useEffect(() => {\r\n        StoreListData();\r\n    }, [])\r\n    const StoreListData = async () => {\r\n        const response = await adminInstance().get('/getProduct');\r\n        const { code, allproduct } = response.data;\r\n        if (code === 200) {\r\n            setStore(allproduct);\r\n            setProductCopy(allproduct);\r\n        }\r\n    }\r\n    const DeleteProduct = async (_id) => {\r\n        const response = await adminInstance().delete(`/deleteProduct/${_id}`);\r\n        const { code, msg } = response.data;\r\n        if (code === 200) {\r\n            Notification('success', msg);\r\n            setStore((oldArray) => oldArray.filter((el) => el._id !== _id));\r\n            setProductCopy((oldArray) => oldArray.filter((el) => el._id !== _id));\r\n        } else {\r\n            Notification('danger', msg);\r\n        }\r\n    }\r\n    return (\r\n        <AdminWrapper>\r\n            <div className=\"user-list\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"admin-title\">All Product</h2>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"admin-search\">\r\n                                <Form inline>\r\n                                    <Button onClick={() => history.push(\"/admin/addproduct\")}>Add Product</Button>\r\n                                </Form>\r\n                            </div>\r\n                            <Table striped bordered hover responsive>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Image</th>\r\n                                        <th>Title</th>\r\n                                        <th>Content</th>\r\n                                        <th>Price</th>\r\n                                        <th>Quantity</th>\r\n                                        <th>Category</th>\r\n                                        <th>Action</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {allproduct && allproduct.map((el, i) => {\r\n                                        return <ProductList element={el} index={i} DeleteProduct={DeleteProduct} />\r\n                                    })}\r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </AdminWrapper>\r\n    );\r\n};\r\nexport default ProductStore;\r\n\r\nconst ProductList = ({ element, index, DeleteProduct }) => {\r\n    const { title, content, _id, price, image,catid,quantity} = element;\r\n    return (\r\n        <tr key={index}>\r\n            <td><img src={image} className=\"img-size\" /></td>\r\n            <td>{title.substring(0, 25) + \"...\"}</td>\r\n            <td>{content ? content.substring(0, 45) + '...' : \"\"}</td>\r\n            <td>{price}</td>\r\n            <td>{quantity}</td>\r\n            <td>{catid?catid.name:''}</td>\r\n            <td>\r\n                <div className=\"action-buttons\">\r\n                    <Button className=\"block-btn\" onClick={() => {\r\n                        if (\r\n                            window.confirm(\r\n                                'Are you sure to delete this Product?'\r\n                            )\r\n                        ) {\r\n                            DeleteProduct(_id);\r\n                        }\r\n                    }}>Delete</Button>\r\n                    <Button onClick={() => history.push(`/admin/addproduct/?type=edit&id=${_id}`)} className=\"approve-btn\">Views & edit</Button>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\servers\\index.jsx",["712"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button } from 'react-bootstrap';\nimport { adminInstance } from '../../../config/axios';\nimport { Notification, queryString } from '../../../function';\nimport AdminWrapper from \"../adminwrapper/wrapper\";\nimport history from '../../../config/history';\n\nlet initialState = {\n    ip: \"\",\n    port: \"\",\n    rconpassword: \"\",\n    sshuser: \"\",\n    sshpassword: \"\",\n    servertype: \"\"\n}\n\nconst AddServer = () => {\n    const [serverData, setServerData] = useState(initialState);\n    const [check, setCheck] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    useEffect(() => {\n        const { type, id } = queryString();\n        if (type && id) {\n            setCheck(true);\n            GetServerData();\n        }\n    }, []);\n\n    const GetServerData = async () => {\n        try {\n            const { type, id } = queryString();\n            if (type && id) {\n                const response = await adminInstance().get(`/serverget/${id}`);\n                const { code, serverdata } = response.data;\n                if (code === 200) {\n                    setServerData(serverdata);\n                }\n            }\n\n        } catch (error) {\n            return error;\n        }\n\n    }\n    // const delServer = async id => {\n    //     const payload = { id: id };\n    //     const response = await adminInstance().post(\"/delserver\", payload);\n    //     const { code, msg } = response.data;\n    //     if (code === 200) {\n    //         Notification('success', msg);\n    //     } else {\n    //         Notification('danger', msg);\n    //     }\n    // };\n\n    const onChange = e => {\n        setServerData({ ...serverData, [e.target.name]: e.target.value });\n    };\n\n    const addServer = async (e) => {\n        e.preventDefault()\n        const response = await adminInstance().post(\"/addserver\", serverData);\n        const { code, msg } = response.data;\n        if (code === 200) {\n            Notification('success', msg);\n            history.push('/admin/serverlist');\n        } else {\n            Notification('danger', msg);\n        }\n    };\n\n    const updateServer = async (e) => {\n        e.preventDefault()\n        const { type, id } = queryString();\n        if (type && id) {\n            const response = await adminInstance().patch(`/updateserver/${id}`, serverData);\n            const { code, msg } = response.data;\n            if (code === 200) {\n                Notification('success', msg);\n                history.push('/admin/serverslist');\n            } else {\n                Notification('danger', msg);\n            }\n        }\n    };\n\n    const { ip, port, sshpassword, sshuser, rconpassword, servertype } = serverData ? serverData : {};\n\n    return (\n        <AdminWrapper>\n            <div className=\"user-list\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h2>{check ? 'Update' : 'Add'} Server</h2>\n                            <Form onSubmit={check ? updateServer : addServer}>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Form.Label>Server ip</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter server ip\"\n                                        name=\"ip\"\n                                        autoComplete=\"off\"\n                                        value={ip}\n                                        onChange={onChange}\n                                    />\n                                    {errors.ip && <span style={{ color: 'red' }}>{errors.ip}</span>}\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Form.Label>Server port</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter server port\"\n                                        name=\"port\"\n                                        autoComplete=\"off\"\n                                        value={port}\n                                        onChange={onChange}\n                                    />\n                                    {errors.port && <span style={{ color: 'red' }}>{errors.port}</span>}\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Form.Label>Server rcon password</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter server rconpassword\"\n                                        name=\"rconpassword\"\n                                        autoComplete=\"off\"\n                                        value={rconpassword}\n                                        onChange={onChange}\n                                    />\n                                    {errors.rconpassword && <span style={{ color: 'red' }}>{errors.rconpassword}</span>}\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Form.Label>Server sshuser</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter server sshuser\"\n                                        name=\"sshuser\"\n                                        autoComplete=\"off\"\n                                        value={sshuser}\n                                        onChange={onChange}\n                                    />\n                                    {errors.sshuser && <span style={{ color: 'red' }}>{errors.sshuser}</span>}\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Form.Label>Server sshpassword</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter server sshpassword\"\n                                        name=\"sshpassword\"\n                                        autoComplete=\"off\"\n                                        value={sshpassword}\n                                        onChange={onChange}\n                                    />\n                                    {errors.sshpassword && <span style={{ color: 'red' }}>{errors.sshpassword}</span>}\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Form.Label>Server type</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter server servertype\"\n                                        name=\"servertype\"\n                                        autoComplete=\"off\"\n                                        value={servertype}\n                                        onChange={onChange}\n                                    />\n                                    {errors.servertype && <span style={{ color: 'red' }}>{errors.servertype}</span>}\n                                </Form.Group>\n                                <div className=\"\">\n                                    <div className=\"login-button\">\n                                        {check ? <Button type=\"submit\" className=\"l-btn\" >\n                                            Update server\n                                    </Button> : <Button type=\"submit\" className=\"l-btn\" >\n                                                ADD server\n                                    </Button>}\n                                    </div>\n                                </div>\n                            </Form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </AdminWrapper>\n    );\n};\nexport default AddServer;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\addmaps\\index.jsx",["713"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { adminInstance } from '../../../config/axios';\nimport { Notification, queryString, ValidateMap } from '../../../function';\nimport AdminWrapper from '../adminwrapper/wrapper';\nimport history from '../../../config/history';\n\nconst AddMaps = () => {\n  const [mapData, setMapData] = useState({\n    title: '',\n    gametype: false,\n    mapid: '',\n    maptype: '5vs5',\n    imgurl: '',\n  });\n  const [check, setCheck] = useState(false);\n  const [errors, setErrors] = useState({});\n  const imageRef = useRef(null);\n\n  const addMaps = async (e) => {\n    e.preventDefault();\n    const { isValid, errors } = ValidateMap(mapData, imageRef, check);\n\n    if (!isValid) {\n      setErrors(errors);\n      return;\n    }\n    const { title, mapid, maptype, gametype } = mapData;\n    const payload = gametype ? { title, mapid, maptype } : { title, maptype };\n    const data = new FormData();\n    data.append('file', imageRef.current.files[0]);\n    const response = await adminInstance().post('/addmapimage', data, {\n      params: payload,\n    });\n    const { code, msg } = response.data;\n    if (code === 200) {\n      history.push('/admin/maps');\n      Notification('success', msg);\n    }\n  };\n\n  useEffect(() => {\n    const { type, id } = queryString();\n    if (type && id) {\n      setCheck(true);\n      GetMapsData();\n    }\n  }, []);\n  const updateMaps = async (e) => {\n    e.preventDefault();\n    const { type, id } = queryString();\n    if (type && id) {\n      const { title, mapid, maptype, gametype } = mapData;\n      const payload = gametype ? { title, mapid, maptype } : { title, maptype };\n      const data = new FormData();\n      data.append('file', imageRef.current.files[0]);\n      const response = await adminInstance().patch(`/updatemap/${id}`, data, {\n        params: payload,\n      });\n      const { code, msg } = response.data;\n      if (code === 200) {\n        Notification('success', msg);\n        history.push('/admin/maps');\n      } else {\n        Notification('danger', msg);\n      }\n    }\n  };\n\n  const GetMapsData = async () => {\n    const { type, id } = queryString();\n    if (type && id) {\n      const response = await adminInstance().get(`/mapdata/${id}`);\n      const { code, mapdata } = response.data;\n      if (code === 200) {\n        const { title, mapid, imgurl } = mapdata;\n        setMapData({\n          ...mapData,\n          title,\n          mapid,\n          imgurl,\n          gametype: mapid ? true : false,\n          maptype: mapid ? '1vs1' : '5vs5',\n        });\n      }\n    }\n  };\n\n  const { title, mapid, gametype, imgurl } = mapData;\n\n  return (\n    <AdminWrapper>\n      <div className=\"user-list\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <h2>{check ? 'Update' : 'Add'} Maps</h2>\n              <Form onSubmit={check ? updateMaps : addMaps}>\n                <Form.Group controlId=\"formBasicloginone\">\n                  <Form.Label>Map name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"title\"\n                    name=\"name\"\n                    autoComplete=\"off\"\n                    value={title}\n                    onChange={(e) =>\n                      setMapData({ ...mapData, title: e.target.value })\n                    }\n                  />\n                  {errors.title && (\n                    <span style={{ color: 'red' }}>{errors.title}</span>\n                  )}\n                </Form.Group>\n                <Form.Group controlId=\"formBasicloginone\">\n                  <Form.Control\n                    type=\"file\"\n                    placeholder=\"Selcet a map image\"\n                    ref={imageRef}\n                  />\n                  {errors.imgurl && (\n                    <span style={{ color: 'red' }}>{errors.imgurl}</span>\n                  )}\n                  {imgurl && check && <span>{imgurl}</span>}\n                </Form.Group>\n                <Form.Group controlId=\"formBasicloginone\">\n                  <Form.Check\n                    label=\"Select as 1vs1\"\n                    checked={gametype}\n                    onChange={() =>\n                      setMapData({ ...mapData, gametype: !gametype })\n                    }\n                  />\n                </Form.Group>\n                {gametype && (\n                  <Form.Group controlId=\"formBasicloginone\">\n                    <Form.Label>Map id</Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      placeholder=\"1vs1 map id\"\n                      name=\"mapid\"\n                      autoComplete=\"off\"\n                      value={mapid}\n                      onChange={(e) =>\n                        setMapData({\n                          ...mapData,\n                          mapid: e.target.value,\n                          maptype: '1vs1',\n                        })\n                      }\n                    />\n                    {errors.mapid && (\n                      <span style={{ color: 'red' }}>{errors.mapid}</span>\n                    )}\n                  </Form.Group>\n                )}\n                <div className=\"\">\n                  <div className=\"login-button\">\n                    {check ? (\n                      <Button type=\"submit\" className=\"l-btn\">\n                        Update Maps\n                      </Button>\n                    ) : (\n                      <Button type=\"submit\" className=\"l-btn\">\n                        ADD Maps\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </Form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </AdminWrapper>\n  );\n};\nexport default AddMaps;\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\index.jsx",["714"],"import React, { useState, useEffect,useContext } from 'react'\r\nimport Layout from '../layout/layout'\r\nimport LeftSidebar from '../sidebar/leftsidebar'\r\nimport RightSidebar from '../sidebar/rightsidebar'\r\nimport './ladder.css';\r\nimport LadderBox from './ladder-box';\r\nimport LadderHeader from \"./ladderheader\";\r\nimport history from \"../../config/history\";\r\nimport { ladderInstance } from '../../config/axios';\r\nimport CreateLadder from \"./createladderform\";\r\nimport { validateLadder, Notification } from '../../function';\r\nimport UserContext from '../../context/context';\r\n\r\nconst LadderPage = () => {\r\n    // const [startDate, setStartDate] = useState(new Date());\r\n    const initialState = { title: \"\", ladderStart: new Date(), playerNumbers: 0, gameType: \"\", ladderPrize: \"\", ladderType: \"Normal\", banner: \"\", ladderEndDate: new Date() };\r\n    const { userDetails} = useContext(UserContext);\r\n    const {isladders} = userDetails;\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [values, setValues] = useState(initialState);\r\n    const [bannerimg, setBannerImg] = useState(null);\r\n    const [loader, setIsLoader] = useState(false);\r\n    const [ladders, setLadders] = useState([]);\r\n    const [laddersCopy, setLaddersCopy] = useState([]);\r\n    const [searchData, setSearch] = useState('');\r\n\r\n    useEffect(() => {\r\n        ListLadders();\r\n    }, [])\r\n\r\n    const handleClose = () => {\r\n        setShow(!show);\r\n    }\r\n\r\n    const OnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setValues({ ...values, [name]: value });\r\n    }\r\n\r\n    const selectLadderGameType = (name, value) => {\r\n        setValues({ ...values, [name]: value });\r\n    }\r\n\r\n    const SelectDate = (key, value) => {\r\n        setValues({ ...values, [key]: value });\r\n    }\r\n    const handleImageChange = (event) => {\r\n        try {\r\n            setValues({ ...values, banner: URL.createObjectURL(event.target.files[0]) });\r\n            setBannerImg(event.target.files[0])\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    const handleCreateLadder = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            const { isValid, errors } = validateLadder(values, bannerimg);\r\n            if (!isValid) {\r\n                console.log(errors);\r\n                setErrors(errors);\r\n                return;\r\n            }\r\n            const data = new FormData();\r\n            data.append(\"file\", bannerimg);\r\n            setIsLoader(true);\r\n            delete values.banner;\r\n            const response = await ladderInstance().post(\"/createladder\", data, {\r\n                params: values\r\n            });\r\n            const { code, msg } = response.data;\r\n            if (code === 200) {\r\n                Notification(\"success\", msg);\r\n                setErrors({})\r\n                setBannerImg(null);\r\n                handleClose();\r\n                setIsLoader(false);\r\n                setValues(initialState);\r\n                ListLadders();\r\n            } else {\r\n                Notification(\"danger\", msg);\r\n                setIsLoader(false)\r\n            }\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    const ListLadders = async () => {\r\n        try {\r\n            const response = await ladderInstance().get(\"/ladders/running\");\r\n            const { data: { code, ladders } } = response;\r\n            if (code === 200) {\r\n                setLadders(ladders);\r\n                setLaddersCopy(ladders);\r\n            }\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    const SearchLadders = value => {\r\n        try {\r\n            const exp = new RegExp(value.toLowerCase());\r\n            const filteredData = laddersCopy.filter(item =>\r\n                exp.test(item.title.toLowerCase()) || exp.test(item.gameType.toLowerCase()) || exp.test(item.ladderType.toLowerCase())\r\n            );\r\n            setLadders(filteredData);\r\n            setSearch(value);\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const RegisterInLadders = (_id) => {\r\n        history.push(`/insideladder/?lid=${_id}`);\r\n    }\r\n\r\n    return (\r\n        <Layout header={true} footer={true}>\r\n            <div className=\"statistics-page\">\r\n                <div className=\"main-wrapper\">\r\n                    <LeftSidebar mainmenu={true} increase={true} community={true} voiceserver={true} />\r\n                    <div className=\"middle-wrapper\">\r\n                        <div className=\"ladder-page-section\">\r\n                            <LadderHeader handleClose={handleClose} SearchLadders={SearchLadders} searchData={searchData} running={true} isladders={isladders} />\r\n                            <div className=\"ladderimg \">\r\n                                <LadderBox ladders={ladders} RegisterInLadders={RegisterInLadders} />\r\n                            </div>\r\n\r\n                            {show && <CreateLadder show={show} values={values} handleClose={handleClose} errors={errors} OnChange={OnChange} selectLadderGameType={selectLadderGameType} SelectDate={SelectDate} handleImageChange={handleImageChange} handleCreateLadder={handleCreateLadder} />}\r\n                        </div>\r\n                    </div>\r\n                    <RightSidebar />\r\n                </div>\r\n\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\nexport default LadderPage;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\challenges\\index.jsx",["715","716","717"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport DateTimePicker from \"react-datetime-picker\";\nimport Layout from \"../layout/layout\";\nimport LeftSidebar from \"../sidebar/leftsidebar\";\nimport RightSidebar from \"../sidebar/rightsidebar\";\nimport UserContext from '../../context/context';\nimport PopupWrapper from \"../popups/popupwrapper\";\nimport { Notification } from \"../../function\";\nimport \"./chall.css\";\nimport { ladderInstance } from \"../../config/axios\";\nimport history from \"../../config/history\";\nimport \"../support/support.css\";\n\nconst ChhalengeComponent = () => {\n    const { userDetails: { laddersChallenges }, setUserDetails } = useContext(UserContext);\n    const [show, setShow] = useState(false);\n    const [dateTime, setDateTime] = useState(new Date());\n    const [challengeId, setChallengeId] = useState('');\n    const [errors, setErrors] = useState({});\n\n    const handleClose = () => {\n        setShow(!show);\n    }\n\n    const selectChallengeToModify = (el) => {\n        const { dateTime, _id } = el;\n        setDateTime(new Date(dateTime));\n        setChallengeId(_id);\n        setShow(true);\n    }\n\n    const EditRejectAcceptTheChallenge = async (type, id) => {\n        try {\n            const payload = { type, dateTime };\n            const response = await ladderInstance().patch(`/editRejectAccepetChallenge/${id}`, payload);\n            const { data: { code, msg } } = response;\n            if (code === 200) {\n                Notification('success', msg);\n                setShow(false);\n                setChallengeId('');\n            } else {\n                Notification('danger', msg);\n            }\n        } catch (error) {\n            return error\n        }\n    }\n\n    return (\n        <Layout header={true} footer={true}>\n            <div className=\"team-page\">\n                <div className=\"main-wrapper\">\n                    <LeftSidebar mainmenu={true} increase={true} community={true} voiceserver={true} />\n                    <div className=\"middle-wrapper\">\n                        <div className=\"support-header\">\n                            <h6>Ladder Challenges</h6>\n                        </div>\n                        <div className=\"support-listing support-page challenge-page\">\n                            <div className=\"support-table\">\n                                <div className=\"support-header\">\n                                    <div className=\"number\">\n                                        Challenge by\n               </div>\n                                    <div className=\"number\">\n                                        Challenge to\n               </div>\n                                    <div className=\"number\">\n                                        Ladder name\n               </div>\n                                    <div className=\"number\">\n                                        Time\n               </div>\n                                    <div className=\"answer\">\n                                        Action\n               </div>\n                                </div>\n                                {laddersChallenges && laddersChallenges.map((el, i) => {\n                                    return <ListItem element={el} index={i} selectChallengeToModify={selectChallengeToModify} EditRejectAcceptTheChallenge={EditRejectAcceptTheChallenge} />\n                                })}\n                            </div>\n                        </div>\n\n                    </div>\n                    <RightSidebar />\n                </div>\n                {show && <EditDatePopup show={show} handleClose={handleClose} dateTime={dateTime} errors={errors} setDateTime={setDateTime} EditRejectAcceptTheChallenge={EditRejectAcceptTheChallenge} challengeId={challengeId} />}\n            </div>\n        </Layout>\n    );\n};\nexport default ChhalengeComponent;\n\n\nconst ListItem = ({ element, index, selectChallengeToModify, EditRejectAcceptTheChallenge }) => {\n    const { challengeBy: { username: by }, challengeTo: { username: to, _id }, ladderid: { title }, dateTime, state, _id: challengeId, roomid } = element;\n    return <div className=\"support-body\" key={index}>\n        <div className=\"number\">\n            {by}\n        </div>\n        <div className=\"number\">\n            {to}\n        </div>\n        <div className=\"number\">\n            {title}\n        </div>\n        <div className=\"number\">\n            {new Date(dateTime).toLocaleString()}\n        </div>\n        <div className=\"answer\">\n            {new Date().getTime() < new Date(dateTime).getTime() ? <React.Fragment>\n                {state === 'primary' && localStorage.getItem('userid') === _id ? <React.Fragment>\n                    <Button type=\"submit\" className=\"btn btn-success\" onClick={() => {\n                        if (\n                            window.confirm(\n                                'Are you sure to accept this challenge request !!'\n                            )\n                        ) {\n                            EditRejectAcceptTheChallenge('accept', challengeId);\n                        }\n                    }}>Accept</Button>\n                    <Button type=\"submit\" className=\"btn btn-danger\" onClick={() => {\n                        if (\n                            window.confirm(\n                                'Are you sure to reject this challenge request !!'\n                            )\n                        ) {\n                            EditRejectAcceptTheChallenge('reject', challengeId);\n                        }\n                    }}>Reject</Button>\n                    <Button type=\"submit\" className=\"btn btn-primary\" onClick={() => selectChallengeToModify(element)}>Edit</Button>\n                </React.Fragment> : <div>{state.toLowerCase() === 'accepted' ? <button className=\"btn btn-success\" onClick={() => history.push(`/ladderroom/?id=${roomid}`)}>Go to the room</button> : state.toUpperCase()}</div>}\n            </React.Fragment> : <div style={{ color: 'red' }}>Expired</div>}\n\n        </div>\n    </div>\n}\n\n\nconst EditDatePopup = ({ show, handleClose, dateTime, errors, setDateTime, EditRejectAcceptTheChallenge, challengeId }) => {\n    return <PopupWrapper\n        show={show}\n        handleClose={handleClose}\n        heading={\"Edit challenge date\"} defaultClass={\"outlayed-popup team-popup group-popup\"}\n    >\n        <div className=\"row\">\n            <div className=\"col-md-12 edit-date-time-ch\">\n                <Form.Group controlId=\"formBasicloginone\">\n                    <Form.Label>Date time: </Form.Label>\n                    <DateTimePicker\n                        value={dateTime}\n                        selected={dateTime}\n                        onChange={(e) => setDateTime(e)}\n                        minDate={dateTime}\n                        className=\"start-date\"\n                    />\n                    {errors.dateTime && <span style={{ color: 'red' }}>{errors.dateTime}</span>}\n                </Form.Group>\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col-md-4\">\n                <button className=\"btn btn-success\" onClick={() => EditRejectAcceptTheChallenge('edit', challengeId)}>\n                    Submit\n                </button>\n            </div>\n        </div>\n    </PopupWrapper>\n}","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\tournament\\index.jsx",["718","719","720"],"import React, { useEffect, useState } from \"react\";\r\nimport AdminWrapper from \"../adminwrapper/wrapper\";\r\nimport { Table, Button, Form } from 'react-bootstrap';\r\nimport history from \"../../../config/history\";\r\nimport { adminInstance } from '../../../config/axios';\r\nimport { Notification } from '../../../function';\r\n\r\nconst TournamentList = () => {\r\n    const [alltournament, setStore] = useState([]);\r\n    const [alltournamentCopy, setTournamentCopy] = useState([]);\r\n    useEffect(() => {\r\n        StoreListData();\r\n    }, [])\r\n    const StoreListData = async () => {\r\n        const response = await adminInstance().get('/tournaments');\r\n        const { code, tournaments } = response.data;\r\n        if (code === 200) {\r\n            setStore(tournaments);\r\n            setTournamentCopy(tournaments);\r\n        }\r\n    }\r\n    const DeleteTournament = async (_id) => {\r\n        const response = await adminInstance().delete(`/deleteTournament/${_id}`);\r\n        const { code, msg } = response.data;\r\n        if (code === 200) {\r\n            Notification('success', msg);\r\n            setStore((oldArray) => oldArray.filter((el) => el._id !== _id));\r\n            setTournamentCopy((oldArray) => oldArray.filter((el) => el._id !== _id));\r\n        } else {\r\n            Notification('danger', msg);\r\n        }\r\n    }\r\n    return (\r\n        <AdminWrapper>\r\n            <div className=\"user-list\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"admin-title\">All Tournament</h2>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"admin-search\">\r\n                                <Form inline>\r\n                                    <Button onClick={() => history.push(\"/admin/add-tournament\")}>Add Tournament</Button>\r\n                                </Form>\r\n                            </div>\r\n                            <Table striped bordered hover responsive>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Image</th>\r\n                                        <th>Title</th>\r\n                                        <th>GameType</th>\r\n                                        <th>PlayerNumbers</th>\r\n                                        <th>TournamentPrize</th>\r\n                                        <th>TournamentType</th>\r\n                                        <th>TournamentStart</th>\r\n                                        <th>Action</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {alltournament && alltournament.map((el, i) => {\r\n                                        return <AllTournament element={el} index={i} DeleteTournament={DeleteTournament} />\r\n                                    })}\r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </AdminWrapper>\r\n    );\r\n};\r\nexport default TournamentList;\r\n\r\nconst AllTournament = ({ element, index, DeleteTournament }) => {\r\n    const { title, _id,banner,createdBy,gameType,playerNumbers,tournamentPrize,tournamentStart,tournamentType} = element;\r\n    return (\r\n        <tr key={index}>\r\n            <td><img src={banner} className=\"img-size\" /></td>\r\n            <td>{title.substring(0, 25) + \"...\"}</td>\r\n            <td>{gameType}</td>\r\n            <td>{playerNumbers}</td>\r\n            <td>{tournamentPrize}</td>\r\n            <td>{tournamentType}</td>\r\n            <td>{tournamentStart}</td> \r\n            <td>\r\n                <div className=\"action-buttons\">\r\n                    <Button className=\"block-btn\" onClick={() => {\r\n                        if (\r\n                            window.confirm(\r\n                                'Are you sure to delete this Tournament?'\r\n                            )\r\n                        ) {\r\n                            DeleteTournament(_id);\r\n                        }\r\n                    }}>Delete</Button>\r\n                    <Button onClick={() => history.push(`/admin/add-tournament/?type=edit&id=${_id}`)} className=\"approve-btn\">Views & edit</Button>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\myprofile\\index.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\statistics\\index.jsx",["721","722","723","724","725","726","727","728","729","730","731","732","733","734"],"import React, { useContext, useState } from 'react';\r\nimport { Dropdown, ProgressBar } from \"react-bootstrap\"\r\nimport UserContext from \"../../context/context\";\r\nimport Layout from '../layout/layout';\r\nimport LeftSidebar from '../sidebar/leftsidebar';\r\nimport RightSidebar from '../sidebar/rightsidebar';\r\nimport './statistics.css';\r\nimport teamicon from '../../../src/assets/team/user-icon.png';\r\nimport prestige from '../../assets/prestigios/Prestigio VIII_Mesa de trabajo 1.png';\r\nimport prestige1 from '../../assets/prestigios/Prestigio IX_Mesa de trabajo 1.png';\r\nimport advance from '../../assets/matchmaking/advanced.png';\r\nimport premium from '../../assets/matchmaking/premium.png';\r\nimport friend from '../../assets/friend/main-bg.jpg';\r\nimport locksm from '../../assets/icons/smlock.png';\r\nimport lock from '../../assets/icons/lock.png';\r\nimport { userInstance } from '../../config/axios';\r\nimport { GetNextPrestige, GetPrestigeAccPoint } from \"../../function\";\r\n\r\nconst Statistics = () => {\r\n  const { userDetails: { username, useravatar, ispremium, ispremiumadvnaced, prestige: prestige5vs5, prestige1vs1 }, userStats, selectedGame, padLock, selectForCompare, opponentStats, setSelectedGame, opponentStatsObject } = useContext(UserContext);\r\n  const [profileList, setProfiles] = useState([]);\r\n\r\n  const getProfiles = async (e) => {\r\n    try {\r\n      const { value } = e.target;\r\n      if (value.trim()) {\r\n        const response = await userInstance().get(`/searchuser/${value}`);\r\n        const { data: { code, profileList } } = response;\r\n        if (code === 200) {\r\n          setProfiles(profileList);\r\n        }\r\n      } else {\r\n        setProfiles([])\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  const selectMember = (id) => {\r\n    selectForCompare(id)\r\n    setProfiles([])\r\n  }\r\n  return (\r\n    <Layout header={true} footer={true}>\r\n      <div className=\"statistics-page\">\r\n        <div className=\"main-wrapper\">\r\n          <LeftSidebar\r\n            mainmenu={true}\r\n            increase={true}\r\n            community={true}\r\n            voiceserver={true}\r\n          />\r\n          <div className=\"middle-wrapper\">\r\n            <div className=\"statistics\">\r\n              <div className=\"statistics-main\">\r\n                {/* Current user stats section */}\r\n                <div className=\"left-side-statistics\">\r\n                  <div className=\"profile-statistics\">\r\n                    <div className=\"statistics-profile-left\">\r\n                      <img src={useravatar ? useravatar : teamicon} alt=\"team\" />\r\n                      <p>{userStats[9] ? userStats[9].totalgames : 0} played games</p>\r\n                      <p>Mvp: 0</p>\r\n                    </div>\r\n                    <div className=\"statistics-profile-right\">\r\n                      <div className=\"player-name \">\r\n                        <h6>{username}</h6>\r\n                      </div>\r\n                      <ProgressBarPrestige prestigevalue={selectedGame === '1vs1' ? prestige1vs1 : prestige5vs5} />\r\n\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-win\">\r\n                    <div className=\"player-border\">\r\n                      <div className=\"playerwin\">\r\n                        <h6>\r\n                          Wins: <span>{userStats[1] ? userStats[1].win : 0}</span>\r\n                        </h6>\r\n                      </div>\r\n                      <div className=\"player-loss\">\r\n                        <h6>\r\n                          Loses: <span>{userStats[0] ? userStats[0].loss : 0}</span>\r\n                        </h6>\r\n                      </div>\r\n                      <div className=\"player-winrate\">\r\n                        <h6>\r\n                          Win rate:\r\n                      </h6>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"player-winrate\">\r\n                      <h6>\r\n                        <span>{userStats[8] ? userStats[8].winpercent : 0}%</span>\r\n                      </h6>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"add-player-premium\">\r\n                    <div className=\"advance-premium\">\r\n\r\n                      {ispremium && <div className=\"advance\">\r\n                        <img src={advance} alt=\"advnc\" />\r\n                        Advance\r\n                      </div>}\r\n\r\n                      {ispremiumadvnaced && <div className=\"premium\">\r\n                        <img src={premium} alt=\"advnc\" />\r\n                        Premium\r\n                      </div>}\r\n\r\n                    </div>\r\n                    {/* <div className=\"statistics-add-friend\">\r\n                      <i class=\"fa fa-thumbs-up\" aria-hidden=\"true\"></i> Add\r\n                      Friend\r\n                    </div> */}\r\n                    <div className=\"statistics-like\">\r\n                      <i class=\"fa fa-thumbs-up\" aria-hidden=\"true\"></i> 0\r\n                    </div>\r\n                    <div className=\"statistics-total\">\r\n                      <i class=\"fa fa-users\" aria-hidden=\"true\"></i> 0\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* ------------- End current user stats scetion --------- */}\r\n\r\n                {/* Opponent user stats */}\r\n                <div className={`right-side-statistics ${!padLock && 'padlock-section'}`}>\r\n                  {!padLock && <img src={lock} className=\"lock-bg\" />}\r\n                  <div className=\"profile-statistics\">\r\n                    <div className=\"statistics-profile-left\">\r\n                      <img src={opponentStatsObject.useravatar ? opponentStatsObject.useravatar : teamicon} alt=\"team\" />\r\n                      <p>{opponentStats[9] ? opponentStats[9].totalgames : 0} played games</p>\r\n                      <p>Mvp: 0</p>\r\n                    </div>\r\n                    <div className=\"statistics-profile-right\">\r\n                      <div className=\"player-name player-name-name\">\r\n                        <h6>{opponentStatsObject.username}</h6>\r\n                      </div>\r\n\r\n                      <ProgressBarPrestige prestigevalue={selectedGame === '1vs1' ? opponentStatsObject.prestige1vs1 : opponentStatsObject.prestige} />\r\n\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-win\">\r\n                    <div className=\"player-border\">\r\n                      <div className=\"playerwin\">\r\n                        <h6>\r\n                          Wins: <span>{opponentStats[1] ? opponentStats[1].win : 0}</span>\r\n                        </h6>\r\n                      </div>\r\n                      <div className=\"player-loss\">\r\n                        <h6>\r\n                          Loses: <span>{opponentStats[0] ? opponentStats[0].loss : 0}</span>\r\n                        </h6>\r\n                      </div>\r\n                      <div className=\"player-winrate\">\r\n                        <h6>\r\n                          Win rate:\r\n                      </h6>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"player-winrate\">\r\n                      <h6>\r\n                        <span>{opponentStats[8] ? opponentStats[8].winpercent : 0}%</span>\r\n                      </h6>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"add-player-premium\">\r\n                    <div className=\"advance-premium\">\r\n                      {opponentStatsObject.ispremiumadvnaced && <div className=\"advance\">\r\n                        <img src={advance} alt=\"advnc\" />\r\n                        Advance\r\n                      </div>}\r\n                      {opponentStatsObject.ispremium && <div className=\"premium\">\r\n                        <img src={premium} alt=\"advnc\" />\r\n                        Premium\r\n                      </div>}\r\n                    </div>\r\n                    <div className=\"statistics-add-friend\">\r\n                      <i class=\"fa fa-thumbs-up\" aria-hidden=\"true\"></i> Add\r\n                      Friend\r\n                    </div>\r\n                    <div className=\"statistics-like\">\r\n                      <i class=\"fa fa-thumbs-up\" aria-hidden=\"true\"></i> 0\r\n                    </div>\r\n                    <div className=\"statistics-total\">\r\n                      <i class=\"fa fa-users\" aria-hidden=\"true\"></i> 0\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* End opponent section */}\r\n              </div>\r\n              {/* -------------- Middle component -------------*/}\r\n              <div className=\"search-listing\">\r\n                <div className=\"statistics-search-left\">\r\n                  {!padLock && <div className=\"premium-box\">\r\n                    <img src={locksm} alt=\"lock image\" />\r\n                    <h6>It is required to be <span> premium </span> to see the blocked functions</h6>\r\n                  </div>}\r\n                </div>\r\n\r\n                <div className={`statistics-search-right ${!padLock && 'padlock-section'}`}>\r\n                  <i class=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n                  <input type=\"search\" placeholder=\"search Player\" onChange={getProfiles} />\r\n                  {profileList.length > 0 && <div className=\"search-list search-list-team stats-search\">\r\n                    <div className=\"list\">\r\n                      {profileList.map((el, i) => {\r\n                        return <ListItem2 element={el} index={i} selectMember={selectMember} />\r\n                      })}\r\n                    </div>\r\n                  </div>}\r\n                  {!padLock && <img src={lock} alt=\"lock image\" />}\r\n                  <div className=\"searchbtn\">\r\n                    <button type=\"submit\">Random search</button>\r\n                    <Dropdown className=\"search-icon-btn\">\r\n                      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                        {selectedGame}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => setSelectedGame('5vs5')}>5vs5</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => setSelectedGame('1vs1')}>1vs1</Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* -------- Middle component end ------------*/}\r\n\r\n              {/*------- Players component stats list Both--------*/}\r\n              <div className=\"listing-player\">\r\n                <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">K/D Ratio</div>\r\n                      <div className={`player-ratio ${userStats[5] ? userStats[5].class : 0}`}>{userStats[5] ? userStats[5].KDR : 0}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className={`player-ratio ${opponentStats[5] ? opponentStats[5].class : 0}`}>{opponentStats[5] ? opponentStats[5].KDR : 0}</div>\r\n                      <div className=\"player-name\">K/D Ratio</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">DMG/Round</div>\r\n                      <div className=\"player-ratio no\">0%</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className=\"player-ratio no\">0%</div>\r\n                      <div className=\"player-name\">DMG/Round</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">Kills</div>\r\n                      <div className={`player-ratio ${userStats[3] ? userStats[3].class : 0}`}>{userStats[3] ? userStats[3].kills : 0}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className={`player-ratio ${opponentStats[3] ? opponentStats[3].class : 0}`}>{opponentStats[3] ? opponentStats[3].kills : 0}</div>\r\n                      <div className=\"player-name\">Kills</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">deaths</div>\r\n                      <div className={`player-ratio ${userStats[4] ? userStats[4].class : 0}`}>{userStats[4] ? userStats[4].death : 0}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className={`player-ratio ${opponentStats[4] ? opponentStats[4].class : 0}`}>{opponentStats[4] ? opponentStats[4].death : 0}</div>\r\n                      <div className=\"player-name\">Deaths</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {selectedGame === \"5v5\" && <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">Assits per game</div>\r\n                      <div className={userStats[12] ? userStats[12].class : 'no'}>{userStats[12] ? userStats[12].assists_per : 0}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className={`player-ratio ${opponentStats[12] ? opponentStats[12].class : 'no'}`}>{opponentStats[12] ? opponentStats[12].assists_per : 0}</div>\r\n                      <div className=\"player-name\">Assits per game</div>\r\n                    </div>\r\n                  </div>\r\n                </div>}\r\n\r\n                <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">%headshot</div>\r\n                      {!padLock ? <div className=\"lock-images\">\r\n                        <img src={lock} alt=\"lock image\" />\r\n                      </div> : <div className={`player-ratio ${userStats[6] ? userStats[6].class : 0}`}> {userStats[6] ? userStats[6].headshot_per : 0}</div>}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className={`player-ratio ${opponentStats[6] ? opponentStats[6].class : 0}`}> {opponentStats[6] ? opponentStats[6].headshot_per : 0}</div>\r\n                      <div className=\"player-name\">%headshot</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* 5vs5 */}\r\n                {selectedGame === '5vs5' && <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">clutchs</div>\r\n                      {!padLock ? <div className=\"lock-images\">\r\n                        <img src={lock} alt=\"lock image\" />\r\n                      </div> : <div className={`player-ratio ${userStats[11] ? userStats[11].class : 0}`}>\r\n                          {userStats[11] ? userStats[11].clutch_won : 0}\r\n                        </div>}\r\n\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className={`player-ratio ${opponentStats[11] ? opponentStats[11].class : 0}`}>\r\n                        {opponentStats[11] ? opponentStats[11].clutch_won : 0}\r\n                      </div>\r\n                      <div className=\"player-name\">clutchs</div>\r\n                    </div>\r\n                  </div>\r\n                </div>}\r\n                <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">Longest winnnig streak</div>\r\n                      {!padLock ? <div className=\"lock-images\">\r\n                        <img src={lock} alt=\"lock image\" />\r\n                      </div> : <div className={`player-ratio ${userStats[10] ? userStats[10].class : 0}`}>\r\n                          {userStats[10] ? userStats[10].streaks : 0}\r\n                        </div>}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className={`player-ratio ${opponentStats[10] ? opponentStats[10].class : 0}`}>\r\n                        {opponentStats[10] ? opponentStats[10].streaks : 0}\r\n                      </div>\r\n                      <div className=\"player-name\">Longest winnnig streak</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">Kills/ round</div>\r\n                      {!padLock ? <div className=\"lock-images\">\r\n                        <img src={lock} alt=\"lock image\" />\r\n                      </div> : <div className={`player-ratio ${userStats[7] ? userStats[7].class : 0}`}>{userStats[7] ? userStats[7].KR : 0}</div>}\r\n\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className={`player-ratio ${opponentStats[7] ? opponentStats[7].class : 0}`}>{opponentStats[7] ? opponentStats[7].KR : 0}</div>\r\n                      <div className=\"player-name\">Kills/ round</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* 5vs5 */}\r\n                {selectedGame === \"5vs5\" && <div className=\"listing-player-list\">\r\n                  <div className=\"player-list-left\">\r\n                    <div className=\"player-list-one\">\r\n                      <div className=\"player-name\">Sucess in entry frages</div>\r\n                      <div className=\"lock-images\">\r\n                        <img src={lock} alt=\"lock image\" />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"player-list-middle\">\r\n                    <div className=\"playervs\">VS</div>\r\n                  </div>\r\n                  <div className=\"player-list-right\">\r\n                    <div className=\"player-list-two\">\r\n                      <div className=\"\"></div>\r\n                      <div className=\"player-name\">Sucess in entry frages</div>\r\n                    </div>\r\n                  </div>\r\n                </div>}\r\n              </div>\r\n\r\n              {/*-------------- Players stats component end ------------*/}\r\n\r\n              <div className=\"player-images\">\r\n                <div className=\"player-one\">\r\n                  <img src={friend} alt=\"\" />\r\n                  <div className=\"player-cont\">\r\n                    <img src={lock} alt=\"lock image\" />\r\n                    <h5>50%</h5>\r\n                  </div>\r\n                </div>\r\n                <div className=\"player-one\">\r\n                  <img src={friend} alt=\"\" />\r\n                  <div className=\"player-cont\">\r\n                    <img src={lock} alt=\"lock image\" />\r\n                    <h5>50%</h5>\r\n                  </div>\r\n                </div>\r\n                <div className=\"player-one\">\r\n                  <img src={friend} alt=\"\" />\r\n                  <div className=\"player-cont\">\r\n                    <img src={lock} alt=\"lock image\" />\r\n                    <h5>50%</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <RightSidebar />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nexport default Statistics;\r\n\r\n\r\nconst ListItem2 = ({ element, index, selectMember }) => {\r\n  const { username, useravatar, _id } = element;\r\n  return <h6 key={index} onClick={() => selectMember(_id)}><img src={useravatar ? useravatar : teamicon} />{username}</h6>\r\n}\r\n\r\nconst ProgressBarPrestige = ({ prestigevalue }) => {\r\n  prestigevalue = prestigevalue ? prestigevalue : 1000;\r\n  const nextPrestige = GetNextPrestige(prestigevalue);\r\n  return <div className=\"profile-bottom\">\r\n    <img src={GetPrestigeAccPoint(prestigevalue)} alt=\"team\" /> <div className=\"progress-tab\">\r\n      <h6>{prestigevalue}/{nextPrestige}</h6>\r\n      <div class=\"progress\">\r\n        <ProgressBar now={prestigevalue} max={nextPrestige} variant=\"warning\" />\r\n      </div>\r\n      <h5>Remaining XP for next prestige</h5>\r\n    </div>\r\n    <img src={GetPrestigeAccPoint(nextPrestige)} alt=\"team\" />\r\n  </div>\r\n}","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\reporting\\index.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\support\\index.jsx",["735"],"import React, { useEffect, useState } from \"react\";\nimport AdminWrapper from \"../adminwrapper/wrapper\";\nimport { Table, Button, Dropdown, Form } from 'react-bootstrap';\nimport { adminInstance } from '../../../config/axios';\nimport { Notification } from '../../../function';\nimport SupportView from \"./popup\";\n\nconst AllTickets = () => {\n    const [AllTickets, setAllTickets] = useState([]);\n    const [show, setShow] = useState(false);\n    const [ticketObject, setTicketObject] = useState({});\n    const [errors, setErrors] = useState({});\n    const [answer, setAnswer] = useState('');\n    const [AllTicketsCopy, setAllTicketsCopy] = useState({});\n    const [category, setCategory] = useState('Select filter');\n    const [categoryList, setCategoryList] = useState([{ type: 'all', key: 'all' }, { type: 'open', key: \"status\" }, { type: 'close', key: 'status' }, { type: 'answered', key: \"replies\" }]);\n\n    useEffect(() => {\n        //Use Effect function for fetch all data;\n        ticketsList();\n    }, []);\n\n    const ticketsList = async () => {\n        const response = await adminInstance().get('/ticketlist');\n        const { code, ticketlist } = response.data;\n        if (code === 200) {\n            setAllTickets(ticketlist);\n            setAllTicketsCopy(ticketlist);\n        }\n    }\n\n    const closeTicket = async id => {\n        const response = await adminInstance().put(`/closeticket/${id}`);\n        const { code, msg } = response.data;\n        if (code === 200) {\n            Notification('success', msg);\n            setShow(false);\n            ticketsList();\n        } else {\n            Notification('danger', msg);\n        }\n    };\n\n    const handleClose = () => {\n        setShow(!show)\n    }\n\n    const setOpen = (i) => {\n        const selected = [...AllTickets][i];\n        setTicketObject(selected);\n        setShow(true)\n    }\n\n    const PostAnswer = async (tk_id) => {\n        try {\n            if (!answer.trim()) {\n                setErrors({ answer: 'Answer required' })\n                return;\n            }\n            const response = await adminInstance().post(\"/postAnswer\", { answer, tk_id });\n            const { data: { code, msg } } = response;\n            if (code === 200) {\n                Notification('success', msg);\n                setShow(false);\n                ticketsList();\n            }\n        } catch (error) {\n            return error\n        }\n    }\n    const searchCategory = (value, key, from) => {\n        try {\n            let filteredData = [];\n            if (key !== 'replies' && key !== \"all\") {\n                const exp = new RegExp(value.toLowerCase());\n                filteredData = AllTicketsCopy.filter(item =>\n                    exp.test(item[key].toLowerCase())\n                );\n            } else if (key === 'replies') {\n                filteredData = AllTicketsCopy.filter(item =>\n                    item[key] && item[key].length > 0\n                );\n            } else if (key === 'all') {\n                filteredData = AllTicketsCopy;\n            }\n            if (from !== 'text') {\n                setCategory(value)\n            }\n            setAllTickets(filteredData);\n        } catch (e) {\n            return e;\n        }\n    };\n    return (\n        <AdminWrapper>\n            <div className=\"user-list\">\n                <div className=\"container\">\n                    <h2 className=\"admin-title\">All Tickets</h2>\n                    <div className=\"row\">\n                        <div className=\"col-md-6\">\n                            <div className=\"all-ticket-dropdown\">\n                                <Form.Group controlId=\"formBasicloginone\">\n                                    <Dropdown>\n                                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\n                                            {category}\n                                        </Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            {categoryList && categoryList.map((el, i) => {\n                                                return (\n                                                    <Dropdown.Item key={i} active={el.active} onClick={() => searchCategory(el.type, el.key, 'nottext')}>{el.type}</Dropdown.Item>\n                                                )\n                                            })}\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </Form.Group>\n                            </div>\n\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Form.Group controlId=\"formBasicloginone\">\n                                <Form.Control type=\"text\" placeholder=\"Search by subject\"\n                                    className=\"mr-sm-2\" onChange={(e) => searchCategory(e.target.value, 'subject', 'text')} />\n                            </Form.Group>\n                        </div>\n                        <div className=\"col-md-12\">\n                            <Table striped bordered hover responsive>\n                                <thead>\n                                    <tr>\n                                        <th>S.N</th>\n                                        <th>Subject</th>\n                                        <th>Description</th>\n                                        <th>Status</th>\n                                        <th>Posted by</th>\n                                        <th>Action</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {AllTickets && AllTickets.map((el, i) => {\n                                        return <TicketsDataList element={el} index={i} setOpen={setOpen} />\n                                    })}\n                                </tbody>\n                            </Table>\n                        </div>\n                    </div>\n                </div>\n                {show && <SupportView show={show} handleClose={handleClose} handleChange={setAnswer} ticketObject={ticketObject} errors={errors} closeTicket={closeTicket} PostAnswer={PostAnswer} />}\n            </div>\n        </AdminWrapper>\n    );\n};\nexport default AllTickets;\n\nconst TicketsDataList = ({ element, index, setOpen }) => {\n    const { subject, status, description, sender: { username } } = element;\n    return (\n        <tr key={index}>\n            <td>{index + 1}</td>\n            <td>{subject}</td>\n            <td>{description.length > 50 ? description.substring(0, 50) : description}</td>\n            <td>{status}</td>\n            <td>{username}</td>\n            <td>\n                <div className=\"action-buttons\">\n                    <Button className=\"approve-btn\" onClick={() => setOpen(index)}><i class=\"fa fa-eye\" aria-hidden=\"true\"></i></Button>\n                </div>\n            </td>\n        </tr>\n    )\n}\n\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\withdrawrequest\\index.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\tournamentrules\\index.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\config\\keys.js",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\popupwrapper.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\info-tab.jsx",["736"],"import React from 'react';\r\nimport matchmaking from '../../assets/menu/matchmaking.png';\r\n\r\nconst InfoTab = ({ laddersData, playersOrTeamList, selectPlayerFoChallenge }) => {\r\n  const { gameType } = laddersData ? laddersData : {};\r\n  return (\r\n    <div className=\"info-tab\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <div className=\"search-area\">\r\n              <i class=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n              <input type=\"search\" placeholder=\"Search player\" />\r\n              <button type=\"submit\">\r\n                <i className=\"fa fa-user\" aria-hidden=\"true\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-12\">\r\n            <TableHeadInfo name={gameType === '5vs5' ? 'Teams' : 'Players'} />\r\n            {playersOrTeamList && playersOrTeamList.length > 0 ? (\r\n              playersOrTeamList.map((el, i) => {\r\n                return <ListItem element={el} index={i} selectPlayerFoChallenge={selectPlayerFoChallenge} />;\r\n              })\r\n            ) : (\r\n                <h2>No Players found</h2>\r\n              )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default InfoTab;\r\n\r\nconst ListItem = ({ element, index, selectPlayerFoChallenge }) => {\r\n  const { name, kills, deaths, kdr, games, wins, loss, winrate, score, _id, creator } = element;\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"info-table-section\" key={index}>\r\n        <div className=\"info-table-body player-one player-one-list\">\r\n          <div className=\"info-no\">{index + 1}</div>\r\n          <div className=\"info-players\">{name}</div>\r\n          <div className=\"info-kills\">{kills}</div>\r\n          <div className=\"info-deaths\">{deaths}</div>\r\n          <div className=\"info-kdr\">{kdr}</div>\r\n          <div className=\"info-games\">{games}</div>\r\n          <div className=\"info-wins\">{wins}</div>\r\n          <div className=\"info-loses\">{loss}</div>\r\n          <div className=\"info-winrate\">{winrate}</div>\r\n          <div className=\"info-score\">{score}</div>\r\n        </div>\r\n        {localStorage.getItem(\"userid\") !== creator && <div className=\"checkbox\">\r\n          <input type=\"checkbox\" onClick={() => selectPlayerFoChallenge(index)} />\r\n        </div>}\r\n\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst TableHeadInfo = ({ name }) => {\r\n  return <div className=\"info-table\">\r\n    <div className=\"info-no\">\r\n      <img src={matchmaking} alt=\"ingo\" />\r\n    </div>\r\n    <div className=\"info-players\">{name}:</div>\r\n    <div className=\"info-kills\">Kills:</div>\r\n    <div className=\"info-deaths\">Deaths:</div>\r\n    <div className=\"info-kdr\">KDR:</div>\r\n    <div className=\"info-games\">Games:</div>\r\n    <div className=\"info-wins\">Wins:</div>\r\n    <div className=\"info-loses\">Loses:</div>\r\n    <div className=\"info-winrate\">Win Rate:</div>\r\n    <div className=\"info-score\">Score:</div>\r\n  </div>\r\n}","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\rules-tab.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\playgame.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\teams.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\classification.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\matchmakingteam.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\layout\\layout.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\store\\storeDetail.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\rightsidebar.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\leftsidebar.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\adminwrapper\\wrapper.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\createladderform.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\support\\popup.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\ladder-box.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\ladder\\ladderheader.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\signatureBook.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\streaming.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\profileInfo.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\tournaments.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\generalDescription.jsx",["737"],"import React, { useContext } from 'react';\r\nimport { Tabs, Tab, Form } from 'react-bootstrap';\r\nimport search from '../../assets/header/search-icon.png';\r\nimport profile from '../../assets/matchmaking/user.png';\r\nimport flag from '../../assets/friend/flag.png';\r\nimport UserProfileContext from './../../context/profilecontext';\r\nconst GeneralDescription = () => {\r\n  const { firiendsData, SearcFriends } = useContext(UserProfileContext);\r\n\r\n  const { friends, commanFriends } = firiendsData ? firiendsData : {};\r\n\r\n  return (\r\n    <div className=\"genral-descrption\">\r\n      <div className=\"profile-tabs\">\r\n        <Tabs defaultActiveKey=\"0\">\r\n          <Tab eventKey=\"0\" title={`ALL THE FRIENDS (${friends.length})`}>\r\n            <AllFriends data={friends} type=\"friends\" />\r\n          </Tab>\r\n          <Tab\r\n            eventKey=\"1\"\r\n            title={`FRIENDS IN COMMON (${commanFriends.length})`}\r\n          >\r\n            <AllFriends data={commanFriends} type=\"comman\" />\r\n          </Tab>\r\n          <Tab eventKey=\"2\" title=\"friends on steam\">\r\n            <h5>Not available</h5>\r\n          </Tab>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default GeneralDescription;\r\n\r\nconst AllFriends = ({ data, type }) => {\r\n  const { SearcFriends } = useContext(UserProfileContext);\r\n  return (\r\n    <div className=\"all-friends-section\">\r\n      <div className=\"friend-search-section\">\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Control\r\n            type=\"search\"\r\n            placeholder=\"Find friend ...\"\r\n            onChange={({ target: { value } }) => SearcFriends(type, value)}\r\n          />\r\n          <img src={search} alt=\"find\" />\r\n        </Form.Group>\r\n      </div>\r\n      <div className=\"friend-list-section\">\r\n        <div className=\"friend-list\">\r\n          {data &&\r\n            data.map((el, i) => {\r\n              return <FriendItem element={el} index={i} />;\r\n            })}\r\n          I\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FriendItem = ({ element, index }) => {\r\n  const { username, useravatar, _id, profileurl } = element ? element : {};\r\n  return (\r\n    <div className=\"friend-box\" key={index}>\r\n      <div className=\"friend-profile\">\r\n        <img src={useravatar ? useravatar : profile} alt=\"profilepic\" />\r\n        <h6>{username}</h6>\r\n      </div>\r\n      <div className=\"friend-country\">\r\n        <img src={flag} alt=\"flag\" />\r\n        {profileurl ? (\r\n          <a href={profileurl}>\r\n            {' '}\r\n            <h6>Steam profile</h6>\r\n          </a>\r\n        ) : (\r\n          <a href={`/profile/?id=${_id}`}>\r\n            {' '}\r\n            <h6>Web profile</h6>\r\n          </a>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\advanceStatisctics.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\reward.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\brackets.jsx",["738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771"],"import React from \"react\";\r\nimport playericon from '../../assets/tournament/group-user-icon.png';\r\nimport trophy from '../../assets/tournament/feature-icon-2.png';\r\nimport coin from '../../assets/tournament/money-icon.png';\r\nimport prestigio from '../../assets/tournament/Prestigio.png';\r\n\r\n\r\nconst TournamentBrakets = ({ tournamentData }) => {\r\n    const { tournamentEnd } = tournamentData;\r\n    return (\r\n        <div className=\"tournament-bracket\">\r\n            {tournamentEnd ? <React.Fragment>\r\n                <div class=\"tournament-bracket-box\">\r\n                    <ul class=\"tournament-bracket-list\">\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content yellow-border \">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 1</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content light-color\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 2</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content yellow-border\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 3</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content light-color\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 4</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content light-color\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 5</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content yellow-border\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 6</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content yellow-border light-green\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 7</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content light-color\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 8</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content yellow-border\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 1</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content light-color\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 2</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content yellow-border\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 3</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content light-color\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 4</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content light-color\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 5</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content yellow-border\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 6</h3>\r\n                            </div>\r\n                        </li>\r\n\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content yellow-border light-green\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 7</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content light-color\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 8</h3>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"tournament-bracket-box\">\r\n                    <ul class=\"tournament-bracket-list\">\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 1</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 3</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 6</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content light-green\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 7</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 1</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 3</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 6</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content light-green\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 7</h3>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"tournament-bracket-box\">\r\n                    <ul class=\"tournament-bracket-list\">\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 1</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 3</h3>\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 1</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 3</h3>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"tournament-bracket-box\">\r\n                    <ul class=\"tournament-bracket-list\">\r\n                        <li class=\"tournament-bracket-item\">\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 1</h3>\r\n                            </div>\r\n                            <div class=\"tournament-bracket-content\">\r\n                                <div className=\"player-icon\">\r\n                                    <img src={playericon} />\r\n                                </div>\r\n                                <h3>Player 3</h3>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"tournament-bracket-box tournament-winner\">\r\n                    <div className=\"tw-box\">\r\n                        <div className=\"tw-upper\">\r\n                            <div className=\"winner-icon\">\r\n                                <img src={trophy} />\r\n                            </div>\r\n                            <h3>Tournament Winner</h3>\r\n                        </div>\r\n                        <div className=\"tw-middle\">\r\n                            Player 1\r\n                    </div>\r\n                        <div className=\"tw-lower\">\r\n                            <div className=\"player-icon\">\r\n                                <img src={playericon} />\r\n                                <img src={prestigio} />\r\n                            </div>\r\n                            <div className=\"prize\">\r\n                                <h3>Prize:</h3>\r\n                                <span>1000\r\n                                <img src={coin} />\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment> : <div className='not-disclosed'><h4>Currently brackets are not disclosed !!</h4></div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TournamentBrakets;\r\n\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\lastMatches.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\registration.jsx",["772","773"],"import React from \"react\";\r\nimport usericon from \"../../assets/tournament/user-icon.png\";\r\n//import icon from \"../../assets/tournament/icon1.png\";\r\nimport { GetPrestigeAccPoint } from \"../../function\";\r\n//import { Button } from \"react-bootstrap\";\r\n\r\nconst TournamentRegistration = ({ tournamentData, handleCloseTeam, CallJoin, isExist, CheckInTournament, isCheckIn, SeeMyStatus, skip, limit, changePage }) => {\r\n    let { gameType, Players } = tournamentData;\r\n    Players = Players ? Players : [];\r\n    //tournamentStart\r\n    return (\r\n        <div className=\"tournament-registration\">\r\n            <div className=\"registration-container\">\r\n                <div className=\"registration-left\">\r\n                    {Players && Players.length > 0 ? <ul className=\"player-list\">\r\n                        {/* Players list */}\r\n                        {Players && Players.slice((skip * limit) - limit, skip * limit).map((el, index) => {\r\n                            return <PlayerItem element={el} index={index} />\r\n                        })}\r\n                    </ul> : <div className='not-disclosed'><h4>No players found </h4></div>}\r\n                    <div className=\"player-status-main\">\r\n                    <div className=\"player-status\">\r\n                        <button className=\"btn btn-tab\" onClick={() => SeeMyStatus()}>See My Status</button>\r\n                        <div className=\"next-btn\">\r\n                            <SimplePaging currentPage={skip} maxItemsPerPage={limit} changePage={changePage} players={Players ? Players : []} />\r\n                            <span>{(skip * limit) - limit + Players.slice((skip * limit) - limit, skip * limit).length} / {Players ? Players.length : 0}</span>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"registration-right\">\r\n                    <div className=\"signup-box\">\r\n                        <div className=\"signup-upper\">\r\n                            <h3>Sign up</h3>\r\n                            <p>Press the button <span> \"play Tournament\" </span> to participate </p>\r\n                        </div>\r\n                        <div className=\"signup-middle tooltipT\">\r\n                            {gameType === '5vs5' ? <button disabled={isExist} className=\"btn btn-tab\" onClick={() => handleCloseTeam()} >Play Tournament</button> : <button className=\"btn btn-tab\" onClick={() => CallJoin()} disabled={isExist}>Play Tournament</button>}\r\n                            {isExist && <span class=\"tooltiptext\">You already exist in this tournament !!</span>}\r\n                        </div>\r\n                        <div className=\"signup-lower\">\r\n                            <button className=\"check-in\" disabled={isCheckIn} onClick={() => CheckInTournament()}>Check in</button>\r\n                            <div className=\"check-in-time\">\r\n                                <p>Start of check in:<br /> <span>00:00</span></p>\r\n                                <p>Time remaining: <br /><span> 05:00 </span></p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"note\">\r\n                        NOTE:The start of check-in indicates how much time remains to be able to press the button \"PLAY TOURNAMENT\" the remaining time\r\n                        is the time that the player has to do it before the tournament starts.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default TournamentRegistration;\r\nconst PlayerItem = ({ element, index }) => {\r\n    //Spna bg-red ,bg-green , player-item active\r\n    const { username, useravatar, prestige1vs1, prestige, isClass, isStatus } = element;\r\n    console.log(\"prestige =>>>\", prestige1vs1, prestige);\r\n    return <li className={`player-item ${isStatus && 'active'}`} key={index}>\r\n        <div className=\"player-content\">\r\n            <div className=\"player-img\">\r\n                <img src={useravatar ? useravatar : usericon} />\r\n                <div className=\"icon\">\r\n                    {/* GetPrestigeAccPoint */}\r\n                    <img src={prestige1vs1 ? GetPrestigeAccPoint(prestige1vs1) : GetPrestigeAccPoint(prestige)} />\r\n                </div>\r\n            </div>\r\n            <h4 className=\"player-name\">{username}</h4>\r\n            <span className={isClass}></span>\r\n        </div>\r\n    </li>\r\n}\r\n\r\n\r\nconst SimplePaging = ({ currentPage, maxItemsPerPage, changePage, players }) => {\r\n    return <div>\r\n        {currentPage > 1 ?\r\n            <button className=\"btn btn-tab\" onClick={() => changePage('back')}>Back</button>\r\n            : null}\r\n        {players.length - 1 > currentPage * maxItemsPerPage ?\r\n            <button className=\"btn btn-tab\" onClick={() => changePage('next')}>Next</button>\r\n            : null}\r\n    </div>;\r\n}\r\n\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\rules.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\testBracket.jsx",["774","775","776","777","778","779","780"],"import React from \"react\";\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport { GetWinnerTWinnerPanelData, GetPrestigeAccPoint } from \"../../function\";\nimport playericon from '../../assets/tournament/group-user-icon.png';\nimport trophy from '../../assets/tournament/feature-icon-2.png';\nimport coin from '../../assets/tournament/money-icon.png';\nimport prestigio from '../../assets/tournament/Prestigio.png';\n\n\nconst TournamentTestBrakets = ({ tournamentData, BracketData }) => {\n    const { tournamentEnd, tournamentPrize } = tournamentData;\n    const handleOpenRoom = (roomid) => {\n        const win = window.open(`/tournamentroom/?id=${roomid}`, \"_blank\");\n        win.focus();\n    }\n    return (\n\n        <TransformWrapper>\n            <TransformComponent>\n                <div className=\"tournament-bracket\">\n                    {tournamentEnd ? <React.Fragment>\n                        {BracketData.length > 0 && BracketData.map((a, i, array) => {\n                            return <React.Fragment> {Object.values(a)[0].length > 0 ? <TournamentRoundsPanel element={Object.values(a)[0]} index={i} handleOpenRoom={handleOpenRoom} /> : <React.Fragment>{Object.values(array[i - 1])[0].length > 0 && <WinnerPanel elements={Object.values(array[i - 1])[0]} tournamentPrize={tournamentPrize} />}</React.Fragment>}</React.Fragment>\n                        })}\n                    </React.Fragment> : <div className='not-disclosed'><h4>Currently brackets are not disclosed !!</h4></div>}\n                </div>\n            </TransformComponent>\n        </TransformWrapper>\n    );\n};\nexport default TournamentTestBrakets;\n\nconst WinnerPanel = ({ elements, tournamentPrize }) => {\n    const { username, useravatar, prestige } = GetWinnerTWinnerPanelData(elements[0]);\n    return <div class=\"tournament-bracket-box tournament-winner\">\n        <div className=\"tw-box\">\n            <div className=\"tw-upper\">\n                <div className=\"winner-icon\">\n                    <img src={trophy} />\n                </div>\n                <h3>Tournament Winner</h3>\n            </div>\n            <div className=\"tw-middle\">\n                {username}\n            </div>\n            <div className=\"tw-lower\">\n                <div className=\"player-icon\">\n                    <img src={useravatar ? useravatar : playericon} />\n                    <img src={GetPrestigeAccPoint(prestige ? prestige : 1000)} />\n                </div>\n                <div className=\"prize\">\n                    <h3>Prize:</h3>\n                    <span>{tournamentPrize}\n                        <img src={coin} />\n                    </span>\n                </div>\n            </div>\n        </div>\n    </div>\n}\n\nconst TournamentRoundsPanel = ({ element, index, handleOpenRoom }) => {\n    return <div class=\"tournament-bracket-box\" key={index}>\n        <ul class=\"tournament-bracket-list\">\n            {element.map((items, jindex) => {\n                return <PlyaerGameItem items={items} jindex={jindex} handleOpenRoom={handleOpenRoom} />\n            })}\n        </ul>\n    </div>\n}\n\nconst PlyaerGameItem = ({ items, jindex, handleOpenRoom }) => {\n    const { team1: { userid: { username, useravatar }, result: { result } }, team2: { userid: { username: username1, useravatar: useravatar1 }, result: { result: result1 } }, roomid } = items;\n    return <li class=\"tournament-bracket-item\" key={jindex} onClick={() => handleOpenRoom(roomid)}>\n        {/* tournament-bracket-content yellow-border light-green */}\n        <div class={`tournament-bracket-content ${result === 'win' ? 'yellow-border' : null}`}>\n            <div className=\"player-icon\">\n                <img src={useravatar ? useravatar : playericon} />\n            </div>\n            <h3>{username}</h3>\n        </div>\n        <div class={`tournament-bracket-content ${result1 === 'win' ? 'yellow-border' : null}`}>\n            <div className=\"player-icon\">\n                <img src={useravatar1 ? useravatar1 : playericon} />\n            </div>\n            <h3>{username1}</h3>\n        </div>\n    </li>\n}","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\profileTop.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\summary.jsx",["781","782","783"],"import React from \"react\";\r\nimport csgo from \"../../assets/tournament/money-icon.png\";\r\nimport csgo1 from \"../../assets/tournament/cover.jpg\";\r\n\r\n\r\n\r\nconst TournamentSummary = ({ tournamentData }) => {\r\n    const { tournamentStarted, playerJoined, banner, gameType, tournamentPrize, tournamentStart, tournamentEnd } = tournamentData;\r\n    const startDataIs = new Date(tournamentStart).toLocaleString().split(\",\");\r\n    return (\r\n        <div className=\"tournament-summary\">\r\n            <div className=\"cover-img\">\r\n                <img src={banner ? banner : csgo1} />\r\n            </div>\r\n            <div className=\"tounament-container\">\r\n                <h3>Tournament Summary</h3>\r\n                <p>Hay muchas variaciones de los pasajes de Lorem Ipsum disponibles, pero la mayoría sufrió alteraciones en alguna manera, ya sea porque se le agregó humor, o palabras aleatorias que no parecen ni un poco creíbles. Si vas a utilizar un pasaje de Lorem Ipsum.</p>\r\n                <div className=\"summery-content\">\r\n                    <div className=\"summery-left\">\r\n                        <ul className=\"summery-list\">\r\n                            <li className=\"summery-item\">\r\n                                <h3>Status</h3>\r\n                            </li>\r\n                            <li className=\"summery-item\">\r\n                                <h3>Registered</h3>\r\n                            </li>\r\n                            <li className=\"summery-item\">\r\n                                <h3>Confirmation(Check-in)</h3>\r\n                            </li>\r\n                            <li className=\"summery-item\">\r\n                                <h3>Tournament Start</h3>\r\n                            </li>\r\n                            <li className=\"summery-item\">\r\n                                <h3>Game Mode</h3>\r\n                            </li>\r\n                            <li className=\"summery-item\">\r\n                                <h3>Prize</h3>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"summery-right\">\r\n                        <ul className=\"summery-list\">\r\n                            <li className=\"summery-item\">\r\n                                {!tournamentEnd ? <React.Fragment><h3>{tournamentStarted ? \"Announced\" : \"Not Announced\"} </h3></React.Fragment> : <h3>Finished </h3>}\r\n                            </li>\r\n                            <li className=\"summery-item\">\r\n                                <h3>{playerJoined ? playerJoined.length : 0} Teams</h3>\r\n                            </li>\r\n                            <li className=\"summery-item\">\r\n                                {!tournamentEnd ? <React.Fragment><h3>{tournamentStarted ? \"Realized\" : \"Unrealized\"} </h3></React.Fragment> : <h3>Finished </h3>}\r\n                            </li>\r\n                            <li className=\"summery-item summary-date\">\r\n                                <h4>{startDataIs[0]}</h4>\r\n                                <h6>{startDataIs[1]}</h6>\r\n                            </li>\r\n                            <li className=\"summery-item\">\r\n                                <h3>{gameType}</h3>\r\n                            </li>\r\n                            <li className=\"summery-item\">\r\n                                <img src={csgo} />\r\n                                <h3>{tournamentPrize}</h3>\r\n                                <img src={csgo} />\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TournamentSummary;\r\n\r\n\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\team\\grouplist.jsx",["784","785","786"],"import React from \"react\";\r\n// import { Link, NavLink } from \"react-router-dom\";\r\nimport usericon from \"../../assets/tournament/user-icon.png\";\r\nimport icon from \"../../assets/tournament/icon1.png\";\r\nimport { GetPrestigeAccPoint } from \"../../function\";\r\nimport { Tab, Tabs, Table } from 'react-bootstrap'\r\n\r\nconst GroupList = ({ joinedmembers, removeMember, isLogged, CheckExist, creator }) => {\r\n    return (\r\n        <div className=\"group-details-section\">\r\n            <h1>Members/Games</h1>\r\n            <Tabs defaultActiveKey=\"addfriends\" id=\"uncontrolled-tab-example\">\r\n                <Tab eventKey=\"addfriends\" title=\"Members\">\r\n                    <div className=\"group-details\">\r\n                        <ul className=\"player-list\">\r\n                            {joinedmembers ? joinedmembers.map((el, i) => {\r\n                                return <li className=\"player-item\" key={i}>\r\n                                    <div className=\"player-content\">\r\n                                        <div className=\"player-img\">\r\n                                            <img src={el.useravatar ? el.useravatar : usericon} />\r\n                                            <div className=\"icon\">\r\n                                                <img src={GetPrestigeAccPoint(el.prestige ? el.prestige : 1000)} />\r\n                                            </div>\r\n                                        </div>\r\n                                        <h4 className=\"player-name\">{el.username}</h4>\r\n                                        {CheckExist && isLogged && isLogged === creator && el._id !== creator && <i className=\"fa fa-times custom-cross\" onClick={() => {\r\n                                            if (\r\n                                                window.confirm(\r\n                                                    'Are you sure to delete this member?'\r\n                                                )\r\n                                            ) {\r\n                                                removeMember('teams', el._id);\r\n                                            }\r\n                                        }} aria-hidden=\"true\"></i>}\r\n\r\n                                    </div>\r\n                                </li>\r\n                            }) : null}\r\n                        </ul>\r\n                    </div>\r\n\r\n                </Tab>\r\n                <Tab eventKey=\"invitefriends\" title=\"Last games \">\r\n                <div className=\"player-stats\">\r\n            <Table striped bordered hover variant=\"dark\" responsive>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>Matches</th>\r\n                        <th>Kills</th>\r\n                        <th>Assists</th>\r\n                        <th>Deaths</th>\r\n                        <th>KD/Ratio</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                        <tr>\r\n                            <td>1</td>\r\n                            <td>Hari</td>\r\n                            <td>15</td>\r\n                            <td>0</td>\r\n                            <td>1</td>\r\n                            <td>15.00</td>\r\n                        </tr>\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n   \r\n\r\n                </Tab>\r\n            </Tabs>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GroupList;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\team\\teamlist.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\voiceservice.jsx",["787","788","789","790","791"],"import React, { useState } from \"react\";\r\nimport {useTranslation} from 'react-i18next';\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Form, Button, Nav} from 'react-bootstrap';\r\n\r\nimport server1 from \"../../assets/menu/servericon1.png\";\r\nimport server2 from \"../../assets/menu/servericon2.png\";\r\n\r\n\r\n\r\n\r\nconst VoiceServer = () => {\r\n   const {t} = useTranslation();\r\n    return (\r\n        <div className=\"voice-service\">\r\n                \r\n            <h3>{t('header.voice-server')}</h3>\r\n\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/\"><img src={server1} alt=\"Server\"/></Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/\"><img src={server2} alt=\"Server\"/></Link>\r\n                </li>\r\n               \r\n            </ul>\r\n            \r\n        </div>\r\n    );\r\n};\r\nexport default VoiceServer;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\outplayedcommunity.jsx",["792","793","794","795","796"],"import React, { useState } from \"react\";\r\nimport {useTranslation} from 'react-i18next';\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Form, Button, Nav} from 'react-bootstrap';\r\n\r\nimport twitter from \"../../assets/social/twitter.png\";\r\nimport instagram from \"../../assets/social/instagram.png\";\r\nimport youtube from \"../../assets/social/youtube.png\";\r\nimport twitch from \"../../assets/social/twitch.png\";\r\n\r\n\r\n\r\nconst OutplayedCommunity = () => {\r\n   const{t} = useTranslation();\r\n    return (\r\n        <div className=\"outplayed-community\">\r\n                \r\n            <h3>{t('header.outplayed-community')}</h3>\r\n\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/\"><img src={twitter} alt=\"twitter\"/></Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/\"><img src={instagram} alt=\"Instagram\"/></Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/\"><img src={youtube} alt=\"Youtube\"/></Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/\"><img src={twitch} alt=\"Twitch\"/></Link>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\nexport default OutplayedCommunity;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\increaseexperience.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\mainmenu.jsx",["797","798","799","800"],"import React, { useState } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Form, Button, Nav} from 'react-bootstrap';\r\nimport {useTranslation} from 'react-i18next';\r\nimport news from \"../../assets/menu/news.png\";\r\nimport hubs from \"../../assets/menu/hubs.png\";\r\nimport matchmaking from \"../../assets/menu/matchmaking.png\";\r\nimport tournaments from \"../../assets/menu/tournament.png\";\r\nimport ladders from \"../../assets/menu/ladder.png\";\r\nimport statistics from \"../../assets/menu/statistic.png\";\r\nimport scouting from \"../../assets/menu/scouting.png\";\r\nimport store from \"../../assets/menu/store.png\";\r\n\r\n\r\nconst MainMenu = () => {\r\n   const {t} = useTranslation();\r\n    return (\r\n        <div className=\"main-menu\">\r\n\r\n            <Nav>\r\n                <NavLink exact className=\"nav-link\" to=\"/news\"><img src={news} alt=\"News\" /> <span>{t('leftsidebar.news')}</span></NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/hubs\"><img src={hubs} alt=\"Hubs\" /> <span>{t('leftsidebar.hubs')}</span></NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/matchmaking\"><img src={matchmaking} alt=\"Matchmaking\" /> <span>{t('leftsidebar.matchmaking')}</span></NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/tournaments\"><img src={tournaments} alt=\"Tournaments\" /> <span>{t('leftsidebar.tournament')}</span></NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/ladder\"><img src={ladders} alt=\"Ladders\" /> <span>{t('leftsidebar.ladders')}</span></NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/statistics\"><img src={statistics} alt=\"Statistics\" /> <span>{t('leftsidebar.statistics')}</span></NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/scoutingarea\"><img src={scouting} alt=\"Scouting Area\" /> <span>{t('leftsidebar.scoutingarea')}</span></NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/store\"><img src={store} alt=\"Store\" /> <span>{t('leftsidebar.store')}</span></NavLink>\r\n            </Nav>\r\n            \r\n        </div>\r\n    );\r\n};\r\nexport default MainMenu;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\adminheader\\header.jsx",["801","802","803"],"import React, { useEffect } from \"react\";\r\nimport \"../admin.css\";\r\nimport menu from '../../../assets/admin/menu-icon.png';\r\nimport admin from '../../../assets/admin/user.jpg';\r\nimport { adminInstance } from \"../../../config/axios\";\r\nconst AdminHeader = ({ setMenuToggle, menutoggle }) => {\r\n\r\n    // useEffect(async () => {\r\n    //     if (localStorage.getItem('webadmintoken')) {\r\n    //         const response = await adminInstance().get('/checkauth');\r\n    //         const { data: { code } } = response;\r\n    //         if (code !== 200) {\r\n    //             localStorage.removeItem('webadmintoken');\r\n    //             window.location.href = '/admin'\r\n    //         }\r\n    //     }\r\n    // }, [])\r\n\r\n    return (\r\n        <div className=\"admin-header\">\r\n\r\n            <div className=\"menu-toggle\">\r\n                <a href=\"javaScript:void(0)\" onClick={() => setMenuToggle(!menutoggle)} >\r\n                    <img src={menu} alt=\"Menu\" />\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"admin-info\">\r\n                <img src={admin} alt=\"Admin\" />\r\n                <h3>Admin</h3>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminHeader;\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\group.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\admin\\adminmenu\\menu.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\friends.jsx",["804","805"],"import React, { useState, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Tabs, Tab, Form } from 'react-bootstrap';\r\nimport { TwitterShareButton, EmailShareButton } from 'react-share';\r\nimport copy from 'copy-to-clipboard';\r\nimport PopupWrapper from '../popups/popupwrapper';\r\nimport friendsicon from '../../assets/header/friend-icon.png';\r\nimport { userInstance } from '../../config/axios';\r\nimport { GetPrestigeAccPoint, Notification } from '../../function';\r\nimport UserContext from '../../context/context';\r\n// import user from \"../../assets/team/user-icon.png\";\r\nimport profile from '../../assets/friend/profileimg.png';\r\nimport flagimg from '../../assets/friend/flag.png';\r\nimport steam from '../../assets/friend/steam.png';\r\nimport premiumm from '../../assets/friend/premium.png';\r\nimport advanced from '../../assets/matchmaking/advanced.png';\r\n// import prestigio from '../../assets/friend/prestigio.png';\r\nimport moneyicon from '../../assets/friend/money-icon.png';\r\nimport twitter from '../../assets/newicon/twitter.png';\r\nimport mail from '../../assets/newicon/mail.png';\r\nimport other from '../../assets/newicon/other.png';\r\n\r\nimport chat from '../../assets/friend/chat.png';\r\nimport chatleft from '../../assets/friend/chatleft.png';\r\n// import { ListItem } from \"react-bootstrap/lib/Media\";\r\nconst Friends = () => {\r\n  const { t } = useTranslation();\r\n  const {\r\n    userDetails: { friends, coins, invitedfriends },\r\n  } = useContext(UserContext);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <div className=\"friends-sidebar\">\r\n      <div className=\"sidebar-header\">\r\n        <img src={friendsicon} alt=\"Friends\" /> Friends\r\n      </div>\r\n\r\n      {friends && friends.length > 0 ? (\r\n        <React.Fragment>\r\n          <div className=\"friend-listsection\">\r\n            {friends.map((el, i) => {\r\n              return <ListFriends element={el} index={i} />;\r\n            })}\r\n          </div>\r\n\r\n          <Button onClick={handleShow}>{t('header.friends.add-friend')}</Button>\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n          <h3>{t('header.friends.not-friend')}</h3>\r\n          <Button onClick={handleShow}>{t('header.friends.add-friend')}</Button>\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {/* Popup wrapper */}\r\n      <PopupWrapper\r\n        show={show}\r\n        handleClose={handleClose}\r\n        heading={'Add Your Friends'}\r\n        defaultClass={'outlayed-popup friends-popup'}\r\n      >\r\n        <Tabs defaultActiveKey=\"addfriends\" id=\"uncontrolled-tab-example\">\r\n          <Tab eventKey=\"addfriends\" title={t('header.friends.add-friend')}>\r\n            <AddFriend />\r\n          </Tab>\r\n          <Tab\r\n            eventKey=\"invitefriends\"\r\n            title={t('header.friends.invite-friend')}\r\n          >\r\n            <InviteFriend coins={coins} invitedfriends={invitedfriends} />\r\n          </Tab>\r\n        </Tabs>\r\n      </PopupWrapper>\r\n    </div>\r\n  );\r\n};\r\nexport default Friends;\r\n\r\nconst AddFriend = () => {\r\n  const { t } = useTranslation();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const SearchProfile = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const { value } = e.target;\r\n      if (value.trim()) {\r\n        const response = await userInstance().get(`/searchProfiles/${value}`);\r\n        const {\r\n          data: { code, profileList },\r\n        } = response;\r\n        if (code === 200) {\r\n          setProfiles(profileList);\r\n        }\r\n      } else {\r\n        setProfiles([]);\r\n      }\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const sendRequest = async (e, _id) => {\r\n    try {\r\n      e.preventDefault();\r\n      const response = await userInstance().post(`/sendRequest`, { _id });\r\n      const {\r\n        data: { code, msg },\r\n      } = response;\r\n      if (code === 200) {\r\n        Notification('success', msg);\r\n        let oldState = [...profiles];\r\n        let index = oldState.findIndex((el) => el._id === _id);\r\n        oldState[index].found = true;\r\n        oldState[index].requested = true;\r\n        setProfiles(oldState);\r\n      } else {\r\n        Notification('danger', msg);\r\n      }\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const acceptRequest = async (e, _id) => {\r\n    try {\r\n      e.preventDefault();\r\n      const response = await userInstance().post(`/acceptRequest`, { _id });\r\n      const {\r\n        data: { code, msg },\r\n      } = response;\r\n      if (code === 200) {\r\n        Notification('success', msg);\r\n        let oldState = [...profiles];\r\n        let index = oldState.findIndex((el) => el._id === _id);\r\n        oldState[index].found = true;\r\n        oldState[index].friends = true;\r\n        oldState[index].recived = false;\r\n        setProfiles(oldState);\r\n      } else {\r\n        Notification('danger', msg);\r\n      }\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const rejectRequest = async (e, _id) => {\r\n    try {\r\n      e.preventDefault();\r\n      const response = await userInstance().post(`/rejectRequest`, { _id });\r\n      const {\r\n        data: { code, msg },\r\n      } = response;\r\n      if (code === 200) {\r\n        Notification('success', msg);\r\n        let oldState = [...profiles];\r\n        let index = oldState.findIndex((el) => el._id === _id);\r\n        oldState[index].found = false;\r\n        oldState[index].friends = false;\r\n        oldState[index].recived = false;\r\n        oldState[index].requested = false;\r\n        setProfiles(oldState);\r\n      } else {\r\n        Notification('danger', msg);\r\n      }\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-friend\">\r\n      <Form>\r\n        <div className=\"addfriend-section\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder={'search user'}\r\n            onChange={(e) => SearchProfile(e)}\r\n          />\r\n          <span>\r\n            <i class=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n          </span>\r\n        </div>\r\n        {profiles.length > 0 ? (\r\n          <div className=\"friendlist-section\">\r\n            {profiles.map((el, i) => {\r\n              return (\r\n                <ListItem\r\n                  element={el}\r\n                  index={i}\r\n                  sendRequest={sendRequest}\r\n                  acceptRequest={acceptRequest}\r\n                  rejectRequest={rejectRequest}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div className=\"nodata\">\r\n            <p>{t('global.no-data')}</p>\r\n          </div>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst InviteFriend = ({ coins, invitedfriends }) => {\r\n  const { t } = useTranslation();\r\n  const copyLink = () => {\r\n    copy(\r\n      `${window.location.origin}/?inviteid=${localStorage.getItem('userid')}`\r\n    );\r\n    Notification('success', 'Link copied');\r\n  };\r\n\r\n  return (\r\n    <div className=\"invite-friend\">\r\n      <div className=\"invited-friend\">\r\n        <img src={moneyicon} alt=\"img\" />\r\n        <h6>{t('header.friends.get-bonus')}</h6>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8\">\r\n          <p className=\"shearable-link\">{t('header.friends.get-link')}</p>\r\n          <div className=\"social-icon\">\r\n            <div className=\"twitter\">\r\n              <TwitterShareButton\r\n                url={`${\r\n                  window.location.origin\r\n                }/?inviteid=${localStorage.getItem('userid')}`}\r\n                title={`Check out what I Share with you`}\r\n              >\r\n                <img src={twitter} alt=\"social-icon\" />\r\n                <p>{t('header.friends.twitter')}</p>\r\n              </TwitterShareButton>\r\n            </div>\r\n            <div className=\"twitter\">\r\n              <EmailShareButton\r\n                subject={`Check out what I Share with you`}\r\n                body={`Click on this link: ${\r\n                  window.location.origin\r\n                }/?inviteid=${localStorage.getItem('userid')}`}\r\n              >\r\n                <img src={mail} alt=\"social-icon\" />\r\n                <p>{t('header.friends.email')}</p>\r\n              </EmailShareButton>\r\n            </div>\r\n            <div className=\"twitter\" onClick={copyLink}>\r\n              <img src={other} alt=\"social-icon\" />\r\n              <p>{t('header.friends.link')}</p>\r\n            </div>\r\n          </div>\r\n          <p className=\"shearable-link1\">{t('header.friends.how-works')}</p>\r\n          <p className=\"subheading\">1. {t('header.friends.invite-link')}</p>\r\n          <p className=\"subheading\">2. {t('header.friends.register-friend')}</p>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"coins-earn\">\r\n            <h6>{t('header.friends.coin-earned')}</h6>\r\n            <div className=\"coins\">\r\n              <img src={moneyicon} alt=\"img\" />\r\n              <h2>{coins ? coins : 0}</h2>\r\n            </div>\r\n            <h6>{invitedfriends ? invitedfriends.length : 0}</h6>\r\n            <h6>{t('header.friends.invited-friends')}</h6>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ListItem = ({\r\n  element,\r\n  index,\r\n  sendRequest,\r\n  acceptRequest,\r\n  rejectRequest,\r\n}) => {\r\n  const {\r\n    username,\r\n    useravatar,\r\n    prestige,\r\n    ispremium,\r\n    found,\r\n    requested,\r\n    recived,\r\n    friends,\r\n    _id,\r\n    profileurl,\r\n    ispremiumadvnaced,\r\n  } = element;\r\n  const { t } = useTranslation();\r\n  return (\r\n    <div className=\"friend-list\" key={index}>\r\n      <div className=\"profile-section\">\r\n        <div className=\"profile\">\r\n          <img\r\n            src={useravatar ? useravatar : profile}\r\n            alt=\"profile-img\"\r\n            className=\"userimg\"\r\n          />\r\n        </div>\r\n        <div className=\"username\">\r\n          <h6>{username}</h6>\r\n          {ispremium && (\r\n            <img src={premiumm} alt=\"premium-img\" className=\"premium\" />\r\n          )}\r\n          {ispremiumadvnaced && (\r\n            <img src={advanced} alt=\"premium-img\" className=\"premium\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"steam-image\">\r\n        <img src={flagimg} alt=\"flagimg-img\" />\r\n        {profileurl && (\r\n          <a href={profileurl} target=\"_blank\">\r\n            <img src={steam} alt=\"steam-img\" />\r\n          </a>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"presitigo-img\">\r\n        <img\r\n          src={GetPrestigeAccPoint(prestige ? prestige : 1000)}\r\n          alt=\"presitigo-img\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"buttonsection\">\r\n        <div className=\"friend-button\">\r\n          {!found && (\r\n            <button onClick={(e) => sendRequest(e, _id)} value=\"addfriend\">\r\n              {t('header.friends.add-friend')}\r\n            </button>\r\n          )}\r\n          {found && requested && (\r\n            <button disabled={true} value=\"addfriend\" className=\"already-send\">\r\n              {t('header.friends.request-sent')}\r\n            </button>\r\n          )}\r\n          {found && recived && (\r\n            <React.Fragment>\r\n              <button onClick={(e) => acceptRequest(e, _id)} value=\"addfriend\">\r\n                {t('header.friends.accept')}\r\n              </button>\r\n              <button onClick={(e) => rejectRequest(e, _id)} value=\"addfriend\">\r\n                {t('header.friends.reject')}\r\n              </button>\r\n            </React.Fragment>\r\n          )}\r\n          {found && friends && (\r\n            <button disabled={true} value=\"addfriend\" className=\"already-send\">\r\n              {t('header.friends.friends')}\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ListFriends = ({ element, index }) => {\r\n  const { bothfriends } = element;\r\n  const { online, username, useravatar } = bothfriends[0];\r\n  return (\r\n    <div className=\"addfriend-list\" key={index}>\r\n      <div className=\"friend-text\">\r\n        <i\r\n          className={`fa fa-circle ${online ? 'green' : 'gray'}`}\r\n          aria-hidden=\"true\"\r\n        ></i>\r\n        <img src={useravatar ? useravatar : profile} alt=\"friend\" />\r\n        <h6>{username}</h6>\r\n      </div>\r\n      <div className=\"friend-chat\">\r\n        <img src={chat} alt=\"chat\" />\r\n        <img src={chatleft} alt=\"chat\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sidebar\\team.jsx",["806"],"import React, { useState, useRef, useContext } from 'react';\r\nimport Select from 'react-select';\r\nimport { useTranslation } from 'react-i18next';\r\nimport countryList from 'react-select-country-list';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Tabs, Tab, Form, Dropdown } from 'react-bootstrap';\r\nimport copy from 'copy-to-clipboard';\r\nimport { userInstance } from '../../config/axios';\r\nimport { Notification, validateTeamCreation } from '../../function/index';\r\nimport UserContext from '../../context/context';\r\nimport PopupWrapper from '../popups/popupwrapper';\r\nimport teamicon from '../../assets/header/team-icon.png';\r\nimport user from '../../assets/team/user-icon.png';\r\nimport chat from '../../assets/friend/chat.png';\r\nimport arrow from '../../assets/header/arrow-down.png';\r\nimport profile from '../../assets/friend/profileimg.png';\r\nimport userIcon from '../../assets/header/user-icon.png';\r\n\r\nconst Team = () => {\r\n  const { t } = useTranslation();\r\n  const {\r\n    userDetails: { teams, _id, friends },\r\n  } = useContext(UserContext);\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [key, setKey] = useState('createteam');\r\n  const [teamid, setTeamid] = useState('');\r\n  const [renderbutton, setRenderButton] = useState(false);\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [invitedMember, setInvitedMember] = useState([]);\r\n  const [createT, setCreateT] = useState(false);\r\n  const [isCaptain, setActivecaptain] = useState();\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setKey('createteam');\r\n    setTeamid('');\r\n    setRenderButton(false);\r\n  };\r\n  const handleShow = () => {\r\n    setShow(true);\r\n    setCreateT(true);\r\n  };\r\n  const imgRef = useRef(null);\r\n  const [name, setName] = useState('');\r\n  const [tag, setTag] = useState('');\r\n  const [country, SetCountry] = useState(null);\r\n  const [errors, setErrors] = useState({});\r\n  const countrylist = countryList().getData();\r\n  const changeHandler = (country) => {\r\n    SetCountry(country);\r\n  };\r\n\r\n  const CreateMyTeam = async (e) => {\r\n    e.preventDefault();\r\n    let checkValid = imgRef.current.files[0]\r\n      ? imgRef.current.files[0].type.split('/')\r\n      : false;\r\n    let payload = { name, tag, country, checkValid };\r\n    const { errors, isValid } = validateTeamCreation(payload);\r\n    console.log(errors);\r\n    setErrors(errors);\r\n    if (!isValid) {\r\n      return;\r\n    }\r\n    addData();\r\n  };\r\n  const addData = async () => {\r\n    const data = new FormData();\r\n    data.append('file', imgRef.current.files[0]);\r\n    const payload = { name, tag, country };\r\n    const response = await userInstance().post(`/createteam`, data, {\r\n      params: payload,\r\n    });\r\n    const { code, msg, teamid } = response.data;\r\n    if (code === 200) {\r\n      Notification('success', msg);\r\n      setRenderButton(true);\r\n      setTeamid(teamid);\r\n    } else {\r\n      Notification('danger', msg);\r\n    }\r\n  };\r\n\r\n  const getProfiles = async (e) => {\r\n    try {\r\n      const { value } = e.target;\r\n      if (value.trim()) {\r\n        const exp = new RegExp(value.toLowerCase());\r\n        let filteruser = friends\r\n          .filter((el) => exp.test(el.bothfriends[0].username.toLowerCase()))\r\n          .map((el) => el.bothfriends[0]);\r\n        setProfiles(filteruser);\r\n        // const response = await userInstance().get(`/searchuser/${value}`);\r\n        // const {\r\n        //   data: { code, profileList },\r\n        // } = response;\r\n        // console.log(profileList);\r\n        // console.log(friends);\r\n        // if (code === 200) {\r\n        //   setProfiles(profileList);\r\n        // }\r\n      } else {\r\n        setProfiles([]);\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n  const selectMember = (i) => {\r\n    const oldState = [...profiles];\r\n    let oldStateInvited = [...invitedMember];\r\n    if (oldStateInvited.length <= 3) {\r\n      const { _id } = oldState[i];\r\n      const checkExist = oldStateInvited.filter((el) => el._id === _id);\r\n      if (checkExist.length === 0) {\r\n        oldStateInvited.push(oldState[i]);\r\n        setInvitedMember(oldStateInvited);\r\n        setProfiles([]);\r\n      } else {\r\n        setErrors({ err: 'Already selected' });\r\n      }\r\n    } else {\r\n      setErrors({ err: 'You can select only up to 4 players' });\r\n    }\r\n  };\r\n\r\n  const removeMember = (_id) => {\r\n    let oldStateInvited = [...invitedMember];\r\n    const checkExist = oldStateInvited.filter((el) => el._id !== _id);\r\n    setInvitedMember(checkExist);\r\n  };\r\n  const assignCaptain = (id) => {\r\n    let oldStateInvited = [...invitedMember];\r\n    oldStateInvited.forEach((el) => {\r\n      if (el._id === id) {\r\n        setActivecaptain(id);\r\n        el.active = true;\r\n      } else {\r\n        el.active = false;\r\n      }\r\n    });\r\n    setInvitedMember(oldStateInvited);\r\n  };\r\n\r\n  const sendInvitation = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      if (invitedMember.length > 0) {\r\n        const inviteArray = invitedMember.map((el) => {\r\n          return el._id;\r\n        });\r\n        const payload = { invitedmembers: inviteArray, teamid, isCaptain };\r\n        const response = await userInstance().post('/inviteinteam', payload);\r\n        const {\r\n          data: { code, msg },\r\n        } = response;\r\n        if (code === 200) {\r\n          Notification('success', 'Invited successfully');\r\n          handleClose();\r\n          setInvitedMember([]);\r\n          setProfiles([]);\r\n        } else {\r\n          Notification('danger', msg);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      return e;\r\n    }\r\n  };\r\n\r\n  const openInvitePopup = (id) => {\r\n    setKey('addmember');\r\n    handleShow();\r\n    setTeamid(id);\r\n    setCreateT(false);\r\n  };\r\n  return (\r\n    <div className=\"team-sidebar\">\r\n      <div className=\"sidebar-header\">\r\n        <img src={teamicon} alt=\"Friends\" /> Teams\r\n      </div>\r\n      {teams && teams.length > 0 ? (\r\n        <>\r\n          <div className=\"dropsown-list\">\r\n            {teams.map((el, i) => {\r\n              return (\r\n                <TeamListDropDown\r\n                  element={el}\r\n                  index={i}\r\n                  openInvitePopup={openInvitePopup}\r\n                  _id={_id}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <Button onClick={handleShow} className=\"create-teambtn\">\r\n            {t('header.team.create-team')}\r\n          </Button>\r\n        </>\r\n      ) : (\r\n        <React.Fragment>\r\n          <h3> {t('header.team.not-a-team')}</h3>\r\n          <Button onClick={handleShow}> {t('header.team.create-team')}</Button>\r\n        </React.Fragment>\r\n      )}\r\n\r\n      <PopupWrapper\r\n        show={show}\r\n        handleClose={handleClose}\r\n        heading={'Create a Team'}\r\n        defaultClass={'outlayed-popup team-popup'}\r\n      >\r\n        <Tabs\r\n          activeKey={key}\r\n          id=\"uncontrolled-tab-example\"\r\n          onSelect={(k) => setKey(k)}\r\n        >\r\n          <Tab eventKey=\"createteam\" title={t('header.team.create-team')}>\r\n            <CreateTeam\r\n              changeHandler={changeHandler}\r\n              countrylist={countrylist}\r\n              country={country}\r\n              setName={setName}\r\n              setTag={setTag}\r\n              CreateMyTeam={CreateMyTeam}\r\n              imgRef={imgRef}\r\n              renderbutton={renderbutton}\r\n              setShow={setShow}\r\n              show={show}\r\n              setKey={setKey}\r\n              errors={errors}\r\n            />\r\n          </Tab>\r\n          <Tab\r\n            eventKey=\"addmember\"\r\n            title={t('header.team.add-member')}\r\n            disabled={createT}\r\n          >\r\n            <AddMembers\r\n              getProfiles={getProfiles}\r\n              profileList={profiles}\r\n              selectMember={selectMember}\r\n              invitedMember={invitedMember}\r\n              removeMember={removeMember}\r\n              assignCaptain={assignCaptain}\r\n              errors={errors}\r\n              sendInvitation={sendInvitation}\r\n              teamid={teamid}\r\n            />\r\n          </Tab>\r\n        </Tabs>\r\n      </PopupWrapper>\r\n    </div>\r\n  );\r\n};\r\nexport default Team;\r\n\r\nconst CreateTeam = ({\r\n  changeHandler,\r\n  countrylist,\r\n  country,\r\n  setName,\r\n  setTag,\r\n  CreateMyTeam,\r\n  imgRef,\r\n  renderbutton,\r\n  setShow,\r\n  show,\r\n  setKey,\r\n  errors,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <div className=\"create-team\">\r\n      <Form onSubmit={CreateMyTeam}>\r\n        <Form.Group controlId=\"formBasicloginone\">\r\n          <Form.Label> {t('header.team.team-name')}: </Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t('header.team.team-name')}\r\n            name=\"name\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n          {errors.name && <span style={{ color: 'red' }}>{errors.name}</span>}\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicloginone\">\r\n          <Form.Label>{t('header.team.team-tag')}: </Form.Label>\r\n          <Form.Control\r\n            type=\"tex\"\r\n            placeholder={t('header.team.team-tag')}\r\n            name=\"tag\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => setTag(e.target.value)}\r\n          />\r\n          {errors.tag && <span style={{ color: 'red' }}>{errors.tag}</span>}\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicloginone\">\r\n          <Form.Label>{t('header.team.country')}: </Form.Label>\r\n          <div className=\"profile-menu\">\r\n            <Select\r\n              options={countrylist}\r\n              value={country}\r\n              onChange={changeHandler}\r\n            />\r\n          </div>\r\n          {errors.country && (\r\n            <span style={{ color: 'red' }}>{errors.country}</span>\r\n          )}\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicloginone\">\r\n          <div className=\"upload-image-team\">\r\n            <Form.File\r\n              id=\"exampleFormControlFile1\"\r\n              label=\"Logo:\"\r\n              ref={imgRef}\r\n            />\r\n            {errors.image && (\r\n              <span style={{ color: 'red' }}>{errors.image}</span>\r\n            )}\r\n          </div>\r\n          <div className=\"team-popup-button\">\r\n            {renderbutton ? (\r\n              <React.Fragment>\r\n                <Button\r\n                  className=\"add-member-btn\"\r\n                  onClick={() => setKey('addmember')}\r\n                >\r\n                  {t('header.team.add-member')}\r\n                </Button>\r\n                <Button\r\n                  className=\"add-member-later\"\r\n                  onClick={() => setShow(!show)}\r\n                >\r\n                  {t('header.team.add-later')}\r\n                </Button>\r\n              </React.Fragment>\r\n            ) : (\r\n              <Button className=\"add-member-btn\" type=\"submit\">\r\n                {t('header.team.create-team')}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const AddMembers = () => {\r\n//     return (\r\n//         <div className=\"add-member\">\r\n\r\n//             <Form>\r\n//                 <Form.Group controlId=\"formBasicloginone\">\r\n//                     <Form.Label>Invite link: </Form.Label>\r\n//                     <Form.Control\r\n//                         type=\"name\"\r\n//                         placeholder=\"Name\"\r\n//                         name=\"name\"\r\n//                         autoComplete=\"off\"\r\n//                     />\r\n//                     <Button className=\"copy-link\">Copy</Button>\r\n//                 </Form.Group>\r\n\r\n//                 <Form.Group controlId=\"formBasicloginone\">\r\n//                     <Form.Label>Add members: </Form.Label>\r\n//                     <Form.Control\r\n//                         type=\"name\"\r\n//                         placeholder=\"Search member\"\r\n//                         name=\"name\"\r\n//                         autoComplete=\"off\"\r\n//                     />\r\n//                 </Form.Group>\r\n\r\n//                 <Form.Group className=\"invited-players\" controlId=\"formBasicloginone\">\r\n//                     <span>Invited Players</span>\r\n//                     <div className=\"invite-palyer-content\">\r\n//                         <div className=\"invite-palyer-box\">\r\n//                             <div className=\"invite-palyer-img\">\r\n//                                 <i className=\"fa fa-times\"></i>\r\n//                                 <img src={user} alt=\"user\" />\r\n//                                 <span>Crismow</span>\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n//                 </Form.Group>\r\n\r\n//                 <div className=\"team-popup-button\">\r\n//                     <Button className=\"send-invitation\">Send Invitation</Button>\r\n//                 </div>\r\n\r\n//             </Form>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\nconst AddMembers = ({\r\n  getProfiles,\r\n  profileList,\r\n  selectMember,\r\n  invitedMember,\r\n  removeMember,\r\n  errors,\r\n  sendInvitation,\r\n  teamid,\r\n  assignCaptain,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <div className=\"add-member\">\r\n      <Form>\r\n        <Form.Group controlId=\"formBasicloginone\">\r\n          <Form.Label>{t('header.team.invite-link')}: </Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            name=\"name\"\r\n            autoComplete=\"off\"\r\n            disabled={true}\r\n            value={`${window.location.origin}/teamdetails/?id=${teamid}`}\r\n          />\r\n          <Button\r\n            className=\"copy-link\"\r\n            onClick={() => {\r\n              copy(`${window.location.origin}/teamdetails/?id=${teamid}`);\r\n              Notification('success', 'Link copied !!');\r\n            }}\r\n          >\r\n            {t('header.team.copy')}\r\n          </Button>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicloginone\">\r\n          <Form.Label>{t('header.team.add-member')}: </Form.Label>\r\n          <Form.Control\r\n            type=\"name\"\r\n            placeholder=\"Search member\"\r\n            name=\"name\"\r\n            autoComplete=\"off\"\r\n            onChange={getProfiles}\r\n          />\r\n          <Button className=\"search-member\">\r\n            <i className=\"fa fa-search\"></i>\r\n          </Button>\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"invited-players\" controlId=\"formBasicloginone\">\r\n          <span>{t('header.team.selected-player')}</span>\r\n          <div className=\"invite-palyer-content\">\r\n            {invitedMember.length > 0 ? (\r\n              invitedMember.map((el, i) => {\r\n                return (\r\n                  <InvitedMembers\r\n                    element={el}\r\n                    index={i}\r\n                    removeMember={removeMember}\r\n                    assignCaptain={assignCaptain}\r\n                  />\r\n                );\r\n              })\r\n            ) : (\r\n              <span>{t('header.team.no-selected')}</span>\r\n            )}\r\n          </div>\r\n        </Form.Group>\r\n        <div className=\"team-popup-button\">\r\n          <Button\r\n            className=\"send-invitation\"\r\n            onClick={(e) => sendInvitation(e)}\r\n            disabled={invitedMember.length <= 0 ? true : false}\r\n          >\r\n            {t('header.team.send-invitation')}\r\n          </Button>\r\n          {errors.err && <span style={{ color: 'red' }}>{errors.err}</span>}\r\n        </div>\r\n        {profileList.length > 0 && (\r\n          <div className=\"search-list search-list-team\">\r\n            <div className=\"list\">\r\n              {profileList.map((el, i) => {\r\n                return (\r\n                  <ListItem2\r\n                    element={el}\r\n                    index={i}\r\n                    selectMember={selectMember}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TeamListDropDown = ({ element, index, openInvitePopup, _id: userid }) => {\r\n  const { name, joinedmembers, teamlogo, _id, creator } = element;\r\n  return (\r\n    <Dropdown key={index} className=\"dropdown-team\">\r\n      <Dropdown.Toggle\r\n        variant=\"success\"\r\n        id=\"dropdown-basic\"\r\n        className=\"teamlist-dropdown\"\r\n      >\r\n        <img src={teamlogo ? teamlogo : profile} alt=\"team\" />\r\n        <h6>{name}</h6>\r\n        <img src={arrow} alt=\"arrow\" className=\"arrow\" />\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <div className=\"team-listsection\">\r\n          {joinedmembers &&\r\n            joinedmembers.map((el, i) => {\r\n              return <ListItem element={el} index={i} />;\r\n            })}\r\n        </div>\r\n        <div className=\"Both-button-sho\">\r\n          {userid === creator && (\r\n            <Button\r\n              className=\"add-in-team\"\r\n              onClick={() => openInvitePopup(_id)}\r\n            >\r\n              <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\r\n            </Button>\r\n          )}\r\n          <Link\r\n            to={`/teamdetails/?id=${_id}`}\r\n            target=\"_blank\"\r\n            className=\"add-in-team\"\r\n          >\r\n            <i class=\"fa fa-eye\" aria-hidden=\"true\"></i>\r\n          </Link>\r\n        </div>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nconst ListItem = ({ element, index }) => {\r\n  const { username, useravatar, online } = element;\r\n  return (\r\n    <div className=\"team-list\" key={index}>\r\n      <div className=\"friend-text\">\r\n        <i\r\n          className={`fa fa-circle ${online ? 'green' : 'gray'}`}\r\n          aria-hidden=\"true\"\r\n        ></i>\r\n        <img src={useravatar ? useravatar : profile} alt=\"friend\" />\r\n        <h6>{username}</h6>\r\n      </div>\r\n      <div className=\"friend-chat\">\r\n        <img src={chat} alt=\"chat\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ListItem2 = ({ element, index, selectMember }) => {\r\n  const { username, useravatar } = element;\r\n  return (\r\n    <h6 key={index} onClick={() => selectMember(index)}>\r\n      <img src={useravatar ? useravatar : userIcon} />\r\n      {username}\r\n    </h6>\r\n  );\r\n};\r\n\r\nconst InvitedMembers = ({ element, index, removeMember, assignCaptain }) => {\r\n  const { _id, username, useravatar, active } = element;\r\n  return (\r\n    <div\r\n      className={\r\n        active ? 'invite-palyer-box activecaptain' : 'invite-palyer-box'\r\n      }\r\n      key={index}\r\n    >\r\n      <div className=\"invite-palyer-img\">\r\n        <i\r\n          class=\"fa fa-graduation-cap captainicon\"\r\n          onClick={() => {\r\n            if (window.confirm('Are you sure to assign captain?')) {\r\n              assignCaptain(_id);\r\n            }\r\n          }}\r\n        ></i>\r\n        <i className=\"fa fa-times\" onClick={() => removeMember(_id)}></i>\r\n        <img src={useravatar ? useravatar : user} alt=\"user\" />\r\n        <span>{username}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\footer\\footer.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\header\\header.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\scouting\\scouting.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\tournamentheader.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\lookinggame5vs5.jsx",["807","808","809","810","811","812","813"],"import React from \"react\";\r\nimport \"./matchmaking.css\";\r\n// import { Link, NavLink } from \"react-router-dom\";\r\n// import { Button, Form } from 'react-bootstrap';\r\n// import i from \"../../assets/matchmaking/i.png\";\r\nimport userimg from \"../../assets/matchmaking/user-icon.png\";\r\nimport cancelimg from \"../../assets/matchmaking/cross.png\";\r\nimport checkimg from \"../../assets/matchmaking/check.png\";\r\nimport { FormatTimer } from \"../../function\";\r\nimport userimg1 from '../../assets/matchmaking/user-icon-red.png';\r\nimport inviteuser from '../../assets/matchmaking/group-user-icon.png';\r\nconst LookingGame5vs5 = ({\r\n  timerView: { timer, isValid },\r\n  typeValue: { type },\r\n  StartQueue,\r\n  removeQueue,\r\n  members,\r\n  solo,\r\n  username,\r\n  useravatar,\r\n  myGroupMembers,\r\n  isGroup,\r\n  groupJoinedLength,\r\n  handleClose,\r\n  StartGroupMatchmkaing\r\n}) => {\r\n  // console.log(members);\r\n  return (\r\n    <div className=\"looking-game\">\r\n      <div className=\"looking-game-selection5vs5\">\r\n        <div className=\"game-selection5vs5\">\r\n          <div className=\"image-section\">\r\n            {!solo && <> {isGroup ? <React.Fragment>{myGroupMembers.slice(1, 3).map((el, i) => {\r\n              return <ListGroupPlayer element={el} index={i} isGroup={isGroup} handleClose={handleClose} />\r\n            })}</React.Fragment> : <React.Fragment>{members && members.slice(1, 3).map((el, i) => {\r\n              return <ListTeamPlayer element={el} index={i} />\r\n            })}</React.Fragment>}</>}\r\n          </div>\r\n          <h4 className=\"text groupbtn\">\r\n            MM:{type ? type.toUpperCase() : null}\r\n          </h4>\r\n        </div>\r\n        <div className=\"game-selection-5vs5\">\r\n          {/* <img src={cancelimg} className=\"cancelbtn\" /> <br /> */}\r\n          <img src={useravatar ? useravatar : userimg} className=\"userimg\" />\r\n          <h4 className=\"text\">{username}</h4>\r\n          <h5 className=\"timer1\">{FormatTimer(timer ? timer : 0)}</h5>\r\n          {!isValid ? (\r\n            <button\r\n              type=\"submit\"\r\n              value=\"start\"\r\n              onClick={() => isGroup ? StartGroupMatchmkaing() : StartQueue()}\r\n              className=\"btn start-btn\"\r\n            >\r\n              Start\r\n            </button>\r\n          ) : (\r\n              <button type=\"submit\" value=\"cancel\" onClick={() => removeQueue()} className=\"btn btn-danger\">\r\n                CANCEL\r\n              </button>\r\n            )}\r\n        </div>\r\n        <div className=\"game-selection5vs55\">\r\n          {isGroup && <h4 style={{ textAlign: \"right\" }}>INVITE TO GROUP: {groupJoinedLength ? groupJoinedLength.length : 0}/5\r\n\r\n          {/* <img src={inviteuser} style={{ height: \"40px\" }} />  */}\r\n\r\n          </h4>}\r\n          <div className=\"image-section\">\r\n            {!solo && <>  {isGroup ? <React.Fragment>{myGroupMembers.slice(3, 5).map((el, i) => {\r\n              return <ListGroupPlayer element={el} index={i} isGroup={isGroup} handleClose={handleClose} />\r\n            })}</React.Fragment> : <React.Fragment>{members && members.slice(3, 5).map((el, i) => {\r\n              return <ListTeamPlayer element={el} index={i} />\r\n            })}</React.Fragment>}</>}\r\n          </div>\r\n          <h4>\r\n            IN QUEUE: <span>0</span>\r\n          </h4>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LookingGame5vs5;\r\n\r\n\r\nexport const ListTeamPlayer = ({ element, index }) => {\r\n  const { useravatar, username } = element ? element : {};\r\n  return <div className=\"img1\" key={index}>\r\n    <React.Fragment>  <img src={useravatar ? useravatar : userimg} className=\"img1-check\" />\r\n      <p className=\"text\">{username}</p></React.Fragment>\r\n  </div>\r\n}\r\n\r\nexport const ListGroupPlayer = ({ element, index: i, isGroup, handleClose }) => {\r\n  const { user, index, invited, joined } = element ? element : {};\r\n  const { username, useravatar } = user ? user : {};\r\n  return <div className=\"img1\" key={i}>\r\n    {isGroup && <React.Fragment>\r\n      {invited && !joined && <img src={cancelimg} className=\"cancelbtn\" />}\r\n      {!invited && joined && username && <img src={checkimg} className=\"cancelbtn\" />}\r\n      {/* <h6 className=\"ready-text\">Not Ready</h6> */}\r\n    </React.Fragment>}\r\n    {username ? <React.Fragment>  <img src={useravatar ? useravatar : userimg} className=\"img1-check\" />\r\n      <p className=\"text\">{username}</p></React.Fragment> : <div className=\"img1\" onClick={() => handleClose(index, 'open')}>\r\n        <br />\r\n        <img src={userimg1} className=\"img1-check1\" />\r\n      </div>}\r\n  </div>\r\n}","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\matchmakinggroup.jsx",["814"],"import React from 'react';\nimport { Form, Button } from \"react-bootstrap\";\nimport PopupWrapper from \"./popupwrapper\";\nimport user from \"../../assets/header/group-user-icon.png\";\nconst MatchMakingGroup = ({ show, handleClose, onlinePlyaers, joinedPlayers, selectedPlayers, selectMember, removeMember, errors, sendInvitation, userid, InviteInGroup }) => {\n    return <PopupWrapper show={show} handleClose={handleClose} heading={\"Invite in the group\"} defaultClass={\"outlayed-popup team-popup group-popup\"}>\n        <GroupInvite onlinePlyaers={onlinePlyaers} joinedPlayers={joinedPlayers} selectMember={selectMember} selectedPlayers={selectedPlayers} removeMember={removeMember} errors={errors} sendInvitation={sendInvitation} userid={userid} InviteInGroup={InviteInGroup} />\n    </PopupWrapper>\n}\n\nconst GroupInvite = ({ onlinePlyaers, joinedPlayers, selectedPlayers, selectMember, removeMember, errors, sendInvitation, userid, InviteInGroup }) => {\n    return (\n        <div className=\"add-member\">\n            <Form>\n                {onlinePlyaers.length > 0 ? <Form.Group className=\"invited-players\" controlId=\"formBasicloginone\">\n                    <span>Online friends</span>\n                    <div className=\"invite-palyer-content\">\n                        {onlinePlyaers.length > 0 ? onlinePlyaers.map((el, i) => {\n                            return <InvitedMembers element={el} index={i} InviteInGroup={InviteInGroup} />\n                        }) : <span>No any friends are online, please try to add friends and then invite them into the group</span>}\n                    </div>\n                </Form.Group> : <h6>No any online players found</h6>}\n\n                {/* <Form.Group className=\"invited-players\" controlId=\"formBasicloginone\">\n                    <span>Selected Players</span>\n                    <div className=\"invite-palyer-content\">\n                        {selectedPlayers.length > 0 ? selectedPlayers.map((el, i) => {\n                            return <Listings element={el} index={i} handleFunction={removeMember} type='remove' removetype='state' />\n                        }) : <span>No players selecetd</span>}\n                    </div>\n                </Form.Group> */}\n\n                {/* <Form.Group className=\"invited-players\" controlId=\"formBasicloginone\">\n                    <span>Current Players in the group</span>\n                    <div className=\"invite-palyer-content\">\n                        {joinedPlayers.length > 0 || selectedPlayers.length > 0 ? <React.Fragment>\n\n                            {joinedPlayers.map((el, i) => {\n                                return <Listings element={el} index={i} handleFunction={removeMember} type='remove' removetype='db' userid={userid} />\n                            })}\n\n                            {selectedPlayers.map((el, i) => {\n                                return <Listings element={el} index={i} handleFunction={removeMember} type='remove' removetype='state' />\n                            })}\n\n                        </React.Fragment> : <span>No players in the group</span>}\n                    </div>\n                </Form.Group> */}\n                {/* <div className=\"team-popup-button\">\n                    <Button className=\"send-invitation\" onClick={(e) => sendInvitation(e)} disabled={selectedPlayers.length <= 0 ? true : false}>Send Invitation</Button>\n                    {errors.err && <span style={{ color: 'red' }}>{errors.err}</span>}\n                </div> */}\n            </Form>\n        </div>\n    );\n};\nexport default MatchMakingGroup;\n\n// const Listings = ({ element, index, InviteInGroup, type, removetype, userid }) => {\n//     const { _id, username, useravatar } = element;\n//     return <div className=\"invite-palyer-box\" key={index}>\n//         <div className=\"invite-palyer-img\">\n//             {type === 'select' ? <i className=\"fa fa-plus-circle\" style={{ color: 'green' }} onClick={() => InviteInGroup(index)}></i> :\n//                 _id !== userid ? <i className=\"fa fa-times\" onClick={() => InviteInGroup(_id, removetype)}></i> : null}\n//             <img src={useravatar ? useravatar : user} alt=\"user\" />\n//             <span>{username}</span>\n//         </div>\n//     </div>\n// }\n\nconst InvitedMembers = ({ element, index, InviteInGroup }) => {\n    const { _id, username, useravatar, ingroup } = element;\n    return <div className={`invite-palyer-box ${ingroup ? 'ingroup' : ''}`} key={index} disabled={ingroup}>\n        <div className=\"invite-palyer-img\">\n            <i class=\"fa fa-plus-circle\" style={{ color: 'green', fontSize: '20px' }} onClick={() => {\n                if (\n                    window.confirm(\n                        'Are you sure invite this member in your group ?'\n                    )\n                ) {\n                    InviteInGroup(_id);\n                }\n            }} aria-hidden=\"true\"></i>\n            <img src={useravatar ? useravatar : user} alt=\"user\" />\n            <span>{username}</span>\n        </div>\n    </div>\n}","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\scouting\\filter-section.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\featuredstreaming.jsx",["815"],"import React from \"react\";\r\nimport \"./matchmaking.css\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nimport Slider from \"react-slick\";\r\nimport slide1 from \"../../assets/home/slider-1.jpg\";\r\nimport slide2 from \"../../assets/home/slider-2.jpg\";\r\nimport slide3 from \"../../assets/home/slider-3.jpg\";\r\n\r\n\r\nconst FeaturedStreaming = () => {\r\n\r\n\r\n    const feature = {\r\n        dots: false,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 3,\r\n        slidesToScroll: 1,\r\n        responsive: [\r\n            {\r\n              breakpoint: 1024,\r\n              settings: {\r\n                slidesToShow: 2,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true\r\n              }\r\n            },\r\n            {\r\n              breakpoint: 480,\r\n              settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n              }\r\n            }\r\n          ]\r\n      };\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"feature-streaming\">\r\n\r\n                <div className=\"feature-stream\">\r\n                        <h3>Featured streams <Link to=\"/\">See more streamings</Link></h3>\r\n                        \r\n\r\n                        <div className=\"feature-slider\">\r\n\r\n                            <Slider {...feature}>\r\n                                    <div className=\"home-slider-img\">\r\n                                        <img src={slide1} alt=\"\" />\r\n                                        <div className=\"feature-slider-info\">\r\n                                            <span>crisoW</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"home-slider-img\">\r\n                                        <img src={slide2} alt=\"\" />\r\n                                        <div className=\"feature-slider-info\">\r\n                                            <span>flipiN</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"home-slider-img\">\r\n                                        <img src={slide3} alt=\"\" />\r\n                                        <div className=\"feature-slider-info\">\r\n                                            <span>ratkiD</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"home-slider-img\">\r\n                                        <img src={slide1} alt=\"\" />\r\n                                        <div className=\"feature-slider-info\">\r\n                                            <span>peuroY</span>\r\n                                        </div>\r\n                                    </div>\r\n                                </Slider>\r\n\r\n                        </div>\r\n\r\n                </div>\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n  \r\nexport default FeaturedStreaming;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\sectionincident\\incidentList.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\wallet.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\login-register.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\forget.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\notification\\notification.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\popups\\reset.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\monthlyrank.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\tournament\\createtournament.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\matchmakingprofile.jsx",["816"],"import React from \"react\";\r\nimport \"./matchmaking.css\";\r\nimport { Link } from \"react-router-dom\";\r\n// import { Button, Form } from 'react-bootstrap';\r\nimport user from \"../../assets/matchmaking/user.png\";\r\nimport premium from \"../../assets/matchmaking/premium.png\";\r\nimport advanced from \"../../assets/matchmaking/advanced.png\";\r\nimport check from \"../../assets/matchmaking/tick.png\";\r\n\r\n\r\n\r\nconst MatchMakingProfile = ({ username, useravatar, ispremium, ispremiumadvnaced }) => {\r\n    return (\r\n        <div className=\"matchmaking-profile\">\r\n\r\n\r\n            <div className=\"matchmaking-top\">\r\n\r\n                <div className=\"matchmaking-user\">\r\n\r\n                    <div className=\"matchmaking-user-box\">\r\n                        <img src={useravatar ? useravatar : user} alt=\"user\" />\r\n                    </div>\r\n\r\n                    <div className=\"matchmaking-user-info\">\r\n                        <h3>{username}</h3>\r\n                        <ul>\r\n                            {ispremium && <li><Link><img src={premium} alt=\"premium\" /></Link></li>}\r\n                            {ispremiumadvnaced && <li><Link ><img src={advanced} alt=\"advanced\" /></Link></li>}\r\n                            {/* <li><Link to=\"\"><img src={check} alt=\"\" /></Link></li> */}\r\n                        </ul>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"matchmaking-user-stats\">\r\n\r\n                    <div className=\"stat-box cream-text\">\r\n                        <h4>0</h4>\r\n                        <span>Played</span>\r\n                    </div>\r\n\r\n                    <div className=\"stat-box green-text\">\r\n                        <h4>0</h4>\r\n                        <span>Wins</span>\r\n                    </div>\r\n\r\n                    <div className=\"stat-box red-text\">\r\n                        <h4>0</h4>\r\n                        <span>Loses</span>\r\n                    </div>\r\n\r\n                    <div className=\"stat-box cream-text\">\r\n                        <h4>0</h4>\r\n                        <span>%Wins</span>\r\n                    </div>\r\n\r\n                    <div className=\"stat-box cream-text\">\r\n                        <h4>0</h4>\r\n                        <span>Score</span>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MatchMakingProfile;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\sharegame.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\chat.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\gameselection.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\matchmaking\\lookinggame1vs1.jsx",["817"],"import React from \"react\";\r\nimport \"./matchmaking.css\";\r\n// import { Link, NavLink } from \"react-router-dom\";\r\n// import { Button, Form } from 'react-bootstrap';\r\n// import i from \"../../assets/matchmaking/i.png\";\r\nimport userimg from '../../assets/matchmaking/user-icon.png';\r\nimport { FormatTimer } from \"../../function/index\"\r\n// import cancelimg from '../../assets/matchmaking/cross.png';\r\n\r\nconst LookingGame1vs1 = ({ StartQueue, username, useravatar, timerView: { timer, isValid }, removeQueue, QueueLength1vs1 }) => {\r\n  return (\r\n    <div className=\"looking-game\">\r\n      <div className=\"looking-game-selection\">\r\n        <div className=\"game-selection\">\r\n          <h4>MM:SOLO 1vs1</h4>\r\n        </div>\r\n        <div className=\"game-selection-1vs1\">\r\n          <img src={useravatar ? useravatar : userimg} />\r\n          <h4 className=\"text\">{username}</h4>\r\n          <h6 className=\"timer2\">{FormatTimer(timer ? timer : 0)}</h6>\r\n          {isValid ? <button type=\"submit\" value=\"start\" className=\"btn btn-danger\" onClick={() => removeQueue()}>Cancel</button> : <button type=\"submit\" value=\"start\" className=\"btn\" onClick={() => StartQueue()}>START</button>}\r\n        </div>\r\n        <div className=\"gameselection-1vs1\">\r\n          <h4>IN QUEUE: <span>{QueueLength1vs1 ? QueueLength1vs1 : 0}</span></h4>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LookingGame1vs1;","E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\news\\newsheader.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\gatherlist.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\playhub.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\hubs\\createhub.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\components\\profile\\postComponent.jsx",[],"E:\\farhajwork\\luiscsgo\\2021\\luiscsgogit\\outplayed-frontend\\src\\context\\profilecontext.js",[],{"ruleId":"818","replacedBy":"819"},{"ruleId":"820","replacedBy":"821"},{"ruleId":"822","severity":1,"message":"823","line":82,"column":3,"nodeType":"824","messageId":"825","endLine":82,"endColumn":27},{"ruleId":"826","severity":1,"message":"827","line":17,"column":28,"nodeType":"828","messageId":"829","endLine":17,"endColumn":29},{"ruleId":"826","severity":1,"message":"827","line":29,"column":28,"nodeType":"828","messageId":"829","endLine":29,"endColumn":29},{"ruleId":"826","severity":1,"message":"827","line":41,"column":28,"nodeType":"828","messageId":"829","endLine":41,"endColumn":29},{"ruleId":"826","severity":1,"message":"827","line":53,"column":28,"nodeType":"828","messageId":"829","endLine":53,"endColumn":29},{"ruleId":"826","severity":1,"message":"827","line":64,"column":28,"nodeType":"828","messageId":"829","endLine":64,"endColumn":29},{"ruleId":"826","severity":1,"message":"827","line":75,"column":28,"nodeType":"828","messageId":"829","endLine":75,"endColumn":29},{"ruleId":"826","severity":1,"message":"827","line":87,"column":28,"nodeType":"828","messageId":"829","endLine":87,"endColumn":29},{"ruleId":"822","severity":1,"message":"830","line":15,"column":48,"nodeType":"824","messageId":"825","endLine":15,"endColumn":64},{"ruleId":"822","severity":1,"message":"831","line":29,"column":12,"nodeType":"824","messageId":"825","endLine":29,"endColumn":16},{"ruleId":"822","severity":1,"message":"832","line":29,"column":18,"nodeType":"824","messageId":"825","endLine":29,"endColumn":25},{"ruleId":"833","severity":1,"message":"834","line":102,"column":8,"nodeType":"835","endLine":102,"endColumn":10,"suggestions":"836"},{"ruleId":"837","severity":1,"message":"838","line":22,"column":15,"nodeType":"839","messageId":"840","endLine":22,"endColumn":18},{"ruleId":"822","severity":1,"message":"841","line":14,"column":3,"nodeType":"824","messageId":"825","endLine":14,"endColumn":21},{"ruleId":"822","severity":1,"message":"842","line":56,"column":19,"nodeType":"824","messageId":"825","endLine":56,"endColumn":29},{"ruleId":"833","severity":1,"message":"843","line":108,"column":6,"nodeType":"835","endLine":108,"endColumn":19,"suggestions":"844"},{"ruleId":"822","severity":1,"message":"845","line":29,"column":17,"nodeType":"824","messageId":"825","endLine":29,"endColumn":25},{"ruleId":"833","severity":1,"message":"846","line":41,"column":6,"nodeType":"835","endLine":41,"endColumn":19,"suggestions":"847"},{"ruleId":"833","severity":1,"message":"848","line":47,"column":8,"nodeType":"835","endLine":47,"endColumn":10,"suggestions":"849"},{"ruleId":"822","severity":1,"message":"850","line":30,"column":11,"nodeType":"824","messageId":"825","endLine":30,"endColumn":12},{"ruleId":"833","severity":1,"message":"851","line":145,"column":6,"nodeType":"835","endLine":145,"endColumn":8,"suggestions":"852"},{"ruleId":"822","severity":1,"message":"853","line":336,"column":30,"nodeType":"824","messageId":"825","endLine":336,"endColumn":36},{"ruleId":"822","severity":1,"message":"854","line":1,"column":39,"nodeType":"824","messageId":"825","endLine":1,"endColumn":48},{"ruleId":"822","severity":1,"message":"831","line":28,"column":12,"nodeType":"824","messageId":"825","endLine":28,"endColumn":16},{"ruleId":"822","severity":1,"message":"832","line":28,"column":18,"nodeType":"824","messageId":"825","endLine":28,"endColumn":25},{"ruleId":"833","severity":1,"message":"855","line":92,"column":8,"nodeType":"835","endLine":92,"endColumn":10,"suggestions":"856"},{"ruleId":"822","severity":1,"message":"830","line":15,"column":48,"nodeType":"824","messageId":"825","endLine":15,"endColumn":64},{"ruleId":"822","severity":1,"message":"831","line":28,"column":12,"nodeType":"824","messageId":"825","endLine":28,"endColumn":16},{"ruleId":"822","severity":1,"message":"832","line":28,"column":18,"nodeType":"824","messageId":"825","endLine":28,"endColumn":25},{"ruleId":"833","severity":1,"message":"834","line":100,"column":8,"nodeType":"835","endLine":100,"endColumn":10,"suggestions":"857"},{"ruleId":"822","severity":1,"message":"858","line":36,"column":36,"nodeType":"824","messageId":"825","endLine":36,"endColumn":51},{"ruleId":"822","severity":1,"message":"859","line":53,"column":27,"nodeType":"824","messageId":"825","endLine":53,"endColumn":45},{"ruleId":"822","severity":1,"message":"860","line":54,"column":18,"nodeType":"824","messageId":"825","endLine":54,"endColumn":27},{"ruleId":"833","severity":1,"message":"848","line":81,"column":6,"nodeType":"835","endLine":81,"endColumn":8,"suggestions":"861"},{"ruleId":"822","severity":1,"message":"862","line":12,"column":3,"nodeType":"824","messageId":"825","endLine":12,"endColumn":11},{"ruleId":"822","severity":1,"message":"863","line":51,"column":19,"nodeType":"824","messageId":"825","endLine":51,"endColumn":29},{"ruleId":"822","severity":1,"message":"864","line":52,"column":19,"nodeType":"824","messageId":"825","endLine":52,"endColumn":29},{"ruleId":"822","severity":1,"message":"865","line":59,"column":10,"nodeType":"824","messageId":"825","endLine":59,"endColumn":23},{"ruleId":"866","severity":1,"message":"867","line":27,"column":19,"nodeType":"868","endLine":27,"endColumn":83},{"ruleId":"822","severity":1,"message":"869","line":14,"column":8,"nodeType":"824","messageId":"825","endLine":14,"endColumn":25},{"ruleId":"870","severity":1,"message":"871","line":46,"column":23,"nodeType":"828","messageId":"840","endLine":46,"endColumn":25},{"ruleId":"870","severity":1,"message":"871","line":48,"column":30,"nodeType":"828","messageId":"840","endLine":48,"endColumn":32},{"ruleId":"833","severity":1,"message":"872","line":94,"column":8,"nodeType":"835","endLine":94,"endColumn":10,"suggestions":"873"},{"ruleId":"874","severity":1,"message":"875","line":6,"column":7,"nodeType":"868","endLine":6,"endColumn":27},{"ruleId":"876","severity":1,"message":"877","line":1,"column":1,"nodeType":"878","messageId":"840","fix":"879"},{"ruleId":"822","severity":1,"message":"880","line":1,"column":17,"nodeType":"824","messageId":"825","endLine":1,"endColumn":25},{"ruleId":"822","severity":1,"message":"854","line":1,"column":27,"nodeType":"824","messageId":"825","endLine":1,"endColumn":36},{"ruleId":"822","severity":1,"message":"881","line":23,"column":10,"nodeType":"824","messageId":"825","endLine":23,"endColumn":20},{"ruleId":"822","severity":1,"message":"882","line":25,"column":16,"nodeType":"824","messageId":"825","endLine":25,"endColumn":23},{"ruleId":"876","severity":1,"message":"877","line":1,"column":1,"nodeType":"878","messageId":"840","fix":"883"},{"ruleId":"822","severity":1,"message":"884","line":2,"column":8,"nodeType":"824","messageId":"825","endLine":2,"endColumn":16},{"ruleId":"822","severity":1,"message":"885","line":3,"column":15,"nodeType":"824","messageId":"825","endLine":3,"endColumn":21},{"ruleId":"822","severity":1,"message":"886","line":8,"column":8,"nodeType":"824","messageId":"825","endLine":8,"endColumn":18},{"ruleId":"822","severity":1,"message":"887","line":20,"column":10,"nodeType":"824","messageId":"825","endLine":20,"endColumn":23},{"ruleId":"822","severity":1,"message":"888","line":10,"column":12,"nodeType":"824","messageId":"825","endLine":10,"endColumn":25},{"ruleId":"822","severity":1,"message":"889","line":11,"column":12,"nodeType":"824","messageId":"825","endLine":11,"endColumn":18},{"ruleId":"822","severity":1,"message":"890","line":11,"column":20,"nodeType":"824","messageId":"825","endLine":11,"endColumn":29},{"ruleId":"822","severity":1,"message":"891","line":10,"column":12,"nodeType":"824","messageId":"825","endLine":10,"endColumn":23},{"ruleId":"822","severity":1,"message":"889","line":11,"column":12,"nodeType":"824","messageId":"825","endLine":11,"endColumn":18},{"ruleId":"822","severity":1,"message":"890","line":11,"column":20,"nodeType":"824","messageId":"825","endLine":11,"endColumn":29},{"ruleId":"874","severity":1,"message":"875","line":77,"column":17,"nodeType":"868","endLine":77,"endColumn":58},{"ruleId":"822","severity":1,"message":"892","line":21,"column":12,"nodeType":"824","messageId":"825","endLine":21,"endColumn":26},{"ruleId":"822","severity":1,"message":"893","line":21,"column":28,"nodeType":"824","messageId":"825","endLine":21,"endColumn":45},{"ruleId":"874","severity":1,"message":"875","line":256,"column":34,"nodeType":"868","endLine":256,"endColumn":72},{"ruleId":"874","severity":1,"message":"875","line":275,"column":25,"nodeType":"868","endLine":275,"endColumn":66},{"ruleId":"822","severity":1,"message":"894","line":1,"column":27,"nodeType":"824","messageId":"825","endLine":1,"endColumn":33},{"ruleId":"822","severity":1,"message":"895","line":2,"column":24,"nodeType":"824","messageId":"825","endLine":2,"endColumn":32},{"ruleId":"822","severity":1,"message":"896","line":12,"column":23,"nodeType":"824","messageId":"825","endLine":12,"endColumn":30},{"ruleId":"822","severity":1,"message":"896","line":36,"column":15,"nodeType":"824","messageId":"825","endLine":36,"endColumn":22},{"ruleId":"822","severity":1,"message":"854","line":1,"column":17,"nodeType":"824","messageId":"825","endLine":1,"endColumn":26},{"ruleId":"822","severity":1,"message":"854","line":1,"column":17,"nodeType":"824","messageId":"825","endLine":1,"endColumn":26},{"ruleId":"822","severity":1,"message":"897","line":3,"column":25,"nodeType":"824","messageId":"825","endLine":3,"endColumn":30},{"ruleId":"822","severity":1,"message":"885","line":3,"column":17,"nodeType":"824","messageId":"825","endLine":3,"endColumn":23},{"ruleId":"822","severity":1,"message":"898","line":3,"column":25,"nodeType":"824","messageId":"825","endLine":3,"endColumn":29},{"ruleId":"822","severity":1,"message":"899","line":4,"column":8,"nodeType":"824","messageId":"825","endLine":4,"endColumn":15},{"ruleId":"822","severity":1,"message":"900","line":6,"column":10,"nodeType":"824","messageId":"825","endLine":6,"endColumn":22},{"ruleId":"822","severity":1,"message":"901","line":10,"column":12,"nodeType":"824","messageId":"825","endLine":10,"endColumn":27},{"ruleId":"874","severity":1,"message":"875","line":90,"column":17,"nodeType":"868","endLine":90,"endColumn":58},{"ruleId":"822","severity":1,"message":"897","line":3,"column":25,"nodeType":"824","messageId":"825","endLine":3,"endColumn":30},{"ruleId":"822","severity":1,"message":"899","line":5,"column":8,"nodeType":"824","messageId":"825","endLine":5,"endColumn":15},{"ruleId":"822","severity":1,"message":"902","line":6,"column":24,"nodeType":"824","messageId":"825","endLine":6,"endColumn":35},{"ruleId":"822","severity":1,"message":"903","line":11,"column":12,"nodeType":"824","messageId":"825","endLine":11,"endColumn":26},{"ruleId":"822","severity":1,"message":"904","line":12,"column":12,"nodeType":"824","messageId":"825","endLine":12,"endColumn":23},{"ruleId":"822","severity":1,"message":"905","line":12,"column":25,"nodeType":"824","messageId":"825","endLine":12,"endColumn":39},{"ruleId":"822","severity":1,"message":"906","line":13,"column":12,"nodeType":"824","messageId":"825","endLine":13,"endColumn":21},{"ruleId":"822","severity":1,"message":"907","line":13,"column":23,"nodeType":"824","messageId":"825","endLine":13,"endColumn":35},{"ruleId":"822","severity":1,"message":"908","line":75,"column":64,"nodeType":"824","messageId":"825","endLine":75,"endColumn":71},{"ruleId":"822","severity":1,"message":"909","line":79,"column":48,"nodeType":"824","messageId":"825","endLine":79,"endColumn":57},{"ruleId":"822","severity":1,"message":"910","line":19,"column":10,"nodeType":"824","messageId":"825","endLine":19,"endColumn":20},{"ruleId":"822","severity":1,"message":"911","line":19,"column":22,"nodeType":"824","messageId":"825","endLine":19,"endColumn":36},{"ruleId":"874","severity":1,"message":"875","line":249,"column":23,"nodeType":"868","endLine":249,"endColumn":64},{"ruleId":"912","severity":1,"message":"913","line":257,"column":55,"nodeType":"914","endLine":257,"endColumn":67},{"ruleId":"833","severity":1,"message":"915","line":48,"column":8,"nodeType":"835","endLine":48,"endColumn":10,"suggestions":"916"},{"ruleId":"874","severity":1,"message":"875","line":161,"column":41,"nodeType":"868","endLine":161,"endColumn":83},{"ruleId":"833","severity":1,"message":"917","line":37,"column":8,"nodeType":"835","endLine":37,"endColumn":10,"suggestions":"918"},{"ruleId":"919","severity":1,"message":"920","line":76,"column":15,"nodeType":"921","messageId":"922","endLine":76,"endColumn":16,"suggestions":"923"},{"ruleId":"919","severity":1,"message":"920","line":76,"column":40,"nodeType":"921","messageId":"922","endLine":76,"endColumn":41,"suggestions":"924"},{"ruleId":"919","severity":1,"message":"920","line":100,"column":15,"nodeType":"921","messageId":"922","endLine":100,"endColumn":16,"suggestions":"925"},{"ruleId":"919","severity":1,"message":"920","line":100,"column":40,"nodeType":"921","messageId":"922","endLine":100,"endColumn":41,"suggestions":"926"},{"ruleId":"919","severity":1,"message":"920","line":237,"column":15,"nodeType":"921","messageId":"922","endLine":237,"endColumn":16,"suggestions":"927"},{"ruleId":"919","severity":1,"message":"920","line":237,"column":40,"nodeType":"921","messageId":"922","endLine":237,"endColumn":41,"suggestions":"928"},{"ruleId":"822","severity":1,"message":"929","line":442,"column":9,"nodeType":"824","messageId":"825","endLine":442,"endColumn":27},{"ruleId":"822","severity":1,"message":"930","line":606,"column":11,"nodeType":"824","messageId":"825","endLine":606,"endColumn":16},{"ruleId":"822","severity":1,"message":"931","line":690,"column":9,"nodeType":"824","messageId":"825","endLine":690,"endColumn":14},{"ruleId":"932","severity":1,"message":"933","line":743,"column":67,"nodeType":"934","messageId":"935","endLine":743,"endColumn":68},{"ruleId":"932","severity":1,"message":"933","line":798,"column":67,"nodeType":"934","messageId":"935","endLine":798,"endColumn":68},{"ruleId":"919","severity":1,"message":"920","line":1185,"column":15,"nodeType":"921","messageId":"922","endLine":1185,"endColumn":16,"suggestions":"936"},{"ruleId":"919","severity":1,"message":"920","line":1185,"column":40,"nodeType":"921","messageId":"922","endLine":1185,"endColumn":41,"suggestions":"937"},{"ruleId":"822","severity":1,"message":"938","line":10,"column":12,"nodeType":"824","messageId":"825","endLine":10,"endColumn":26},{"ruleId":"874","severity":1,"message":"875","line":76,"column":17,"nodeType":"868","endLine":76,"endColumn":57},{"ruleId":"822","severity":1,"message":"860","line":20,"column":20,"nodeType":"824","messageId":"825","endLine":20,"endColumn":29},{"ruleId":"833","severity":1,"message":"939","line":48,"column":6,"nodeType":"835","endLine":48,"endColumn":8,"suggestions":"940"},{"ruleId":"822","severity":1,"message":"941","line":24,"column":12,"nodeType":"824","messageId":"825","endLine":24,"endColumn":18},{"ruleId":"822","severity":1,"message":"854","line":1,"column":17,"nodeType":"824","messageId":"825","endLine":1,"endColumn":26},{"ruleId":"822","severity":1,"message":"942","line":16,"column":49,"nodeType":"824","messageId":"825","endLine":16,"endColumn":63},{"ruleId":"822","severity":1,"message":"860","line":20,"column":20,"nodeType":"824","messageId":"825","endLine":20,"endColumn":29},{"ruleId":"822","severity":1,"message":"943","line":10,"column":12,"nodeType":"824","messageId":"825","endLine":10,"endColumn":29},{"ruleId":"822","severity":1,"message":"944","line":74,"column":31,"nodeType":"824","messageId":"825","endLine":74,"endColumn":40},{"ruleId":"874","severity":1,"message":"875","line":77,"column":17,"nodeType":"868","endLine":77,"endColumn":58},{"ruleId":"822","severity":1,"message":"862","line":9,"column":8,"nodeType":"824","messageId":"825","endLine":9,"endColumn":16},{"ruleId":"822","severity":1,"message":"945","line":10,"column":8,"nodeType":"824","messageId":"825","endLine":10,"endColumn":17},{"ruleId":"874","severity":1,"message":"875","line":127,"column":32,"nodeType":"868","endLine":127,"endColumn":70},{"ruleId":"866","severity":1,"message":"867","line":197,"column":21,"nodeType":"868","endLine":197,"endColumn":58},{"ruleId":"866","severity":1,"message":"867","line":212,"column":32,"nodeType":"868","endLine":212,"endColumn":67},{"ruleId":"866","severity":1,"message":"867","line":322,"column":25,"nodeType":"868","endLine":322,"endColumn":60},{"ruleId":"866","severity":1,"message":"867","line":342,"column":25,"nodeType":"868","endLine":342,"endColumn":60},{"ruleId":"866","severity":1,"message":"867","line":366,"column":25,"nodeType":"868","endLine":366,"endColumn":60},{"ruleId":"866","severity":1,"message":"867","line":389,"column":25,"nodeType":"868","endLine":389,"endColumn":60},{"ruleId":"866","severity":1,"message":"867","line":410,"column":25,"nodeType":"868","endLine":410,"endColumn":60},{"ruleId":"866","severity":1,"message":"867","line":432,"column":21,"nodeType":"868","endLine":432,"endColumn":56},{"ruleId":"866","severity":1,"message":"867","line":439,"column":21,"nodeType":"868","endLine":439,"endColumn":56},{"ruleId":"866","severity":1,"message":"867","line":446,"column":21,"nodeType":"868","endLine":446,"endColumn":56},{"ruleId":"874","severity":1,"message":"875","line":464,"column":60,"nodeType":"868","endLine":464,"endColumn":108},{"ruleId":"822","severity":1,"message":"946","line":16,"column":26,"nodeType":"824","messageId":"825","endLine":16,"endColumn":41},{"ruleId":"822","severity":1,"message":"947","line":37,"column":72,"nodeType":"824","messageId":"825","endLine":37,"endColumn":75},{"ruleId":"822","severity":1,"message":"948","line":8,"column":25,"nodeType":"824","messageId":"825","endLine":8,"endColumn":37},{"ruleId":"874","severity":1,"message":"875","line":18,"column":37,"nodeType":"868","endLine":18,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":24,"column":37,"nodeType":"868","endLine":24,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":32,"column":37,"nodeType":"868","endLine":32,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":38,"column":37,"nodeType":"868","endLine":38,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":46,"column":37,"nodeType":"868","endLine":46,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":52,"column":37,"nodeType":"868","endLine":52,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":60,"column":37,"nodeType":"868","endLine":60,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":66,"column":37,"nodeType":"868","endLine":66,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":74,"column":37,"nodeType":"868","endLine":74,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":80,"column":37,"nodeType":"868","endLine":80,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":88,"column":37,"nodeType":"868","endLine":88,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":94,"column":37,"nodeType":"868","endLine":94,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":102,"column":37,"nodeType":"868","endLine":102,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":108,"column":37,"nodeType":"868","endLine":108,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":117,"column":37,"nodeType":"868","endLine":117,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":123,"column":37,"nodeType":"868","endLine":123,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":135,"column":37,"nodeType":"868","endLine":135,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":141,"column":37,"nodeType":"868","endLine":141,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":149,"column":37,"nodeType":"868","endLine":149,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":155,"column":37,"nodeType":"868","endLine":155,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":163,"column":37,"nodeType":"868","endLine":163,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":169,"column":37,"nodeType":"868","endLine":169,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":177,"column":37,"nodeType":"868","endLine":177,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":183,"column":37,"nodeType":"868","endLine":183,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":195,"column":37,"nodeType":"868","endLine":195,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":201,"column":37,"nodeType":"868","endLine":201,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":209,"column":37,"nodeType":"868","endLine":209,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":215,"column":37,"nodeType":"868","endLine":215,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":227,"column":37,"nodeType":"868","endLine":227,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":233,"column":37,"nodeType":"868","endLine":233,"endColumn":61},{"ruleId":"874","severity":1,"message":"875","line":244,"column":33,"nodeType":"868","endLine":244,"endColumn":53},{"ruleId":"874","severity":1,"message":"875","line":253,"column":33,"nodeType":"868","endLine":253,"endColumn":57},{"ruleId":"874","severity":1,"message":"875","line":254,"column":33,"nodeType":"868","endLine":254,"endColumn":56},{"ruleId":"874","severity":1,"message":"875","line":259,"column":33,"nodeType":"868","endLine":259,"endColumn":51},{"ruleId":"874","severity":1,"message":"875","line":66,"column":17,"nodeType":"868","endLine":66,"endColumn":65},{"ruleId":"874","severity":1,"message":"875","line":69,"column":21,"nodeType":"868","endLine":69,"endColumn":115},{"ruleId":"822","severity":1,"message":"949","line":7,"column":8,"nodeType":"824","messageId":"825","endLine":7,"endColumn":17},{"ruleId":"874","severity":1,"message":"875","line":39,"column":21,"nodeType":"868","endLine":39,"endColumn":41},{"ruleId":"874","severity":1,"message":"875","line":48,"column":21,"nodeType":"868","endLine":48,"endColumn":71},{"ruleId":"874","severity":1,"message":"875","line":49,"column":21,"nodeType":"868","endLine":49,"endColumn":82},{"ruleId":"874","severity":1,"message":"875","line":54,"column":25,"nodeType":"868","endLine":54,"endColumn":43},{"ruleId":"874","severity":1,"message":"875","line":78,"column":17,"nodeType":"868","endLine":78,"endColumn":67},{"ruleId":"874","severity":1,"message":"875","line":84,"column":17,"nodeType":"868","endLine":84,"endColumn":69},{"ruleId":"874","severity":1,"message":"875","line":13,"column":17,"nodeType":"868","endLine":13,"endColumn":54},{"ruleId":"874","severity":1,"message":"875","line":60,"column":33,"nodeType":"868","endLine":60,"endColumn":51},{"ruleId":"874","severity":1,"message":"875","line":62,"column":33,"nodeType":"868","endLine":62,"endColumn":51},{"ruleId":"822","severity":1,"message":"950","line":4,"column":8,"nodeType":"824","messageId":"825","endLine":4,"endColumn":12},{"ruleId":"874","severity":1,"message":"875","line":20,"column":45,"nodeType":"868","endLine":20,"endColumn":99},{"ruleId":"874","severity":1,"message":"875","line":22,"column":49,"nodeType":"868","endLine":22,"endColumn":116},{"ruleId":"822","severity":1,"message":"880","line":1,"column":17,"nodeType":"824","messageId":"825","endLine":1,"endColumn":25},{"ruleId":"822","severity":1,"message":"951","line":3,"column":16,"nodeType":"824","messageId":"825","endLine":3,"endColumn":23},{"ruleId":"822","severity":1,"message":"898","line":4,"column":10,"nodeType":"824","messageId":"825","endLine":4,"endColumn":14},{"ruleId":"822","severity":1,"message":"885","line":4,"column":16,"nodeType":"824","messageId":"825","endLine":4,"endColumn":22},{"ruleId":"822","severity":1,"message":"952","line":4,"column":24,"nodeType":"824","messageId":"825","endLine":4,"endColumn":27},{"ruleId":"822","severity":1,"message":"880","line":1,"column":17,"nodeType":"824","messageId":"825","endLine":1,"endColumn":25},{"ruleId":"822","severity":1,"message":"951","line":3,"column":16,"nodeType":"824","messageId":"825","endLine":3,"endColumn":23},{"ruleId":"822","severity":1,"message":"898","line":4,"column":10,"nodeType":"824","messageId":"825","endLine":4,"endColumn":14},{"ruleId":"822","severity":1,"message":"885","line":4,"column":16,"nodeType":"824","messageId":"825","endLine":4,"endColumn":22},{"ruleId":"822","severity":1,"message":"952","line":4,"column":24,"nodeType":"824","messageId":"825","endLine":4,"endColumn":27},{"ruleId":"822","severity":1,"message":"880","line":1,"column":17,"nodeType":"824","messageId":"825","endLine":1,"endColumn":25},{"ruleId":"822","severity":1,"message":"953","line":2,"column":10,"nodeType":"824","messageId":"825","endLine":2,"endColumn":14},{"ruleId":"822","severity":1,"message":"898","line":3,"column":10,"nodeType":"824","messageId":"825","endLine":3,"endColumn":14},{"ruleId":"822","severity":1,"message":"885","line":3,"column":16,"nodeType":"824","messageId":"825","endLine":3,"endColumn":22},{"ruleId":"822","severity":1,"message":"854","line":1,"column":17,"nodeType":"824","messageId":"825","endLine":1,"endColumn":26},{"ruleId":"822","severity":1,"message":"954","line":5,"column":10,"nodeType":"824","messageId":"825","endLine":5,"endColumn":23},{"ruleId":"955","severity":1,"message":"956","line":23,"column":25,"nodeType":"921","messageId":"957","endLine":23,"endColumn":45},{"ruleId":"822","severity":1,"message":"953","line":2,"column":10,"nodeType":"824","messageId":"825","endLine":2,"endColumn":14},{"ruleId":"958","severity":1,"message":"959","line":323,"column":11,"nodeType":"868","endLine":323,"endColumn":48},{"ruleId":"874","severity":1,"message":"875","line":562,"column":7,"nodeType":"868","endLine":562,"endColumn":55},{"ruleId":"822","severity":1,"message":"960","line":11,"column":8,"nodeType":"824","messageId":"825","endLine":11,"endColumn":18},{"ruleId":"874","severity":1,"message":"875","line":45,"column":11,"nodeType":"868","endLine":45,"endColumn":78},{"ruleId":"874","severity":1,"message":"875","line":91,"column":23,"nodeType":"868","endLine":91,"endColumn":93},{"ruleId":"874","severity":1,"message":"875","line":101,"column":30,"nodeType":"868","endLine":101,"endColumn":75},{"ruleId":"874","severity":1,"message":"875","line":102,"column":42,"nodeType":"868","endLine":102,"endColumn":86},{"ruleId":"874","severity":1,"message":"875","line":105,"column":35,"nodeType":"868","endLine":105,"endColumn":105},{"ruleId":"874","severity":1,"message":"875","line":108,"column":9,"nodeType":"868","endLine":108,"endColumn":55},{"ruleId":"822","severity":1,"message":"885","line":2,"column":16,"nodeType":"824","messageId":"825","endLine":2,"endColumn":22},{"ruleId":"822","severity":1,"message":"951","line":3,"column":16,"nodeType":"824","messageId":"825","endLine":3,"endColumn":23},{"ruleId":"822","severity":1,"message":"961","line":8,"column":8,"nodeType":"824","messageId":"825","endLine":8,"endColumn":13},{"ruleId":"874","severity":1,"message":"875","line":18,"column":11,"nodeType":"868","endLine":18,"endColumn":58},"no-native-reassign",["962"],"no-negated-in-lhs",["963"],"no-unused-vars","'GetNotifyEventTournament' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'HubGameCancelled' is defined but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'TournamentRoomData'. Either include it or remove the dependency array.","ArrayExpression",["964"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'validateHubsSearch' is defined but never used.","'setErrors2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GatherListData'. Either include it or remove the dependency array.",["965"],"'setLimit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'NewsListData'. Either include it or remove the dependency array.",["966"],"React Hook useEffect has a missing dependency: 'checkQueue'. Either include it or remove the dependency array.",["967"],"'t' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'HubsData'. Either include it or remove the dependency array.",["968"],"'joinid' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'MatchMakingData'. Either include it or remove the dependency array.",["969"],["970"],"'QueueLength5vs5' is assigned a value but never used.","'setSelectedPlayers' is assigned a value but never used.","'setErrors' is assigned a value but never used.",["971"],"'prestige' is defined but never used.","'setMinRank' is assigned a value but never used.","'setMaxRank' is assigned a value but never used.","'filterCountry' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'TournamentBrakets' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'TournamentData'. Either include it or remove the dependency array.",["972"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program",{"range":"973","text":"974"},"'useState' is defined but never used.","'pageCounts' is assigned a value but never used.","'setSkip' is assigned a value but never used.",{"range":"975","text":"974"},"'Lightbox' is defined but never used.","'Button' is defined but never used.","'counterone' is defined but never used.","'lightboximage' is assigned a value but never used.","'allServerCopy' is assigned a value but never used.","'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'allMpasCopy' is assigned a value but never used.","'steamcheckType' is assigned a value but never used.","'setSteamCheckType' is assigned a value but never used.","'useRef' is defined but never used.","'Dropdown' is defined but never used.","'payload' is assigned a value but never used.","'Modal' is defined but never used.","'Form' is defined but never used.","'history' is defined but never used.","'Notification' is defined but never used.","'allitemlistCopy' is assigned a value but never used.","'queryString' is defined but never used.","'allalluserCopy' is assigned a value but never used.","'isturnament' is assigned a value but never used.","'setisTurnament' is assigned a value but never used.","'isladders' is assigned a value but never used.","'setisLadders' is assigned a value but never used.","'isroles' is assigned a value but never used.","'laddermsg' is assigned a value but never used.","'upoadimage' is assigned a value but never used.","'setUploadimage' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has a missing dependency: 'GetNesData'. Either include it or remove the dependency array.",["976"],"React Hook useEffect has a missing dependency: 'GetNormalHubsData'. Either include it or remove the dependency array.",["977"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["978","979"],["980","981"],["982","983"],["984","985"],["986","987"],["988","989"],"'checkOfflinePeople' is assigned a value but never used.","'hours' is assigned a value but never used.","'dates' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["990","991"],["992","993"],"'allproductCopy' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetMapsData'. Either include it or remove the dependency array.",["994"],"'loader' is assigned a value but never used.","'setUserDetails' is assigned a value but never used.","'alltournamentCopy' is assigned a value but never used.","'createdBy' is assigned a value but never used.","'prestige1' is defined but never used.","'setCategoryList' is assigned a value but never used.","'_id' is assigned a value but never used.","'SearcFriends' is assigned a value but never used.","'prestigio' is defined but never used.","'icon' is defined but never used.","'NavLink' is defined but never used.","'Nav' is defined but never used.","'Link' is defined but never used.","'adminInstance' is defined but never used.","no-script-url","Script URL is a form of eval.","unexpectedScriptURL","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'inviteuser' is defined but never used.","'check' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"995","fix":"996"},{"desc":"997","fix":"998"},{"desc":"999","fix":"1000"},{"desc":"1001","fix":"1002"},{"desc":"1003","fix":"1004"},{"desc":"1005","fix":"1006"},{"desc":"995","fix":"1007"},{"desc":"1001","fix":"1008"},{"desc":"1009","fix":"1010"},[-1,0],"",[-1,0],{"desc":"1011","fix":"1012"},{"desc":"1013","fix":"1014"},{"messageId":"1015","fix":"1016","desc":"1017"},{"messageId":"1018","fix":"1019","desc":"1020"},{"messageId":"1015","fix":"1021","desc":"1017"},{"messageId":"1018","fix":"1022","desc":"1020"},{"messageId":"1015","fix":"1023","desc":"1017"},{"messageId":"1018","fix":"1024","desc":"1020"},{"messageId":"1015","fix":"1025","desc":"1017"},{"messageId":"1018","fix":"1026","desc":"1020"},{"messageId":"1015","fix":"1027","desc":"1017"},{"messageId":"1018","fix":"1028","desc":"1020"},{"messageId":"1015","fix":"1029","desc":"1017"},{"messageId":"1018","fix":"1030","desc":"1020"},{"messageId":"1015","fix":"1031","desc":"1017"},{"messageId":"1018","fix":"1032","desc":"1020"},{"messageId":"1015","fix":"1033","desc":"1017"},{"messageId":"1018","fix":"1034","desc":"1020"},{"desc":"1035","fix":"1036"},"Update the dependencies array to be: [TournamentRoomData]",{"range":"1037","text":"1038"},"Update the dependencies array to be: [skip, limit, GatherListData]",{"range":"1039","text":"1040"},"Update the dependencies array to be: [NewsListData, limit, skip]",{"range":"1041","text":"1042"},"Update the dependencies array to be: [checkQueue]",{"range":"1043","text":"1044"},"Update the dependencies array to be: [HubsData]",{"range":"1045","text":"1046"},"Update the dependencies array to be: [MatchMakingData]",{"range":"1047","text":"1048"},{"range":"1049","text":"1038"},{"range":"1050","text":"1044"},"Update the dependencies array to be: [TournamentData]",{"range":"1051","text":"1052"},"Update the dependencies array to be: [GetNesData]",{"range":"1053","text":"1054"},"Update the dependencies array to be: [GetNormalHubsData]",{"range":"1055","text":"1056"},"removeEscape",{"range":"1057","text":"974"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1058","text":"1059"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1060","text":"974"},{"range":"1061","text":"1059"},{"range":"1062","text":"974"},{"range":"1063","text":"1059"},{"range":"1064","text":"974"},{"range":"1065","text":"1059"},{"range":"1066","text":"974"},{"range":"1067","text":"1059"},{"range":"1068","text":"974"},{"range":"1069","text":"1059"},{"range":"1070","text":"974"},{"range":"1071","text":"1059"},{"range":"1072","text":"974"},{"range":"1073","text":"1059"},"Update the dependencies array to be: [GetMapsData]",{"range":"1074","text":"1075"},[4385,4387],"[TournamentRoomData]",[3053,3066],"[skip, limit, GatherListData]",[1453,1466],"[NewsListData, limit, skip]",[1774,1776],"[checkQueue]",[4995,4997],"[HubsData]",[4020,4022],"[MatchMakingData]",[4363,4365],[2863,2865],[3784,3786],"[TournamentData]",[2072,2074],"[GetNesData]",[1756,1758],"[GetNormalHubsData]",[2556,2557],[2556,2556],"\\",[2581,2582],[2581,2581],[3478,3479],[3478,3478],[3503,3504],[3503,3503],[8112,8113],[8112,8112],[8137,8138],[8137,8137],[37539,37540],[37539,37539],[37564,37565],[37564,37564],[1425,1427],"[GetMapsData]"]